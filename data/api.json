{
  "animations": {
    "brief": "Animations in SplashKit can be used to move between cells in\nbitmaps and sprites. Each animation generates a number sequence\nthat can then be used when drawing bitmaps.",
    "description": "",
    "functions": [
      {
        "signature": "int animation_count(animation_script script);",
        "name": "animation_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of `animation`s within an `animation_script`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns an `int` equal to the total number of animations in the script.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to count the animations in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "animation_count",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationCount(script: AnimationScript): Integer",
          "cpp": "int animation_count(animation_script script)"
        }
      },
      {
        "signature": "int animation_current_cell(animation anim);",
        "name": "animation_current_cell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current cell (the part of the image or sprite) of this\nanimation. This can be used to animate an image or sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the current cell of the animation passed to the method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to return the cell of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "current_cell",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationCurrentCell(anim: Animation): Integer",
          "cpp": "int animation_current_cell(animation anim)"
        }
      },
      {
        "signature": "vector_2d animation_current_vector(animation anim);",
        "name": "animation_current_vector",
        "method_name": "current_vector",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check the vector of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "current_vector",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationCurrentVector(anim: Animation): Vector2d",
          "cpp": "vector_2d animation_current_vector(animation anim)"
        }
      },
      {
        "signature": "bool animation_ended(animation anim);",
        "name": "animation_ended",
        "method_name": "ended",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if an `animation` has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `animation` has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "ended",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationEnded(anim: Animation): Boolean",
          "cpp": "bool animation_ended(animation anim)"
        }
      },
      {
        "signature": "bool animation_entered_frame(animation anim);",
        "name": "animation_entered_frame",
        "method_name": "entered_frame",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the `animation` entered a new frame on its last update.\nThis can be used to trigger actions on frames within an animation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `animation` has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "entered_frame",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationEnteredFrame(anim: Animation): Boolean",
          "cpp": "bool animation_entered_frame(animation anim)"
        }
      },
      {
        "signature": "float animation_frame_time(animation anim);",
        "name": "animation_frame_time",
        "method_name": "frame_time",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of time spent in the current frame. When this\nexceeds the frames duration the animation moves to the next frame.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns the amount of time spent in the current frame as a `float`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "frame_time",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationFrameTime(anim: Animation): Single",
          "cpp": "float animation_frame_time(animation anim)"
        }
      },
      {
        "signature": "int animation_index(animation_script script,const string &name);",
        "name": "animation_index",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the index of the `animation` in the `animation_script`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to look for the `animation` in.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "getter": "animation_index",
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationIndex(script: AnimationScript; const name: String): Integer",
          "cpp": "int animation_index(animation_script script, const string &name)"
        }
      },
      {
        "signature": "string animation_name(animation temp);",
        "name": "animation_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Searches an `animation_script` for an animation and returns its name.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the name of the `animation` in the `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "temp": {
            "type": "animation",
            "description": "The `animation` to search for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "getter": "name",
          "self": "temp",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationName(temp: Animation): String",
          "cpp": "string animation_name(animation temp)"
        }
      },
      {
        "signature": "string animation_script_name(animation_script script);",
        "name": "animation_script_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retuns the name of an `animation_script`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a `string` that is the name of the animation script passed to the method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to return the name of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationScriptName(script: AnimationScript): String",
          "cpp": "string animation_script_name(animation_script script)"
        }
      },
      {
        "signature": "animation_script animation_script_named(const string &name);",
        "name": "animation_script_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a `animation_script`. The supplied filename is\nused to locate the `animation_script` to load. The supplied name\nindicates the name to use to refer to this in SplashKit. The\n`animation_script` can then be retrieved by passing this name to\nthe animation_script_named method.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "description": "Returns the newly loaded `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "Indicates the name used to locate the animation_script to load",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function AnimationScriptNamed(const name: String): AnimationScript",
          "cpp": "animation_script animation_script_named(const string &name)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,const string &name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; script: AnimationScript; const name: String)",
          "cpp": "void assign_animation(animation anim, animation_script script, const string &name)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,const string &name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; script: AnimationScript; const name: String; withSound: Boolean)",
          "cpp": "void assign_animation(animation anim, animation_script script, const string &name, bool with_sound)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; script: AnimationScript; idx: Integer)",
          "cpp": "void assign_animation(animation anim, animation_script script, int idx)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,animation_script script,int idx,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; script: AnimationScript; idx: Integer; withSound: Boolean)",
          "cpp": "void assign_animation(animation anim, animation_script script, int idx, bool with_sound)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,const string &script_name,const string &name);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; const scriptName: String; const name: String)",
          "cpp": "void assign_animation(animation anim, const string &script_name, const string &name)"
        }
      },
      {
        "signature": "void assign_animation(animation anim,const string &script_name,const string &name,bool with_sound);",
        "name": "assign_animation",
        "method_name": "assign",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to be assigned.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to assign the `animation` to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation` to be assigned",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "assign",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure AssignAnimation(anim: Animation; const scriptName: String; const name: String; withSound: Boolean)",
          "cpp": "void assign_animation(animation anim, const string &script_name, const string &name, bool with_sound)"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,int idx,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the `animation` to create.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function CreateAnimation(script: AnimationScript; idx: Integer; withSound: Boolean): Animation",
          "cpp": "animation create_animation(animation_script script, int idx, bool with_sound)"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,const string &name);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function CreateAnimation(script: AnimationScript; const name: String): Animation",
          "cpp": "animation create_animation(animation_script script, const string &name)"
        }
      },
      {
        "signature": "animation create_animation(animation_script script,const string &name,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "self": "script",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function CreateAnimation(script: AnimationScript; const name: String; withSound: Boolean): Animation",
          "cpp": "animation create_animation(animation_script script, const string &name, bool with_sound)"
        }
      },
      {
        "signature": "animation create_animation(const string &script_name,const string &name);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function CreateAnimation(const scriptName: String; const name: String): Animation",
          "cpp": "animation create_animation(const string &script_name, const string &name)"
        }
      },
      {
        "signature": "animation create_animation(const string &script_name,const string &name,bool with_sound);",
        "name": "create_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
        "brief": null,
        "return": {
          "type": "animation",
          "description": "Returns the newly created `animation`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_name": {
            "type": "string",
            "description": "The name of the `animation_script` to create the `animation` from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name for the new `animation`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function CreateAnimation(const scriptName: String; const name: String; withSound: Boolean): Animation",
          "cpp": "animation create_animation(const string &script_name, const string &name, bool with_sound)"
        }
      },
      {
        "signature": "void free_all_animation_scripts();",
        "name": "free_all_animation_scripts",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees all loaded `animation_script`s.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "animation",
          "method": "free_all",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure FreeAllAnimationScripts()",
          "cpp": "void free_all_animation_scripts()"
        }
      },
      {
        "signature": "void free_animation(animation ani);",
        "name": "free_animation",
        "method_name": "free",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Disposes of the resources used in the animation.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ani": {
            "type": "animation",
            "description": "The `animation` to be disposed of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "destructor": true,
          "method": "free",
          "self": "ani",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure FreeAnimation(ani: Animation)",
          "cpp": "void free_animation(animation ani)"
        }
      },
      {
        "signature": "void free_animation_script(animation_script script_to_free);",
        "name": "free_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded animation frames data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script_to_free": {
            "type": "animation_script",
            "description": "The `animation_script` to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "destructor": true,
          "self": "script_to_free",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure FreeAnimationScript(scriptToFree: AnimationScript)",
          "cpp": "void free_animation_script(animation_script script_to_free)"
        }
      },
      {
        "signature": "void free_animation_script(const string &name);",
        "name": "free_animation_script",
        "method_name": "free",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees loaded `animation_script` data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `animation_script` to be freed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "method": "free",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure FreeAnimationScript(const name: String)",
          "cpp": "void free_animation_script(const string &name)"
        }
      },
      {
        "signature": "bool has_animation_named(animation_script script,const string &name);",
        "name": "has_animation_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` that denotes whether the `animation_script` has been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "script": {
            "type": "animation_script",
            "description": "The `animation_script` to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the `animation_script` to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function HasAnimationNamed(script: AnimationScript; const name: String): Boolean",
          "cpp": "bool has_animation_named(animation_script script, const string &name)"
        }
      },
      {
        "signature": "bool has_animation_script(const string &name);",
        "name": "has_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has animation frames loaded for the\nsupplied name. This checks against all loaded animation frames,\nthose loaded without a name are assigned the filename as a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns the `bool` that denotes if the animation has the `animation_script`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the animation script to look for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function HasAnimationScript(const name: String): Boolean",
          "cpp": "bool has_animation_script(const string &name)"
        }
      },
      {
        "signature": "animation_script load_animation_script(const string &name,const string &filename);",
        "name": "load_animation_script",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Load animation details from an animation frames file.",
        "brief": null,
        "return": {
          "type": "animation_script",
          "description": "Returns the newly loaded `animation_script`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `animation_script`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The file to load the `animation_script` from.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation_script",
          "constructor": true,
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "function LoadAnimationScript(const name: String; const filename: String): AnimationScript",
          "cpp": "animation_script load_animation_script(const string &name, const string &filename)"
        }
      },
      {
        "signature": "void restart_animation(animation anim);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restarts an `animation`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to restart.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure RestartAnimation(anim: Animation)",
          "cpp": "void restart_animation(animation anim)"
        }
      },
      {
        "signature": "void restart_animation(animation anim,bool with_sound);",
        "name": "restart_animation",
        "method_name": "restart",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to restart.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "restart",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure RestartAnimation(anim: Animation; withSound: Boolean)",
          "cpp": "void restart_animation(animation anim, bool with_sound)"
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct,bool with_sound);",
        "name": "update_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The amount that the frame time will be incremented",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "Denotes whether the `animation` should play audio.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure UpdateAnimation(anim: Animation; pct: Single; withSound: Boolean)",
          "cpp": "void update_animation(animation anim, float pct, bool with_sound)"
        }
      },
      {
        "signature": "void update_animation(animation anim);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure UpdateAnimation(anim: Animation)",
          "cpp": "void update_animation(animation anim)"
        }
      },
      {
        "signature": "void update_animation(animation anim,float pct);",
        "name": "update_animation",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The `animation` to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The amount that the frame time will be incremented",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "animation",
          "method": "update",
          "self": "anim",
          "group": "animations",
          "static": "animation"
        },
        "signatures": {
          "pascal": "procedure UpdateAnimation(anim: Animation; pct: Single)",
          "cpp": "void update_animation(animation anim, float pct)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "audio": {
    "brief": "SplashKit Audio allows you to load and play music and sound effects.",
    "description": "SplashKit's audio library allows you to easily load and play music and\nsound effects within your programs. To get started with audio the first\nthing you need to do is load a sound effect or music file. You can do this\nby calling the `load_sound_effect(string name)` function to the\n`load_music(string name)` function.",
    "functions": [
      {
        "signature": "bool audio_ready();",
        "name": "audio_ready",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if SplashKit audio currently ready to be used.\n\nShould this return `false`, you may want to use `open_audio`\nto enable audio.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the audio has been initalised.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "is_ready",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function AudioReady(): Boolean",
          "cpp": "bool audio_ready()"
        }
      },
      {
        "signature": "void close_audio();",
        "name": "close_audio",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Turns off audio, stopping all current sounds effects and music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure CloseAudio()",
          "cpp": "void close_audio()"
        }
      },
      {
        "signature": "void open_audio();",
        "name": "open_audio",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the SplashKit audio system working.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure OpenAudio()",
          "cpp": "void open_audio()"
        }
      },
      {
        "signature": "void fade_music_in(const string &name,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` file to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeMusicIn(const name: String; ms: Integer)",
          "cpp": "void fade_music_in(const string &name, int ms)"
        }
      },
      {
        "signature": "void fade_music_in(const string &name,int times,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` file to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeMusicIn(const name: String; times: Integer; ms: Integer)",
          "cpp": "void fade_music_in(const string &name, int times, int ms)"
        }
      },
      {
        "signature": "void fade_music_in(music data,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeMusicIn(data: Music; ms: Integer)",
          "cpp": "void fade_music_in(music data, int ms)"
        }
      },
      {
        "signature": "void fade_music_in(music data,int times,int ms);",
        "name": "fade_music_in",
        "method_name": "fade_in",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` to full volume",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "fade_in",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeMusicIn(data: Music; times: Integer; ms: Integer)",
          "cpp": "void fade_music_in(music data, int times, int ms)"
        }
      },
      {
        "signature": "void fade_music_out(int ms);",
        "name": "fade_music_out",
        "method_name": "fade_out",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades music outover a specified number of milliseconds",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "How many milliseconds it takes to fade the `music` out",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "fade_out",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeMusicOut(ms: Integer)",
          "cpp": "void fade_music_out(int ms)"
        }
      },
      {
        "signature": "void free_all_music();",
        "name": "free_all_music",
        "method_name": "free_all_music",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the music files that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all_music",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure FreeAllMusic()",
          "cpp": "void free_all_music()"
        }
      },
      {
        "signature": "void free_music(music effect);",
        "name": "free_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "music",
            "description": "The music file whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "destructor": true,
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FreeMusic(effect: Music)",
          "cpp": "void free_music(music effect)"
        }
      },
      {
        "signature": "bool has_music(const string &name);",
        "name": "has_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a music file loaded for the supplied name.\nThis checks against all music files loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_music` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a music file with the given `name` has\nhas been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check if a music file is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function HasMusic(const name: String): Boolean",
          "cpp": "bool has_music(const string &name)"
        }
      },
      {
        "signature": "music load_music(const string &name,const string &filename);",
        "name": "load_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "A new music resource",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource for SplashKit",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "constructor": true,
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function LoadMusic(const name: String; const filename: String): Music",
          "cpp": "music load_music(const string &name, const string &filename)"
        }
      },
      {
        "signature": "string music_filename(music data);",
        "name": "music_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename the of the music data",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a string with the filename of the `music` file.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The music resource",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "getter": "filename",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function MusicFilename(data: Music): String",
          "cpp": "string music_filename(music data)"
        }
      },
      {
        "signature": "string music_name(music data);",
        "name": "music_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name that SplashKit uses to refer to this music data",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a string with the name of the `music` that SplashKit refers to.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The music resource",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "getter": "name",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function MusicName(data: Music): String",
          "cpp": "string music_name(music data)"
        }
      },
      {
        "signature": "music music_named(const string &name);",
        "name": "music_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `music` that has been loaded into SplashKit.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "Returns the `music` that has been loaded with the specified\n`name` using `load_music`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the music file to return.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function MusicNamed(const name: String): Music",
          "cpp": "music music_named(const string &name)"
        }
      },
      {
        "signature": "bool music_playing();",
        "name": "music_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether music is currently playing.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns true or false value representing whether music is currently playing.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "playing",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "function MusicPlaying(): Boolean",
          "cpp": "bool music_playing()"
        }
      },
      {
        "signature": "float music_volume();",
        "name": "music_volume",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the volume of the currently playing `music`.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns the percentage of the currently playing `music`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "getter": "volume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "function MusicVolume(): Single",
          "cpp": "float music_volume()"
        }
      },
      {
        "signature": "void pause_music();",
        "name": "pause_music",
        "method_name": "pause",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pauses currently playing music - see resume_music to continue playing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "pause",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure PauseMusic()",
          "cpp": "void pause_music()"
        }
      },
      {
        "signature": "void play_music(const string &name);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlayMusic(const name: String)",
          "cpp": "void play_music(const string &name)"
        }
      },
      {
        "signature": "void play_music(const string &name,int times);",
        "name": "play_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays the music file that matches the name a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlayMusic(const name: String; times: Integer)",
          "cpp": "void play_music(const string &name, int times)"
        }
      },
      {
        "signature": "void play_music(music data);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlayMusic(data: Music)",
          "cpp": "void play_music(music data)"
        }
      },
      {
        "signature": "void play_music(music data,int times);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlayMusic(data: Music; times: Integer)",
          "cpp": "void play_music(music data, int times)"
        }
      },
      {
        "signature": "void play_music(music data,int times,float volume);",
        "name": "play_music",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a music file for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "data": {
            "type": "music",
            "description": "The name of the `music` to play.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the music is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "float",
            "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "music",
          "method": "play",
          "self": "data",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlayMusic(data: Music; times: Integer; volume: Single)",
          "cpp": "void play_music(music data, int times, float volume)"
        }
      },
      {
        "signature": "void resume_music();",
        "name": "resume_music",
        "method_name": "resume",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes currently paused music - see pause_music to pause playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "resume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure ResumeMusic()",
          "cpp": "void resume_music()"
        }
      },
      {
        "signature": "void set_music_volume(float volume);",
        "name": "set_music_volume",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the volume of the currently playing `music`. Must be between 0 and 1, e.g. 0.1 is 10%.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "volume": {
            "type": "float",
            "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "setter": "volume",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure SetMusicVolume(volume: Single)",
          "cpp": "void set_music_volume(float volume)"
        }
      },
      {
        "signature": "void stop_music();",
        "name": "stop_music",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops currently playing music.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "stop",
          "static": "audio",
          "group": "audio"
        },
        "signatures": {
          "pascal": "procedure StopMusic()",
          "cpp": "void stop_music()"
        }
      },
      {
        "signature": "void fade_all_sound_effects_out(int ms);",
        "name": "fade_all_sound_effects_out",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades out all `sound_effect`s over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ms": {
            "type": "int",
            "description": "The number of milliseconds to fade out all sound effects.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeAllSoundEffectsOut(ms: Integer)",
          "cpp": "void fade_all_sound_effects_out(int ms)"
        }
      },
      {
        "signature": "void fade_sound_effect_out(sound_effect effect,int ms);",
        "name": "fade_sound_effect_out",
        "method_name": "fade_out",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fades out the `sound_effect` over the specified milliseconds.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to fade out.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ms": {
            "type": "int",
            "description": "The number of milliseconds to fade out the `sound_effect`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "fade_out",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FadeSoundEffectOut(effect: SoundEffect; ms: Integer)",
          "cpp": "void fade_sound_effect_out(sound_effect effect, int ms)"
        }
      },
      {
        "signature": "void free_all_sound_effects();",
        "name": "free_all_sound_effects",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sound effects that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FreeAllSoundEffects()",
          "cpp": "void free_all_sound_effects()"
        }
      },
      {
        "signature": "void free_sound_effect(sound_effect effect);",
        "name": "free_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with the sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "destructor": true,
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure FreeSoundEffect(effect: SoundEffect)",
          "cpp": "void free_sound_effect(sound_effect effect)"
        }
      },
      {
        "signature": "bool has_sound_effect(const string &name);",
        "name": "has_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sound effect loaded for the supplied name.\nThis checks against all sounds loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_sound_effect` to load in a specific sound effect and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a sound effect with the given `name` has\nhas been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check if a sound effect is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function HasSoundEffect(const name: String): Boolean",
          "cpp": "bool has_sound_effect(const string &name)"
        }
      },
      {
        "signature": "sound_effect load_sound_effect(const string &name,const string &filename);",
        "name": "load_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
        "brief": "Loads and returns a sound effect.",
        "return": {
          "type": "sound_effect",
          "description": "A new `sound_effect` with the initialised values provided.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name used to refer to the sound effect.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename used to locate the sound effect to use.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "constructor": true,
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function LoadSoundEffect(const name: String; const filename: String): SoundEffect",
          "cpp": "sound_effect load_sound_effect(const string &name, const string &filename)"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(const name: String)",
          "cpp": "void play_sound_effect(const string &name)"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "float",
            "description": "The volume to play the `sound_effect`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(const name: String; volume: Single)",
          "cpp": "void play_sound_effect(const string &name, float volume)"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(const name: String; times: Integer)",
          "cpp": "void play_sound_effect(const string &name, int times)"
        }
      },
      {
        "signature": "void play_sound_effect(const string &name,int times,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect for a specified number of times and playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the effect to play.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "float",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(const name: String; times: Integer; volume: Single)",
          "cpp": "void play_sound_effect(const string &name, int times, float volume)"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(effect: SoundEffect)",
          "cpp": "void play_sound_effect(sound_effect effect)"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "float",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(effect: SoundEffect; volume: Single)",
          "cpp": "void play_sound_effect(sound_effect effect, float volume)"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Plays a sound effect once at full volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(effect: SoundEffect; times: Integer)",
          "cpp": "void play_sound_effect(sound_effect effect, int times)"
        }
      },
      {
        "signature": "void play_sound_effect(sound_effect effect,int times,float volume);",
        "name": "play_sound_effect",
        "method_name": "play",
        "unique_global_name": "play_sound_effect_with_times_and_volume",
        "unique_method_name": "play_with_times_and_volume",
        "suffix_name": null,
        "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The effect indicates which sound effect to start playing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "times": {
            "type": "int",
            "description": "Controls the number of times the sound effect is played.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "volume": {
            "type": "float",
            "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "play",
          "self": "effect",
          "suffix": "with_times_and_volume",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure PlaySoundEffect(effect: SoundEffect; times: Integer; volume: Single)",
          "cpp": "void play_sound_effect(sound_effect effect, int times, float volume)"
        }
      },
      {
        "signature": "string sound_effect_filename(sound_effect effect);",
        "name": "sound_effect_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the filename of the `sound_effect` that has been loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "filename",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function SoundEffectFilename(effect: SoundEffect): String",
          "cpp": "string sound_effect_filename(sound_effect effect)"
        }
      },
      {
        "signature": "string sound_effect_name(sound_effect effect);",
        "name": "sound_effect_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the `sound_effect` that has been loaded by SplashKit",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the name of the `sound_effect` that has been loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "name",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function SoundEffectName(effect: SoundEffect): String",
          "cpp": "string sound_effect_name(sound_effect effect)"
        }
      },
      {
        "signature": "sound_effect sound_effect_named(const string &name);",
        "name": "sound_effect_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `sound_effect` that has been loaded into SplashKit. If the\nsound effect has not been loaded, this will attempt to use the name to\nlocate the file for you. If a file can be found, the sound effect is loaded\nand returned.",
        "brief": null,
        "return": {
          "type": "sound_effect",
          "description": "Returns the `sound_effect` that has been loaded with the specified\n`name` using `load_sound_effect`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sound effect to return.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function SoundEffectNamed(const name: String): SoundEffect",
          "cpp": "sound_effect sound_effect_named(const string &name)"
        }
      },
      {
        "signature": "bool sound_effect_playing(const string &name);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` that matches the name is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns whether the \"sound_effect\" that matches the name is currently playing or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `sound_effect`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "is_playing",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function SoundEffectPlaying(const name: String): Boolean",
          "cpp": "bool sound_effect_playing(const string &name)"
        }
      },
      {
        "signature": "bool sound_effect_playing(sound_effect effect);",
        "name": "sound_effect_playing",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks whether the `sound_effect` is currently playing",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns whether the \"sound_effect\" is currently playing or not",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to be tested.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "getter": "filename",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "function SoundEffectPlaying(effect: SoundEffect): Boolean",
          "cpp": "bool sound_effect_playing(sound_effect effect)"
        }
      },
      {
        "signature": "void stop_sound_effect(const string &name);",
        "name": "stop_sound_effect",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops the `sound_effect` that matches the name, if it is currently playing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `sound_effect` to stop.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "stop",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure StopSoundEffect(const name: String)",
          "cpp": "void stop_sound_effect(const string &name)"
        }
      },
      {
        "signature": "void stop_sound_effect(sound_effect effect);",
        "name": "stop_sound_effect",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops the `sound_effect` if it is currently playing",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "effect": {
            "type": "sound_effect",
            "description": "The `sound_effect` to stop.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sound_effect",
          "method": "stop",
          "self": "effect",
          "group": "audio",
          "static": "audio"
        },
        "signatures": {
          "pascal": "procedure StopSoundEffect(effect: SoundEffect)",
          "cpp": "void stop_sound_effect(sound_effect effect)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _music_data *music;",
        "name": "music",
        "description": "The Music type is used to refer to music that can be\nplayed by SplashKit. Music files are loaded with\n`load_music`, played using `play_music`, and must be\nreleased using `free_music`.\n\nUnlike `sound_effect`s, there can only be one music track\nplaying at a time. Playing an new track will stop the currently\nplaying music and switch to the new track.",
        "brief": null,
        "attributes": {
          "class": "music",
          "group": "audio",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _sound_data *sound_effect;",
        "name": "sound_effect",
        "description": "The `sound_effect` type is used to refer to sound effects that can be\nplayed by the SplashKit audio code. Sound effects are:\n\n\n- loaded with `load_sound_effect`,\n\n- played using `play_sound_effect`,\n\n- and must be released using `delete_sound_effect` (to release a specific\nsound effect) or `delete_all_sound_effects` (to release all loaded\nsound effects).\n\nSplashKit will mix the audio from multiple sound effects, making it\npossible to play multiple `sound_effect`s, or even to play the one\n`sound_effect` multiple times.\n\nYou can check if a `sound_effect` is currently playing using\n`sound_effect_playing`.\n\nTo stop a `sound_effect` playing use `stop_sound_effect`. This will stop all\ninstances of this one sound effect from playing.\n\nUse `music` for background music for your games.",
        "brief": null,
        "attributes": {
          "class": "sound_effect",
          "group": "audio",
          "static": "audio"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "camera": {
    "brief": "SplashKit camera functionality allows you to move a virtual camera\naround in your world.",
    "description": "Splashkit camera functionality allows you to move a virtual camera around in\nyour world. This camera projects to the users window, allowing you to\ndraw things to the screen in your world coordinates.",
    "functions": [
      {
        "signature": "point_2d camera_position();",
        "name": "camera_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the position of the camera in game coordinates. This will be the\ncoordinate of the upper left corner of the screen.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The position of the camera as a point_2d.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function CameraPosition(): Point2d",
          "cpp": "point_2d camera_position()"
        }
      },
      {
        "signature": "float camera_x();",
        "name": "camera_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the x location of the camera in game coordinates. This represents\nthe left most x value shown on the screen, with the right of the screen\nbeing at camera x + screen width.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the camera in game coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function CameraX(): Single",
          "cpp": "float camera_x()"
        }
      },
      {
        "signature": "float camera_y();",
        "name": "camera_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the y location of the camera in game coordinates. This represents\nthe stop most y value shown on the screen, with bottom of screen being\nat camera y + screen height.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y location of the camera in game coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function CameraY(): Single",
          "cpp": "float camera_y()"
        }
      },
      {
        "signature": "void center_camera_on(sprite s,const vector_2d &offset);",
        "name": "center_camera_on",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to track.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount to offset the camera, allowing you to position\nthe sprite away from the center of the screen.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure CenterCameraOn(s: Sprite; const offset: Vector2d)",
          "cpp": "void center_camera_on(sprite s, const vector_2d &offset)"
        }
      },
      {
        "signature": "void center_camera_on(sprite s,float offset_x,float offset_y);",
        "name": "center_camera_on",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to track.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset_x": {
            "type": "float",
            "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset_y": {
            "type": "float",
            "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure CenterCameraOn(s: Sprite; offsetX: Single; offsetY: Single)",
          "cpp": "void center_camera_on(sprite s, float offset_x, float offset_y)"
        }
      },
      {
        "signature": "void move_camera_by(const vector_2d &offset);",
        "name": "move_camera_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "The amount to move the camera.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure MoveCameraBy(const offset: Vector2d)",
          "cpp": "void move_camera_by(const vector_2d &offset)"
        }
      },
      {
        "signature": "void move_camera_by(float dx,float dy);",
        "name": "move_camera_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dx": {
            "type": "float",
            "description": "The amount to move the camera along the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "dy": {
            "type": "float",
            "description": "The amount to move the camera along the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure MoveCameraBy(dx: Single; dy: Single)",
          "cpp": "void move_camera_by(float dx, float dy)"
        }
      },
      {
        "signature": "void move_camera_to(const point_2d &pt);",
        "name": "move_camera_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The new camera location",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure MoveCameraTo(const pt: Point2d)",
          "cpp": "void move_camera_to(const point_2d &pt)"
        }
      },
      {
        "signature": "void move_camera_to(float x,float y);",
        "name": "move_camera_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The new camera x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The new camera y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure MoveCameraTo(x: Single; y: Single)",
          "cpp": "void move_camera_to(float x, float y)"
        }
      },
      {
        "signature": "bool point_on_screen(const point_2d &pt);",
        "name": "point_on_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if the point is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function PointOnScreen(const pt: Point2d): Boolean",
          "cpp": "bool point_on_screen(const point_2d &pt)"
        }
      },
      {
        "signature": "bool rect_on_screen(const rectangle &rect);",
        "name": "rect_on_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if the rectangle is on the screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if any part of the rectangle is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function RectOnScreen(const rect: Rectangle): Boolean",
          "cpp": "bool rect_on_screen(const rectangle &rect)"
        }
      },
      {
        "signature": "point_2d screen_center();",
        "name": "screen_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center of the screen in world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center of the screen in world coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ScreenCenter(): Point2d",
          "cpp": "point_2d screen_center()"
        }
      },
      {
        "signature": "rectangle screen_rectangle();",
        "name": "screen_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the dimensions of the window.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle representing the dimensions of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ScreenRectangle(): Rectangle",
          "cpp": "rectangle screen_rectangle()"
        }
      },
      {
        "signature": "void set_camera_position(point_2d pos);",
        "name": "set_camera_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pos": {
            "type": "point_2d",
            "description": "The new location of the camera.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure SetCameraPosition(pos: Point2d)",
          "cpp": "void set_camera_position(point_2d pos)"
        }
      },
      {
        "signature": "void set_camera_y(float y);",
        "name": "set_camera_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "y": {
            "type": "float",
            "description": "The new y coordinate for the camera",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "procedure SetCameraY(y: Single)",
          "cpp": "void set_camera_y(float y)"
        }
      },
      {
        "signature": "point_2d to_screen(const point_2d &pt);",
        "name": "to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the passed in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point that represents pt in screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to convert - this should be in world coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToScreen(const pt: Point2d): Point2d",
          "cpp": "point_2d to_screen(const point_2d &pt)"
        }
      },
      {
        "signature": "rectangle to_screen(const rectangle &rect);",
        "name": "to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Convert the rectangle in world coordinates to screen coordinates.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that represents rect in screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to convert - this should be in world coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToScreen(const rect: Rectangle): Rectangle",
          "cpp": "rectangle to_screen(const rectangle &rect)"
        }
      },
      {
        "signature": "float to_screen_x(float world_x);",
        "name": "to_screen_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the world coordinate on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "world_x": {
            "type": "float",
            "description": "The value of the x coordinate to translate to screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToScreenX(worldX: Single): Single",
          "cpp": "float to_screen_x(float world_x)"
        }
      },
      {
        "signature": "float to_screen_y(float world_y);",
        "name": "to_screen_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a world y value to the current screen y value set by the camera.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y location of the world coordinate on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "world_y": {
            "type": "float",
            "description": "The value of the y coordinate to translate to screen.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToScreenY(worldY: Single): Single",
          "cpp": "float to_screen_y(float world_y)"
        }
      },
      {
        "signature": "point_2d to_world(const point_2d &pt);",
        "name": "to_world",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts the passed in point from screen coordinates to world coordinates.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The same point in world coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point in screen coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToWorld(const pt: Point2d): Point2d",
          "cpp": "point_2d to_world(const point_2d &pt)"
        }
      },
      {
        "signature": "float to_world_x(float screen_x);",
        "name": "to_world_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a screen x value (based on the camera) to a world x value",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the screen coordinate in the world.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "screen_x": {
            "type": "float",
            "description": "The value of the x coordinate on screen to translate to\nthe world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToWorldX(screenX: Single): Single",
          "cpp": "float to_world_x(float screen_x)"
        }
      },
      {
        "signature": "float to_world_y(float screen_y);",
        "name": "to_world_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Translate a screen y value (based on the camera) to a world y value",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y location of the screen coordinate in the world.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "screen_y": {
            "type": "float",
            "description": "The value of the y coordinate on screen to translate to\nthe world.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function ToWorldY(screenY: Single): Single",
          "cpp": "float to_world_y(float screen_y)"
        }
      },
      {
        "signature": "vector_2d vector_world_to_screen();",
        "name": "vector_world_to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can transform points from world to screen coordinates.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector representing the distance and direction points need\nto move to map from world to screen coordinates.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "camera",
          "static": "camera"
        },
        "signatures": {
          "pascal": "function VectorWorldToScreen(): Vector2d",
          "cpp": "vector_2d vector_world_to_screen()"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "color": {
    "brief": "",
    "description": "",
    "functions": [
      {
        "signature": "int alpha_of(color c);",
        "name": "alpha_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the alpha of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The alpha component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function AlphaOf(c: Color): Integer",
          "cpp": "int alpha_of(color c)"
        }
      },
      {
        "signature": "int blue_of(color c);",
        "name": "blue_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the blue of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The blue component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function BlueOf(c: Color): Integer",
          "cpp": "int blue_of(color c)"
        }
      },
      {
        "signature": "float brightness_of(color c);",
        "name": "brightness_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the brightness of the supplied color.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The brightness component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function BrightnessOf(c: Color): Single",
          "cpp": "float brightness_of(color c)"
        }
      },
      {
        "signature": "color color_alice_blue();",
        "name": "color_alice_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `alice_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `alice_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorAliceBlue(): Color",
          "cpp": "color color_alice_blue()"
        }
      },
      {
        "signature": "color color_antique_white();",
        "name": "color_antique_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `antique_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `antique_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorAntiqueWhite(): Color",
          "cpp": "color color_antique_white()"
        }
      },
      {
        "signature": "color color_aqua();",
        "name": "color_aqua",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aqua`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `aqua`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorAqua(): Color",
          "cpp": "color color_aqua()"
        }
      },
      {
        "signature": "color color_aquamarine();",
        "name": "color_aquamarine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `aquamarine`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorAquamarine(): Color",
          "cpp": "color color_aquamarine()"
        }
      },
      {
        "signature": "color color_azure();",
        "name": "color_azure",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `azure`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `azure`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorAzure(): Color",
          "cpp": "color color_azure()"
        }
      },
      {
        "signature": "color color_beige();",
        "name": "color_beige",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `beige`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `beige`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBeige(): Color",
          "cpp": "color color_beige()"
        }
      },
      {
        "signature": "color color_bisque();",
        "name": "color_bisque",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bisque`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `bisque`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBisque(): Color",
          "cpp": "color color_bisque()"
        }
      },
      {
        "signature": "color color_black();",
        "name": "color_black",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `black`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `black`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBlack(): Color",
          "cpp": "color color_black()"
        }
      },
      {
        "signature": "color color_blanched_almond();",
        "name": "color_blanched_almond",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blanched_almond`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blanched_almond`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBlanchedAlmond(): Color",
          "cpp": "color color_blanched_almond()"
        }
      },
      {
        "signature": "color color_blue();",
        "name": "color_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBlue(): Color",
          "cpp": "color color_blue()"
        }
      },
      {
        "signature": "color color_blue_violet();",
        "name": "color_blue_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `blue_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `blue_violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBlueViolet(): Color",
          "cpp": "color color_blue_violet()"
        }
      },
      {
        "signature": "color color_bright_green();",
        "name": "color_bright_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `bright_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `bright_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBrightGreen(): Color",
          "cpp": "color color_bright_green()"
        }
      },
      {
        "signature": "color color_brown();",
        "name": "color_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBrown(): Color",
          "cpp": "color color_brown()"
        }
      },
      {
        "signature": "color color_burly_wood();",
        "name": "color_burly_wood",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `burly_wood`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `burly_wood`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorBurlyWood(): Color",
          "cpp": "color color_burly_wood()"
        }
      },
      {
        "signature": "color color_cadet_blue();",
        "name": "color_cadet_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cadet_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cadet_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCadetBlue(): Color",
          "cpp": "color color_cadet_blue()"
        }
      },
      {
        "signature": "color color_chartreuse();",
        "name": "color_chartreuse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chartreuse`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `chartreuse`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorChartreuse(): Color",
          "cpp": "color color_chartreuse()"
        }
      },
      {
        "signature": "color color_chocolate();",
        "name": "color_chocolate",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `chocolate`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `chocolate`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorChocolate(): Color",
          "cpp": "color color_chocolate()"
        }
      },
      {
        "signature": "color color_coral();",
        "name": "color_coral",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `coral`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCoral(): Color",
          "cpp": "color color_coral()"
        }
      },
      {
        "signature": "color color_cornflower_blue();",
        "name": "color_cornflower_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornflower_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cornflower_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCornflowerBlue(): Color",
          "cpp": "color color_cornflower_blue()"
        }
      },
      {
        "signature": "color color_cornsilk();",
        "name": "color_cornsilk",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cornsilk`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cornsilk`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCornsilk(): Color",
          "cpp": "color color_cornsilk()"
        }
      },
      {
        "signature": "color color_crimson();",
        "name": "color_crimson",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `crimson`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `crimson`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCrimson(): Color",
          "cpp": "color color_crimson()"
        }
      },
      {
        "signature": "color color_cyan();",
        "name": "color_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorCyan(): Color",
          "cpp": "color color_cyan()"
        }
      },
      {
        "signature": "color color_dark_blue();",
        "name": "color_dark_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkBlue(): Color",
          "cpp": "color color_dark_blue()"
        }
      },
      {
        "signature": "color color_dark_cyan();",
        "name": "color_dark_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkCyan(): Color",
          "cpp": "color color_dark_cyan()"
        }
      },
      {
        "signature": "color color_dark_goldenrod();",
        "name": "color_dark_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkGoldenrod(): Color",
          "cpp": "color color_dark_goldenrod()"
        }
      },
      {
        "signature": "color color_dark_gray();",
        "name": "color_dark_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkGray(): Color",
          "cpp": "color color_dark_gray()"
        }
      },
      {
        "signature": "color color_dark_green();",
        "name": "color_dark_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkGreen(): Color",
          "cpp": "color color_dark_green()"
        }
      },
      {
        "signature": "color color_dark_khaki();",
        "name": "color_dark_khaki",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_khaki`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkKhaki(): Color",
          "cpp": "color color_dark_khaki()"
        }
      },
      {
        "signature": "color color_dark_magenta();",
        "name": "color_dark_magenta",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_magenta`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkMagenta(): Color",
          "cpp": "color color_dark_magenta()"
        }
      },
      {
        "signature": "color color_dark_olive_green();",
        "name": "color_dark_olive_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_olive_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_olive_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkOliveGreen(): Color",
          "cpp": "color color_dark_olive_green()"
        }
      },
      {
        "signature": "color color_dark_orange();",
        "name": "color_dark_orange",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_orange`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkOrange(): Color",
          "cpp": "color color_dark_orange()"
        }
      },
      {
        "signature": "color color_dark_orchid();",
        "name": "color_dark_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkOrchid(): Color",
          "cpp": "color color_dark_orchid()"
        }
      },
      {
        "signature": "color color_dark_red();",
        "name": "color_dark_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkRed(): Color",
          "cpp": "color color_dark_red()"
        }
      },
      {
        "signature": "color color_dark_salmon();",
        "name": "color_dark_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkSalmon(): Color",
          "cpp": "color color_dark_salmon()"
        }
      },
      {
        "signature": "color color_dark_sea_green();",
        "name": "color_dark_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkSeaGreen(): Color",
          "cpp": "color color_dark_sea_green()"
        }
      },
      {
        "signature": "color color_dark_slate_blue();",
        "name": "color_dark_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkSlateBlue(): Color",
          "cpp": "color color_dark_slate_blue()"
        }
      },
      {
        "signature": "color color_dark_slate_gray();",
        "name": "color_dark_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkSlateGray(): Color",
          "cpp": "color color_dark_slate_gray()"
        }
      },
      {
        "signature": "color color_dark_turquoise();",
        "name": "color_dark_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkTurquoise(): Color",
          "cpp": "color color_dark_turquoise()"
        }
      },
      {
        "signature": "color color_dark_violet();",
        "name": "color_dark_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dark_violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dark_violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDarkViolet(): Color",
          "cpp": "color color_dark_violet()"
        }
      },
      {
        "signature": "color color_deep_pink();",
        "name": "color_deep_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `deep_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDeepPink(): Color",
          "cpp": "color color_deep_pink()"
        }
      },
      {
        "signature": "color color_deep_sky_blue();",
        "name": "color_deep_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `deep_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `deep_sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDeepSkyBlue(): Color",
          "cpp": "color color_deep_sky_blue()"
        }
      },
      {
        "signature": "color color_dim_gray();",
        "name": "color_dim_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dim_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dim_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDimGray(): Color",
          "cpp": "color color_dim_gray()"
        }
      },
      {
        "signature": "color color_dodger_blue();",
        "name": "color_dodger_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `dodger_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `dodger_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorDodgerBlue(): Color",
          "cpp": "color color_dodger_blue()"
        }
      },
      {
        "signature": "color color_firebrick();",
        "name": "color_firebrick",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `firebrick`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `firebrick`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorFirebrick(): Color",
          "cpp": "color color_firebrick()"
        }
      },
      {
        "signature": "color color_floral_white();",
        "name": "color_floral_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `floral_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `floral_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorFloralWhite(): Color",
          "cpp": "color color_floral_white()"
        }
      },
      {
        "signature": "color color_forest_green();",
        "name": "color_forest_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `forest_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `forest_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorForestGreen(): Color",
          "cpp": "color color_forest_green()"
        }
      },
      {
        "signature": "color color_fuchsia();",
        "name": "color_fuchsia",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `fuchsia`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `fuchsia`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorFuchsia(): Color",
          "cpp": "color color_fuchsia()"
        }
      },
      {
        "signature": "color color_gainsboro();",
        "name": "color_gainsboro",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gainsboro`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gainsboro`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGainsboro(): Color",
          "cpp": "color color_gainsboro()"
        }
      },
      {
        "signature": "color color_ghost_white();",
        "name": "color_ghost_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ghost_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `ghost_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGhostWhite(): Color",
          "cpp": "color color_ghost_white()"
        }
      },
      {
        "signature": "color color_gold();",
        "name": "color_gold",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gold`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gold`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGold(): Color",
          "cpp": "color color_gold()"
        }
      },
      {
        "signature": "color color_goldenrod();",
        "name": "color_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGoldenrod(): Color",
          "cpp": "color color_goldenrod()"
        }
      },
      {
        "signature": "color color_gray();",
        "name": "color_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGray(): Color",
          "cpp": "color color_gray()"
        }
      },
      {
        "signature": "color color_green();",
        "name": "color_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGreen(): Color",
          "cpp": "color color_green()"
        }
      },
      {
        "signature": "color color_green_yellow();",
        "name": "color_green_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `green_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `green_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorGreenYellow(): Color",
          "cpp": "color color_green_yellow()"
        }
      },
      {
        "signature": "color color_honeydew();",
        "name": "color_honeydew",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `honeydew`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `honeydew`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorHoneydew(): Color",
          "cpp": "color color_honeydew()"
        }
      },
      {
        "signature": "color color_hot_pink();",
        "name": "color_hot_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `hot_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `hot_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorHotPink(): Color",
          "cpp": "color color_hot_pink()"
        }
      },
      {
        "signature": "color color_indian_red();",
        "name": "color_indian_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indian_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `indian_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorIndianRed(): Color",
          "cpp": "color color_indian_red()"
        }
      },
      {
        "signature": "color color_indigo();",
        "name": "color_indigo",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `indigo`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `indigo`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorIndigo(): Color",
          "cpp": "color color_indigo()"
        }
      },
      {
        "signature": "color color_ivory();",
        "name": "color_ivory",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `ivory`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `ivory`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorIvory(): Color",
          "cpp": "color color_ivory()"
        }
      },
      {
        "signature": "color color_khaki();",
        "name": "color_khaki",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `khaki`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `khaki`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorKhaki(): Color",
          "cpp": "color color_khaki()"
        }
      },
      {
        "signature": "color color_lavender();",
        "name": "color_lavender",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lavender`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLavender(): Color",
          "cpp": "color color_lavender()"
        }
      },
      {
        "signature": "color color_lavender_blush();",
        "name": "color_lavender_blush",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lavender_blush`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lavender_blush`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLavenderBlush(): Color",
          "cpp": "color color_lavender_blush()"
        }
      },
      {
        "signature": "color color_lawn_green();",
        "name": "color_lawn_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lawn_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lawn_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLawnGreen(): Color",
          "cpp": "color color_lawn_green()"
        }
      },
      {
        "signature": "color color_lemon_chiffon();",
        "name": "color_lemon_chiffon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lemon_chiffon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lemon_chiffon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLemonChiffon(): Color",
          "cpp": "color color_lemon_chiffon()"
        }
      },
      {
        "signature": "color color_light_blue();",
        "name": "color_light_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightBlue(): Color",
          "cpp": "color color_light_blue()"
        }
      },
      {
        "signature": "color color_light_coral();",
        "name": "color_light_coral",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_coral`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_coral`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightCoral(): Color",
          "cpp": "color color_light_coral()"
        }
      },
      {
        "signature": "color color_light_cyan();",
        "name": "color_light_cyan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_cyan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_cyan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightCyan(): Color",
          "cpp": "color color_light_cyan()"
        }
      },
      {
        "signature": "color color_light_goldenrod_yellow();",
        "name": "color_light_goldenrod_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_goldenrod_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_goldenrod_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightGoldenrodYellow(): Color",
          "cpp": "color color_light_goldenrod_yellow()"
        }
      },
      {
        "signature": "color color_light_gray();",
        "name": "color_light_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightGray(): Color",
          "cpp": "color color_light_gray()"
        }
      },
      {
        "signature": "color color_light_green();",
        "name": "color_light_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightGreen(): Color",
          "cpp": "color color_light_green()"
        }
      },
      {
        "signature": "color color_light_pink();",
        "name": "color_light_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightPink(): Color",
          "cpp": "color color_light_pink()"
        }
      },
      {
        "signature": "color color_light_salmon();",
        "name": "color_light_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightSalmon(): Color",
          "cpp": "color color_light_salmon()"
        }
      },
      {
        "signature": "color color_light_sea_green();",
        "name": "color_light_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightSeaGreen(): Color",
          "cpp": "color color_light_sea_green()"
        }
      },
      {
        "signature": "color color_light_sky_blue();",
        "name": "color_light_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightSkyBlue(): Color",
          "cpp": "color color_light_sky_blue()"
        }
      },
      {
        "signature": "color color_light_slate_gray();",
        "name": "color_light_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightSlateGray(): Color",
          "cpp": "color color_light_slate_gray()"
        }
      },
      {
        "signature": "color color_light_steel_blue();",
        "name": "color_light_steel_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_steel_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightSteelBlue(): Color",
          "cpp": "color color_light_steel_blue()"
        }
      },
      {
        "signature": "color color_light_yellow();",
        "name": "color_light_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `light_yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `light_yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLightYellow(): Color",
          "cpp": "color color_light_yellow()"
        }
      },
      {
        "signature": "color color_lime();",
        "name": "color_lime",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lime`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLime(): Color",
          "cpp": "color color_lime()"
        }
      },
      {
        "signature": "color color_lime_green();",
        "name": "color_lime_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `lime_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `lime_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLimeGreen(): Color",
          "cpp": "color color_lime_green()"
        }
      },
      {
        "signature": "color color_linen();",
        "name": "color_linen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `linen`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `linen`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorLinen(): Color",
          "cpp": "color color_linen()"
        }
      },
      {
        "signature": "color color_magenta();",
        "name": "color_magenta",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `magenta`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `magenta`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMagenta(): Color",
          "cpp": "color color_magenta()"
        }
      },
      {
        "signature": "color color_maroon();",
        "name": "color_maroon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `maroon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `maroon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMaroon(): Color",
          "cpp": "color color_maroon()"
        }
      },
      {
        "signature": "color color_medium_aquamarine();",
        "name": "color_medium_aquamarine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_aquamarine`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_aquamarine`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumAquamarine(): Color",
          "cpp": "color color_medium_aquamarine()"
        }
      },
      {
        "signature": "color color_medium_blue();",
        "name": "color_medium_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumBlue(): Color",
          "cpp": "color color_medium_blue()"
        }
      },
      {
        "signature": "color color_medium_orchid();",
        "name": "color_medium_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumOrchid(): Color",
          "cpp": "color color_medium_orchid()"
        }
      },
      {
        "signature": "color color_medium_purple();",
        "name": "color_medium_purple",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_purple`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumPurple(): Color",
          "cpp": "color color_medium_purple()"
        }
      },
      {
        "signature": "color color_medium_sea_green();",
        "name": "color_medium_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumSeaGreen(): Color",
          "cpp": "color color_medium_sea_green()"
        }
      },
      {
        "signature": "color color_medium_slate_blue();",
        "name": "color_medium_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumSlateBlue(): Color",
          "cpp": "color color_medium_slate_blue()"
        }
      },
      {
        "signature": "color color_medium_spring_green();",
        "name": "color_medium_spring_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_spring_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumSpringGreen(): Color",
          "cpp": "color color_medium_spring_green()"
        }
      },
      {
        "signature": "color color_medium_turquoise();",
        "name": "color_medium_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumTurquoise(): Color",
          "cpp": "color color_medium_turquoise()"
        }
      },
      {
        "signature": "color color_medium_violet_red();",
        "name": "color_medium_violet_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `medium_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `medium_violet_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMediumVioletRed(): Color",
          "cpp": "color color_medium_violet_red()"
        }
      },
      {
        "signature": "color color_midnight_blue();",
        "name": "color_midnight_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `midnight_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `midnight_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMidnightBlue(): Color",
          "cpp": "color color_midnight_blue()"
        }
      },
      {
        "signature": "color color_mint_cream();",
        "name": "color_mint_cream",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `mint_cream`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `mint_cream`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMintCream(): Color",
          "cpp": "color color_mint_cream()"
        }
      },
      {
        "signature": "color color_misty_rose();",
        "name": "color_misty_rose",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `misty_rose`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `misty_rose`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMistyRose(): Color",
          "cpp": "color color_misty_rose()"
        }
      },
      {
        "signature": "color color_moccasin();",
        "name": "color_moccasin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `moccasin`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `moccasin`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorMoccasin(): Color",
          "cpp": "color color_moccasin()"
        }
      },
      {
        "signature": "color color_navajo_white();",
        "name": "color_navajo_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navajo_white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `navajo_white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorNavajoWhite(): Color",
          "cpp": "color color_navajo_white()"
        }
      },
      {
        "signature": "color color_navy();",
        "name": "color_navy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `navy`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `navy`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorNavy(): Color",
          "cpp": "color color_navy()"
        }
      },
      {
        "signature": "color color_old_lace();",
        "name": "color_old_lace",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `old_lace`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `old_lace`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOldLace(): Color",
          "cpp": "color color_old_lace()"
        }
      },
      {
        "signature": "color color_olive();",
        "name": "color_olive",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `olive`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOlive(): Color",
          "cpp": "color color_olive()"
        }
      },
      {
        "signature": "color color_olive_drab();",
        "name": "color_olive_drab",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `olive_drab`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `olive_drab`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOliveDrab(): Color",
          "cpp": "color color_olive_drab()"
        }
      },
      {
        "signature": "color color_orange();",
        "name": "color_orange",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orange`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOrange(): Color",
          "cpp": "color color_orange()"
        }
      },
      {
        "signature": "color color_orange_red();",
        "name": "color_orange_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orange_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orange_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOrangeRed(): Color",
          "cpp": "color color_orange_red()"
        }
      },
      {
        "signature": "color color_orchid();",
        "name": "color_orchid",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `orchid`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `orchid`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorOrchid(): Color",
          "cpp": "color color_orchid()"
        }
      },
      {
        "signature": "color color_pale_goldenrod();",
        "name": "color_pale_goldenrod",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_goldenrod`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_goldenrod`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPaleGoldenrod(): Color",
          "cpp": "color color_pale_goldenrod()"
        }
      },
      {
        "signature": "color color_pale_green();",
        "name": "color_pale_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPaleGreen(): Color",
          "cpp": "color color_pale_green()"
        }
      },
      {
        "signature": "color color_pale_turquoise();",
        "name": "color_pale_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPaleTurquoise(): Color",
          "cpp": "color color_pale_turquoise()"
        }
      },
      {
        "signature": "color color_pale_violet_red();",
        "name": "color_pale_violet_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pale_violet_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pale_violet_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPaleVioletRed(): Color",
          "cpp": "color color_pale_violet_red()"
        }
      },
      {
        "signature": "color color_papaya_whip();",
        "name": "color_papaya_whip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `papaya_whip`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `papaya_whip`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPapayaWhip(): Color",
          "cpp": "color color_papaya_whip()"
        }
      },
      {
        "signature": "color color_peach_puff();",
        "name": "color_peach_puff",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peach_puff`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `peach_puff`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPeachPuff(): Color",
          "cpp": "color color_peach_puff()"
        }
      },
      {
        "signature": "color color_peru();",
        "name": "color_peru",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `peru`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `peru`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPeru(): Color",
          "cpp": "color color_peru()"
        }
      },
      {
        "signature": "color color_pink();",
        "name": "color_pink",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `pink`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `pink`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPink(): Color",
          "cpp": "color color_pink()"
        }
      },
      {
        "signature": "color color_plum();",
        "name": "color_plum",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `plum`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `plum`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPlum(): Color",
          "cpp": "color color_plum()"
        }
      },
      {
        "signature": "color color_powder_blue();",
        "name": "color_powder_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `powder_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `powder_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPowderBlue(): Color",
          "cpp": "color color_powder_blue()"
        }
      },
      {
        "signature": "color color_purple();",
        "name": "color_purple",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `purple`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `purple`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorPurple(): Color",
          "cpp": "color color_purple()"
        }
      },
      {
        "signature": "color color_red();",
        "name": "color_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorRed(): Color",
          "cpp": "color color_red()"
        }
      },
      {
        "signature": "color color_rosy_brown();",
        "name": "color_rosy_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `rosy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `rosy_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorRosyBrown(): Color",
          "cpp": "color color_rosy_brown()"
        }
      },
      {
        "signature": "color color_royal_blue();",
        "name": "color_royal_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `royal_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `royal_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorRoyalBlue(): Color",
          "cpp": "color color_royal_blue()"
        }
      },
      {
        "signature": "color color_saddle_brown();",
        "name": "color_saddle_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `saddle_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `saddle_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSaddleBrown(): Color",
          "cpp": "color color_saddle_brown()"
        }
      },
      {
        "signature": "color color_salmon();",
        "name": "color_salmon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `salmon`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `salmon`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSalmon(): Color",
          "cpp": "color color_salmon()"
        }
      },
      {
        "signature": "color color_sandy_brown();",
        "name": "color_sandy_brown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sandy_brown`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sandy_brown`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSandyBrown(): Color",
          "cpp": "color color_sandy_brown()"
        }
      },
      {
        "signature": "color color_sea_green();",
        "name": "color_sea_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sea_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSeaGreen(): Color",
          "cpp": "color color_sea_green()"
        }
      },
      {
        "signature": "color color_sea_shell();",
        "name": "color_sea_shell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sea_shell`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sea_shell`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSeaShell(): Color",
          "cpp": "color color_sea_shell()"
        }
      },
      {
        "signature": "color color_sienna();",
        "name": "color_sienna",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sienna`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sienna`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSienna(): Color",
          "cpp": "color color_sienna()"
        }
      },
      {
        "signature": "color color_silver();",
        "name": "color_silver",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `silver`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `silver`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSilver(): Color",
          "cpp": "color color_silver()"
        }
      },
      {
        "signature": "color color_sky_blue();",
        "name": "color_sky_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `sky_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `sky_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSkyBlue(): Color",
          "cpp": "color color_sky_blue()"
        }
      },
      {
        "signature": "color color_slate_blue();",
        "name": "color_slate_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `slate_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSlateBlue(): Color",
          "cpp": "color color_slate_blue()"
        }
      },
      {
        "signature": "color color_slate_gray();",
        "name": "color_slate_gray",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `slate_gray`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `slate_gray`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSlateGray(): Color",
          "cpp": "color color_slate_gray()"
        }
      },
      {
        "signature": "color color_snow();",
        "name": "color_snow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `snow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `snow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSnow(): Color",
          "cpp": "color color_snow()"
        }
      },
      {
        "signature": "color color_spring_green();",
        "name": "color_spring_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `spring_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `spring_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSpringGreen(): Color",
          "cpp": "color color_spring_green()"
        }
      },
      {
        "signature": "color color_steel_blue();",
        "name": "color_steel_blue",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `steel_blue`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `steel_blue`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSteelBlue(): Color",
          "cpp": "color color_steel_blue()"
        }
      },
      {
        "signature": "color color_swinburne_red();",
        "name": "color_swinburne_red",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `swinburne_red`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `swinburne_red`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorSwinburneRed(): Color",
          "cpp": "color color_swinburne_red()"
        }
      },
      {
        "signature": "color color_tan();",
        "name": "color_tan",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tan`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `tan`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorTan(): Color",
          "cpp": "color color_tan()"
        }
      },
      {
        "signature": "color color_teal();",
        "name": "color_teal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `teal`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `teal`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorTeal(): Color",
          "cpp": "color color_teal()"
        }
      },
      {
        "signature": "color color_thistle();",
        "name": "color_thistle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `thistle`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `thistle`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorThistle(): Color",
          "cpp": "color color_thistle()"
        }
      },
      {
        "signature": "string color_to_string(color c);",
        "name": "color_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a string representation of the color.\nFormat will be a hex string starting with a #,\nfollowed by the red, green, blue, and alpha\nvalues of the color.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A hex string representing the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorToString(c: Color): String",
          "cpp": "string color_to_string(color c)"
        }
      },
      {
        "signature": "color color_tomato();",
        "name": "color_tomato",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `tomato`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `tomato`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorTomato(): Color",
          "cpp": "color color_tomato()"
        }
      },
      {
        "signature": "color color_transparent();",
        "name": "color_transparent",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `transparent`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A `transparent` color (i.e., a color with an `alpha` of 0).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorTransparent(): Color",
          "cpp": "color color_transparent()"
        }
      },
      {
        "signature": "color color_turquoise();",
        "name": "color_turquoise",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `turquoise`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `turquoise`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorTurquoise(): Color",
          "cpp": "color color_turquoise()"
        }
      },
      {
        "signature": "color color_violet();",
        "name": "color_violet",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `violet`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `violet`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorViolet(): Color",
          "cpp": "color color_violet()"
        }
      },
      {
        "signature": "color color_wheat();",
        "name": "color_wheat",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `wheat`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `wheat`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorWheat(): Color",
          "cpp": "color color_wheat()"
        }
      },
      {
        "signature": "color color_white();",
        "name": "color_white",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `white`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorWhite(): Color",
          "cpp": "color color_white()"
        }
      },
      {
        "signature": "color color_white_smoke();",
        "name": "color_white_smoke",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `white_smoke`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `white_smoke`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorWhiteSmoke(): Color",
          "cpp": "color color_white_smoke()"
        }
      },
      {
        "signature": "color color_yellow();",
        "name": "color_yellow",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `yellow`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorYellow(): Color",
          "cpp": "color color_yellow()"
        }
      },
      {
        "signature": "color color_yellow_green();",
        "name": "color_yellow_green",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a new `color` associated to the color `yellow_green`.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A new `color` set to `yellow_green`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function ColorYellowGreen(): Color",
          "cpp": "color color_yellow_green()"
        }
      },
      {
        "signature": "int green_of(color c);",
        "name": "green_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the green of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The green component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function GreenOf(c: Color): Integer",
          "cpp": "int green_of(color c)"
        }
      },
      {
        "signature": "color hsb_color(float hue,float saturation,float brightness);",
        "name": "hsb_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returs a color from a combination of hue, saturation, and brightness.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its hue, saturation and brightness.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "hue": {
            "type": "float",
            "description": "The hue of the color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "saturation": {
            "type": "float",
            "description": "The saturation of that hue",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "brightness": {
            "type": "float",
            "description": "The brightness of the color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function HsbColor(hue: Single; saturation: Single; brightness: Single): Color",
          "cpp": "color hsb_color(float hue, float saturation, float brightness)"
        }
      },
      {
        "signature": "float hue_of(color c);",
        "name": "hue_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the hue of the supplied color.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The hue component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function HueOf(c: Color): Single",
          "cpp": "float hue_of(color c)"
        }
      },
      {
        "signature": "color random_color();",
        "name": "random_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates and returns a random color where the color and its opacity are\nrandom.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A random color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function RandomColor(): Color",
          "cpp": "color random_color()"
        }
      },
      {
        "signature": "color random_rgb_color(int alpha);",
        "name": "random_rgb_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates and returns a random color where the color is random, but the\nopacity is set to the passed in value.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "A random color with the set alpha",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "alpha": {
            "type": "int",
            "description": "The set alpha (opacity) value (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function RandomRgbColor(alpha: Integer): Color",
          "cpp": "color random_rgb_color(int alpha)"
        }
      },
      {
        "signature": "int red_of(color c);",
        "name": "red_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the red of the supplied color.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The red component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function RedOf(c: Color): Integer",
          "cpp": "int red_of(color c)"
        }
      },
      {
        "signature": "color rgb_color(float red,float green,float blue);",
        "name": "rgb_color",
        "method_name": null,
        "unique_global_name": "rgb_color_from_float",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 1.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "float",
            "description": "The red component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "float",
            "description": "The green component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "float",
            "description": "The blue component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_float",
          "group": "color"
        },
        "signatures": {
          "pascal": "function RgbColor(red: Single; green: Single; blue: Single): Color",
          "cpp": "color rgb_color(float red, float green, float blue)"
        }
      },
      {
        "signature": "color rgb_color(int red,int green,int blue);",
        "name": "rgb_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a color given its RGB components. Each of the components has\na value between 0 and 255.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "int",
            "description": "The red component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "int",
            "description": "The green component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "int",
            "description": "The blue component",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function RgbColor(red: Integer; green: Integer; blue: Integer): Color",
          "cpp": "color rgb_color(int red, int green, int blue)"
        }
      },
      {
        "signature": "color rgba_color(float red,float green,float blue,float alpha);",
        "name": "rgba_color",
        "method_name": null,
        "unique_global_name": "rgba_color_from_float",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a color given its color components. Each of the components has\na value between 0 and 1.0.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "float",
            "description": "The red component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "float",
            "description": "The green component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "float",
            "description": "The blue component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "alpha": {
            "type": "float",
            "description": "The alpha (opacity) component (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_float",
          "group": "color"
        },
        "signatures": {
          "pascal": "function RgbaColor(red: Single; green: Single; blue: Single; alpha: Single): Color",
          "cpp": "color rgba_color(float red, float green, float blue, float alpha)"
        }
      },
      {
        "signature": "color rgba_color(int red,int green,int blue,int alpha);",
        "name": "rgba_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a color given its color components. Each of the components has\na value between 0 and 255.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color from its different component",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "red": {
            "type": "int",
            "description": "The red component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "green": {
            "type": "int",
            "description": "The green component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "blue": {
            "type": "int",
            "description": "The blue component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "alpha": {
            "type": "int",
            "description": "The alpha (opacity) component (between 0 and 255)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function RgbaColor(red: Integer; green: Integer; blue: Integer; alpha: Integer): Color",
          "cpp": "color rgba_color(int red, int green, int blue, int alpha)"
        }
      },
      {
        "signature": "float saturation_of(color c);",
        "name": "saturation_of",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the saturation of the supplied color.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The saturation component of the color",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "color",
            "description": "The color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function SaturationOf(c: Color): Single",
          "cpp": "float saturation_of(color c)"
        }
      },
      {
        "signature": "color string_to_color(string str);",
        "name": "string_to_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a color for the passed in color string.\nThe format must be #, followed by the hex values\nfor the red, green, blue, and alpha components\nof the color.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color represented in the string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "str": {
            "type": "string",
            "description": "The hex string representing the color",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "color"
        },
        "signatures": {
          "pascal": "function StringToColor(str: String): Color",
          "cpp": "color string_to_color(string str)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [
      {
        "name": "COLOR_ALICE_BLUE",
        "description": "A shorthand macro to the result of calling `color_alice_blue`.",
        "brief": null,
        "definition": "color_alice_blue()"
      },
      {
        "name": "COLOR_ANTIQUE_WHITE",
        "description": "A shorthand macro to the result of calling `color_antique_white`.",
        "brief": null,
        "definition": "color_antique_white()"
      },
      {
        "name": "COLOR_AQUA",
        "description": "A shorthand macro to the result of calling `color_aqua`.",
        "brief": null,
        "definition": "color_aqua()"
      },
      {
        "name": "COLOR_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_aquamarine`.",
        "brief": null,
        "definition": "color_aquamarine()"
      },
      {
        "name": "COLOR_AZURE",
        "description": "A shorthand macro to the result of calling `color_azure`.",
        "brief": null,
        "definition": "color_azure()"
      },
      {
        "name": "COLOR_BEIGE",
        "description": "A shorthand macro to the result of calling `color_beige`.",
        "brief": null,
        "definition": "color_beige()"
      },
      {
        "name": "COLOR_BISQUE",
        "description": "A shorthand macro to the result of calling `color_bisque`.",
        "brief": null,
        "definition": "color_bisque()"
      },
      {
        "name": "COLOR_BLACK",
        "description": "A shorthand macro to the result of calling `color_black`.",
        "brief": null,
        "definition": "color_black()"
      },
      {
        "name": "COLOR_BLANCHED_ALMOND",
        "description": "A shorthand macro to the result of calling `color_blanched_almond`.",
        "brief": null,
        "definition": "color_blanched_almond()"
      },
      {
        "name": "COLOR_BLUE",
        "description": "A shorthand macro to the result of calling `color_blue`.",
        "brief": null,
        "definition": "color_blue()"
      },
      {
        "name": "COLOR_BLUE_VIOLET",
        "description": "A shorthand macro to the result of calling `color_blue_violet`.",
        "brief": null,
        "definition": "color_blue_violet()"
      },
      {
        "name": "COLOR_BRIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_bright_green`.",
        "brief": null,
        "definition": "color_bright_green()"
      },
      {
        "name": "COLOR_BROWN",
        "description": "A shorthand macro to the result of calling `color_brown`.",
        "brief": null,
        "definition": "color_brown()"
      },
      {
        "name": "COLOR_BURLY_WOOD",
        "description": "A shorthand macro to the result of calling `color_burly_wood`.",
        "brief": null,
        "definition": "color_burly_wood()"
      },
      {
        "name": "COLOR_CADET_BLUE",
        "description": "A shorthand macro to the result of calling `color_cadet_blue`.",
        "brief": null,
        "definition": "color_cadet_blue()"
      },
      {
        "name": "COLOR_CHARTREUSE",
        "description": "A shorthand macro to the result of calling `color_chartreuse`.",
        "brief": null,
        "definition": "color_chartreuse()"
      },
      {
        "name": "COLOR_CHOCOLATE",
        "description": "A shorthand macro to the result of calling `color_chocolate`.",
        "brief": null,
        "definition": "color_chocolate()"
      },
      {
        "name": "COLOR_CORAL",
        "description": "A shorthand macro to the result of calling `color_coral`.",
        "brief": null,
        "definition": "color_coral()"
      },
      {
        "name": "COLOR_CORNFLOWER_BLUE",
        "description": "A shorthand macro to the result of calling `color_cornflower_blue`.",
        "brief": null,
        "definition": "color_cornflower_blue()"
      },
      {
        "name": "COLOR_CORNSILK",
        "description": "A shorthand macro to the result of calling `color_cornsilk`.",
        "brief": null,
        "definition": "color_cornsilk()"
      },
      {
        "name": "COLOR_CRIMSON",
        "description": "A shorthand macro to the result of calling `color_crimson`.",
        "brief": null,
        "definition": "color_crimson()"
      },
      {
        "name": "COLOR_CYAN",
        "description": "A shorthand macro to the result of calling `color_cyan`.",
        "brief": null,
        "definition": "color_cyan()"
      },
      {
        "name": "COLOR_DARK_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_blue`.",
        "brief": null,
        "definition": "color_dark_blue()"
      },
      {
        "name": "COLOR_DARK_CYAN",
        "description": "A shorthand macro to the result of calling `color_dark_cyan`.",
        "brief": null,
        "definition": "color_dark_cyan()"
      },
      {
        "name": "COLOR_DARK_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_dark_goldenrod`.",
        "brief": null,
        "definition": "color_dark_goldenrod()"
      },
      {
        "name": "COLOR_DARK_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_gray`.",
        "brief": null,
        "definition": "color_dark_gray()"
      },
      {
        "name": "COLOR_DARK_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_green`.",
        "brief": null,
        "definition": "color_dark_green()"
      },
      {
        "name": "COLOR_DARK_KHAKI",
        "description": "A shorthand macro to the result of calling `color_dark_khaki`.",
        "brief": null,
        "definition": "color_dark_khaki()"
      },
      {
        "name": "COLOR_DARK_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_dark_magenta`.",
        "brief": null,
        "definition": "color_dark_magenta()"
      },
      {
        "name": "COLOR_DARK_OLIVE_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_olive_green`.",
        "brief": null,
        "definition": "color_dark_olive_green()"
      },
      {
        "name": "COLOR_DARK_ORANGE",
        "description": "A shorthand macro to the result of calling `color_dark_orange`.",
        "brief": null,
        "definition": "color_dark_orange()"
      },
      {
        "name": "COLOR_DARK_ORCHID",
        "description": "A shorthand macro to the result of calling `color_dark_orchid`.",
        "brief": null,
        "definition": "color_dark_orchid()"
      },
      {
        "name": "COLOR_DARK_RED",
        "description": "A shorthand macro to the result of calling `color_dark_red`.",
        "brief": null,
        "definition": "color_dark_red()"
      },
      {
        "name": "COLOR_DARK_SALMON",
        "description": "A shorthand macro to the result of calling `color_dark_salmon`.",
        "brief": null,
        "definition": "color_dark_salmon()"
      },
      {
        "name": "COLOR_DARK_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_dark_sea_green`.",
        "brief": null,
        "definition": "color_dark_sea_green()"
      },
      {
        "name": "COLOR_DARK_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_dark_slate_blue`.",
        "brief": null,
        "definition": "color_dark_slate_blue()"
      },
      {
        "name": "COLOR_DARK_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_dark_slate_gray`.",
        "brief": null,
        "definition": "color_dark_slate_gray()"
      },
      {
        "name": "COLOR_DARK_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_dark_turquoise`.",
        "brief": null,
        "definition": "color_dark_turquoise()"
      },
      {
        "name": "COLOR_DARK_VIOLET",
        "description": "A shorthand macro to the result of calling `color_dark_violet`.",
        "brief": null,
        "definition": "color_dark_violet()"
      },
      {
        "name": "COLOR_DEEP_PINK",
        "description": "A shorthand macro to the result of calling `color_deep_pink`.",
        "brief": null,
        "definition": "color_deep_pink()"
      },
      {
        "name": "COLOR_DEEP_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_deep_sky_blue`.",
        "brief": null,
        "definition": "color_deep_sky_blue()"
      },
      {
        "name": "COLOR_DIM_GRAY",
        "description": "A shorthand macro to the result of calling `color_dim_gray`.",
        "brief": null,
        "definition": "color_dim_gray()"
      },
      {
        "name": "COLOR_DODGER_BLUE",
        "description": "A shorthand macro to the result of calling `color_dodger_blue`.",
        "brief": null,
        "definition": "color_dodger_blue()"
      },
      {
        "name": "COLOR_FIREBRICK",
        "description": "A shorthand macro to the result of calling `color_firebrick`.",
        "brief": null,
        "definition": "color_firebrick()"
      },
      {
        "name": "COLOR_FLORAL_WHITE",
        "description": "A shorthand macro to the result of calling `color_floral_white`.",
        "brief": null,
        "definition": "color_floral_white()"
      },
      {
        "name": "COLOR_FOREST_GREEN",
        "description": "A shorthand macro to the result of calling `color_forest_green`.",
        "brief": null,
        "definition": "color_forest_green()"
      },
      {
        "name": "COLOR_FUCHSIA",
        "description": "A shorthand macro to the result of calling `color_fuchsia`.",
        "brief": null,
        "definition": "color_fuchsia()"
      },
      {
        "name": "COLOR_GAINSBORO",
        "description": "A shorthand macro to the result of calling `color_gainsboro`.",
        "brief": null,
        "definition": "color_gainsboro()"
      },
      {
        "name": "COLOR_GHOST_WHITE",
        "description": "A shorthand macro to the result of calling `color_ghost_white`.",
        "brief": null,
        "definition": "color_ghost_white()"
      },
      {
        "name": "COLOR_GOLD",
        "description": "A shorthand macro to the result of calling `color_gold`.",
        "brief": null,
        "definition": "color_gold()"
      },
      {
        "name": "COLOR_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_goldenrod`.",
        "brief": null,
        "definition": "color_goldenrod()"
      },
      {
        "name": "COLOR_GRAY",
        "description": "A shorthand macro to the result of calling `color_gray`.",
        "brief": null,
        "definition": "color_gray()"
      },
      {
        "name": "COLOR_GRAY",
        "description": "A shorthand macro to the result of calling `color_gray`.",
        "brief": null,
        "definition": "color_gray()"
      },
      {
        "name": "COLOR_GREEN",
        "description": "A shorthand macro to the result of calling `color_green`.",
        "brief": null,
        "definition": "color_green()"
      },
      {
        "name": "COLOR_GREEN_YELLOW",
        "description": "A shorthand macro to the result of calling `color_green_yellow`.",
        "brief": null,
        "definition": "color_green_yellow()"
      },
      {
        "name": "COLOR_HONEYDEW",
        "description": "A shorthand macro to the result of calling `color_honeydew`.",
        "brief": null,
        "definition": "color_honeydew()"
      },
      {
        "name": "COLOR_HOT_PINK",
        "description": "A shorthand macro to the result of calling `color_hot_pink`.",
        "brief": null,
        "definition": "color_hot_pink()"
      },
      {
        "name": "COLOR_INDIAN_RED",
        "description": "A shorthand macro to the result of calling `color_indian_red`.",
        "brief": null,
        "definition": "color_indian_red()"
      },
      {
        "name": "COLOR_INDIGO",
        "description": "A shorthand macro to the result of calling `color_indigo`.",
        "brief": null,
        "definition": "color_indigo()"
      },
      {
        "name": "COLOR_IVORY",
        "description": "A shorthand macro to the result of calling `color_ivory`.",
        "brief": null,
        "definition": "color_ivory()"
      },
      {
        "name": "COLOR_KHAKI",
        "description": "A shorthand macro to the result of calling `color_khaki`.",
        "brief": null,
        "definition": "color_khaki()"
      },
      {
        "name": "COLOR_LAVENDER",
        "description": "A shorthand macro to the result of calling `color_lavender`.",
        "brief": null,
        "definition": "color_lavender()"
      },
      {
        "name": "COLOR_LAVENDER_BLUSH",
        "description": "A shorthand macro to the result of calling `color_lavender_blush`.",
        "brief": null,
        "definition": "color_lavender_blush()"
      },
      {
        "name": "COLOR_LAWN_GREEN",
        "description": "A shorthand macro to the result of calling `color_lawn_green`.",
        "brief": null,
        "definition": "color_lawn_green()"
      },
      {
        "name": "COLOR_LEMON_CHIFFON",
        "description": "A shorthand macro to the result of calling `color_lemon_chiffon`.",
        "brief": null,
        "definition": "color_lemon_chiffon()"
      },
      {
        "name": "COLOR_LIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_blue`.",
        "brief": null,
        "definition": "color_light_blue()"
      },
      {
        "name": "COLOR_LIGHT_CORAL",
        "description": "A shorthand macro to the result of calling `color_light_coral`.",
        "brief": null,
        "definition": "color_light_coral()"
      },
      {
        "name": "COLOR_LIGHT_CYAN",
        "description": "A shorthand macro to the result of calling `color_light_cyan`.",
        "brief": null,
        "definition": "color_light_cyan()"
      },
      {
        "name": "COLOR_LIGHT_GOLDENROD_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_goldenrod_yellow`.",
        "brief": null,
        "definition": "color_light_goldenrod_yellow()"
      },
      {
        "name": "COLOR_LIGHT_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_gray`.",
        "brief": null,
        "definition": "color_light_gray()"
      },
      {
        "name": "COLOR_LIGHT_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_gray`.",
        "brief": null,
        "definition": "color_light_gray()"
      },
      {
        "name": "COLOR_LIGHT_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_green`.",
        "brief": null,
        "definition": "color_light_green()"
      },
      {
        "name": "COLOR_LIGHT_PINK",
        "description": "A shorthand macro to the result of calling `color_light_pink`.",
        "brief": null,
        "definition": "color_light_pink()"
      },
      {
        "name": "COLOR_LIGHT_SALMON",
        "description": "A shorthand macro to the result of calling `color_light_salmon`.",
        "brief": null,
        "definition": "color_light_salmon()"
      },
      {
        "name": "COLOR_LIGHT_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_light_sea_green`.",
        "brief": null,
        "definition": "color_light_sea_green()"
      },
      {
        "name": "COLOR_LIGHT_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_sky_blue`.",
        "brief": null,
        "definition": "color_light_sky_blue()"
      },
      {
        "name": "COLOR_LIGHT_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_light_slate_gray`.",
        "brief": null,
        "definition": "color_light_slate_gray()"
      },
      {
        "name": "COLOR_LIGHT_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_light_steel_blue`.",
        "brief": null,
        "definition": "color_light_steel_blue()"
      },
      {
        "name": "COLOR_LIGHT_YELLOW",
        "description": "A shorthand macro to the result of calling `color_light_yellow`.",
        "brief": null,
        "definition": "color_light_yellow()"
      },
      {
        "name": "COLOR_LIME",
        "description": "A shorthand macro to the result of calling `color_lime`.",
        "brief": null,
        "definition": "color_lime()"
      },
      {
        "name": "COLOR_LIME_GREEN",
        "description": "A shorthand macro to the result of calling `color_lime_green`.",
        "brief": null,
        "definition": "color_lime_green()"
      },
      {
        "name": "COLOR_LINEN",
        "description": "A shorthand macro to the result of calling `color_linen`.",
        "brief": null,
        "definition": "color_linen()"
      },
      {
        "name": "COLOR_MAGENTA",
        "description": "A shorthand macro to the result of calling `color_magenta`.",
        "brief": null,
        "definition": "color_magenta()"
      },
      {
        "name": "COLOR_MAROON",
        "description": "A shorthand macro to the result of calling `color_maroon`.",
        "brief": null,
        "definition": "color_maroon()"
      },
      {
        "name": "COLOR_MEDIUM_AQUAMARINE",
        "description": "A shorthand macro to the result of calling `color_medium_aquamarine`.",
        "brief": null,
        "definition": "color_medium_aquamarine()"
      },
      {
        "name": "COLOR_MEDIUM_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_blue`.",
        "brief": null,
        "definition": "color_medium_blue()"
      },
      {
        "name": "COLOR_MEDIUM_ORCHID",
        "description": "A shorthand macro to the result of calling `color_medium_orchid`.",
        "brief": null,
        "definition": "color_medium_orchid()"
      },
      {
        "name": "COLOR_MEDIUM_PURPLE",
        "description": "A shorthand macro to the result of calling `color_medium_purple`.",
        "brief": null,
        "definition": "color_medium_purple()"
      },
      {
        "name": "COLOR_MEDIUM_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_sea_green`.",
        "brief": null,
        "definition": "color_medium_sea_green()"
      },
      {
        "name": "COLOR_MEDIUM_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_medium_slate_blue`.",
        "brief": null,
        "definition": "color_medium_slate_blue()"
      },
      {
        "name": "COLOR_MEDIUM_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_medium_spring_green`.",
        "brief": null,
        "definition": "color_medium_spring_green()"
      },
      {
        "name": "COLOR_MEDIUM_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_medium_turquoise`.",
        "brief": null,
        "definition": "color_medium_turquoise()"
      },
      {
        "name": "COLOR_MEDIUM_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_medium_violet_red`.",
        "brief": null,
        "definition": "color_medium_violet_red()"
      },
      {
        "name": "COLOR_MIDNIGHT_BLUE",
        "description": "A shorthand macro to the result of calling `color_midnight_blue`.",
        "brief": null,
        "definition": "color_midnight_blue()"
      },
      {
        "name": "COLOR_MINT_CREAM",
        "description": "A shorthand macro to the result of calling `color_mint_cream`.",
        "brief": null,
        "definition": "color_mint_cream()"
      },
      {
        "name": "COLOR_MISTY_ROSE",
        "description": "A shorthand macro to the result of calling `color_misty_rose`.",
        "brief": null,
        "definition": "color_misty_rose()"
      },
      {
        "name": "COLOR_MOCCASIN",
        "description": "A shorthand macro to the result of calling `color_moccasin`.",
        "brief": null,
        "definition": "color_moccasin()"
      },
      {
        "name": "COLOR_NAVAJO_WHITE",
        "description": "A shorthand macro to the result of calling `color_navajo_white`.",
        "brief": null,
        "definition": "color_navajo_white()"
      },
      {
        "name": "COLOR_NAVY",
        "description": "A shorthand macro to the result of calling `color_navy`.",
        "brief": null,
        "definition": "color_navy()"
      },
      {
        "name": "COLOR_OLD_LACE",
        "description": "A shorthand macro to the result of calling `color_old_lace`.",
        "brief": null,
        "definition": "color_old_lace()"
      },
      {
        "name": "COLOR_OLIVE",
        "description": "A shorthand macro to the result of calling `color_olive`.",
        "brief": null,
        "definition": "color_olive()"
      },
      {
        "name": "COLOR_OLIVE_DRAB",
        "description": "A shorthand macro to the result of calling `color_olive_drab`.",
        "brief": null,
        "definition": "color_olive_drab()"
      },
      {
        "name": "COLOR_ORANGE",
        "description": "A shorthand macro to the result of calling `color_orange`.",
        "brief": null,
        "definition": "color_orange()"
      },
      {
        "name": "COLOR_ORANGE_RED",
        "description": "A shorthand macro to the result of calling `color_orange_red`.",
        "brief": null,
        "definition": "color_orange_red()"
      },
      {
        "name": "COLOR_ORCHID",
        "description": "A shorthand macro to the result of calling `color_orchid`.",
        "brief": null,
        "definition": "color_orchid()"
      },
      {
        "name": "COLOR_PALE_GOLDENROD",
        "description": "A shorthand macro to the result of calling `color_pale_goldenrod`.",
        "brief": null,
        "definition": "color_pale_goldenrod()"
      },
      {
        "name": "COLOR_PALE_GREEN",
        "description": "A shorthand macro to the result of calling `color_pale_green`.",
        "brief": null,
        "definition": "color_pale_green()"
      },
      {
        "name": "COLOR_PALE_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_pale_turquoise`.",
        "brief": null,
        "definition": "color_pale_turquoise()"
      },
      {
        "name": "COLOR_PALE_VIOLET_RED",
        "description": "A shorthand macro to the result of calling `color_pale_violet_red`.",
        "brief": null,
        "definition": "color_pale_violet_red()"
      },
      {
        "name": "COLOR_PAPAYA_WHIP",
        "description": "A shorthand macro to the result of calling `color_papaya_whip`.",
        "brief": null,
        "definition": "color_papaya_whip()"
      },
      {
        "name": "COLOR_PEACH_PUFF",
        "description": "A shorthand macro to the result of calling `color_peach_puff`.",
        "brief": null,
        "definition": "color_peach_puff()"
      },
      {
        "name": "COLOR_PERU",
        "description": "A shorthand macro to the result of calling `color_peru`.",
        "brief": null,
        "definition": "color_peru()"
      },
      {
        "name": "COLOR_PINK",
        "description": "A shorthand macro to the result of calling `color_pink`.",
        "brief": null,
        "definition": "color_pink()"
      },
      {
        "name": "COLOR_PLUM",
        "description": "A shorthand macro to the result of calling `color_plum`.",
        "brief": null,
        "definition": "color_plum()"
      },
      {
        "name": "COLOR_POWDER_BLUE",
        "description": "A shorthand macro to the result of calling `color_powder_blue`.",
        "brief": null,
        "definition": "color_powder_blue()"
      },
      {
        "name": "COLOR_PURPLE",
        "description": "A shorthand macro to the result of calling `color_purple`.",
        "brief": null,
        "definition": "color_purple()"
      },
      {
        "name": "COLOR_RED",
        "description": "A shorthand macro to the result of calling `color_red`.",
        "brief": null,
        "definition": "color_red()"
      },
      {
        "name": "COLOR_ROSY_BROWN",
        "description": "A shorthand macro to the result of calling `color_rosy_brown`.",
        "brief": null,
        "definition": "color_rosy_brown()"
      },
      {
        "name": "COLOR_ROYAL_BLUE",
        "description": "A shorthand macro to the result of calling `color_royal_blue`.",
        "brief": null,
        "definition": "color_royal_blue()"
      },
      {
        "name": "COLOR_SADDLE_BROWN",
        "description": "A shorthand macro to the result of calling `color_saddle_brown`.",
        "brief": null,
        "definition": "color_saddle_brown()"
      },
      {
        "name": "COLOR_SALMON",
        "description": "A shorthand macro to the result of calling `color_salmon`.",
        "brief": null,
        "definition": "color_salmon()"
      },
      {
        "name": "COLOR_SANDY_BROWN",
        "description": "A shorthand macro to the result of calling `color_sandy_brown`.",
        "brief": null,
        "definition": "color_sandy_brown()"
      },
      {
        "name": "COLOR_SEA_GREEN",
        "description": "A shorthand macro to the result of calling `color_sea_green`.",
        "brief": null,
        "definition": "color_sea_green()"
      },
      {
        "name": "COLOR_SEA_SHELL",
        "description": "A shorthand macro to the result of calling `color_sea_shell`.",
        "brief": null,
        "definition": "color_sea_shell()"
      },
      {
        "name": "COLOR_SIENNA",
        "description": "A shorthand macro to the result of calling `color_sienna`.",
        "brief": null,
        "definition": "color_sienna()"
      },
      {
        "name": "COLOR_SILVER",
        "description": "A shorthand macro to the result of calling `color_silver`.",
        "brief": null,
        "definition": "color_silver()"
      },
      {
        "name": "COLOR_SKY_BLUE",
        "description": "A shorthand macro to the result of calling `color_sky_blue`.",
        "brief": null,
        "definition": "color_sky_blue()"
      },
      {
        "name": "COLOR_SLATE_BLUE",
        "description": "A shorthand macro to the result of calling `color_slate_blue`.",
        "brief": null,
        "definition": "color_slate_blue()"
      },
      {
        "name": "COLOR_SLATE_GRAY",
        "description": "A shorthand macro to the result of calling `color_slate_gray`.",
        "brief": null,
        "definition": "color_slate_gray()"
      },
      {
        "name": "COLOR_SNOW",
        "description": "A shorthand macro to the result of calling `color_snow`.",
        "brief": null,
        "definition": "color_snow()"
      },
      {
        "name": "COLOR_SPRING_GREEN",
        "description": "A shorthand macro to the result of calling `color_spring_green`.",
        "brief": null,
        "definition": "color_spring_green()"
      },
      {
        "name": "COLOR_STEEL_BLUE",
        "description": "A shorthand macro to the result of calling `color_steel_blue`.",
        "brief": null,
        "definition": "color_steel_blue()"
      },
      {
        "name": "COLOR_SWINBURNE_RED",
        "description": "A shorthand macro to the result of calling `color_swinburne_red`.",
        "brief": null,
        "definition": "color_swinburne_red()"
      },
      {
        "name": "COLOR_TAN",
        "description": "A shorthand macro to the result of calling `color_tan`.",
        "brief": null,
        "definition": "color_tan()"
      },
      {
        "name": "COLOR_TEAL",
        "description": "A shorthand macro to the result of calling `color_teal`.",
        "brief": null,
        "definition": "color_teal()"
      },
      {
        "name": "COLOR_THISTLE",
        "description": "A shorthand macro to the result of calling `color_thistle`.",
        "brief": null,
        "definition": "color_thistle()"
      },
      {
        "name": "COLOR_TOMATO",
        "description": "A shorthand macro to the result of calling `color_tomato`.",
        "brief": null,
        "definition": "color_tomato()"
      },
      {
        "name": "COLOR_TRANSPARENT",
        "description": "A shorthand macro to the result of calling `color_transparent`.",
        "brief": null,
        "definition": "color_transparent()"
      },
      {
        "name": "COLOR_TURQUOISE",
        "description": "A shorthand macro to the result of calling `color_turquoise`.",
        "brief": null,
        "definition": "color_turquoise()"
      },
      {
        "name": "COLOR_VIOLET",
        "description": "A shorthand macro to the result of calling `color_violet`.",
        "brief": null,
        "definition": "color_violet()"
      },
      {
        "name": "COLOR_WHEAT",
        "description": "A shorthand macro to the result of calling `color_wheat`.",
        "brief": null,
        "definition": "color_wheat()"
      },
      {
        "name": "COLOR_WHITE",
        "description": "A shorthand macro to the result of calling `color_white`.",
        "brief": null,
        "definition": "color_white()"
      },
      {
        "name": "COLOR_WHITE_SMOKE",
        "description": "A shorthand macro to the result of calling `color_white_smoke`.",
        "brief": null,
        "definition": "color_white_smoke()"
      },
      {
        "name": "COLOR_YELLOW",
        "description": "A shorthand macro to the result of calling `color_yellow`.",
        "brief": null,
        "definition": "color_yellow()"
      },
      {
        "name": "COLOR_YELLOW_GREEN",
        "description": "A shorthand macro to the result of calling `color_yellow_green`.",
        "brief": null,
        "definition": "color_yellow_green()"
      }
    ]
  },
  "database": {
    "brief": "SplashKit Database allows you to create, query and otherwise\nmanipulate a database.",
    "description": "SplashKit's database library allows you to easily create or load databases\nand to perform queries on them. To get started with databases in SplashKit,\nthe first thinkg you need to do is to load or create a database file. You can\ndo this by calling the `open_database(string name)` function.",
    "functions": [
      {
        "signature": "database database_named(string name);",
        "name": "database_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Retrieves a `database` that has been loaded into SplashKit.",
        "brief": null,
        "return": {
          "type": "database",
          "description": "Returns the `database` that has been loaded with the specified\n`name` using `open_database`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the database to return.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function DatabaseNamed(name: String): Database",
          "cpp": "database database_named(string name)"
        }
      },
      {
        "signature": "void free_all_databases();",
        "name": "free_all_databases",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the databases which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "procedure FreeAllDatabases()",
          "cpp": "void free_all_databases()"
        }
      },
      {
        "signature": "void free_all_query_results();",
        "name": "free_all_query_results",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees all of the databases which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "database",
          "group": "database"
        },
        "signatures": {
          "pascal": "procedure FreeAllQueryResults()",
          "cpp": "void free_all_query_results()"
        }
      },
      {
        "signature": "void free_database(database db_to_close);",
        "name": "free_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the database.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_to_close": {
            "type": "database",
            "description": "The `database` whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "database",
          "destructor": true,
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "procedure FreeDatabase(dbToClose: Database)",
          "cpp": "void free_database(database db_to_close)"
        }
      },
      {
        "signature": "void free_database(string name_of_db_to_close);",
        "name": "free_database",
        "method_name": null,
        "unique_global_name": "free_database_named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the database at a given name.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name_of_db_to_close": {
            "type": "string",
            "description": "The `string` denoting where the database is which should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "named",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "procedure FreeDatabase(nameOfDbToClose: String)",
          "cpp": "void free_database(string name_of_db_to_close)"
        }
      },
      {
        "signature": "void free_query_result(query_result query);",
        "name": "free_query_result",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases the SplashKit resources associated with the query.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "query": {
            "type": "query_result",
            "description": "The `query_result` whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "destructor": true,
          "self": "query",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "procedure FreeQueryResult(query: QueryResult)",
          "cpp": "void free_query_result(query_result query)"
        }
      },
      {
        "signature": "bool get_next_row(query_result db_result);",
        "name": "get_next_row",
        "method_name": "get_next_row",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the next row available on a given `query_result`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` which represents if there was a valid row of data to move to.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to move to the next row on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "get_next_row",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function GetNextRow(dbResult: QueryResult): Boolean",
          "cpp": "bool get_next_row(query_result db_result)"
        }
      },
      {
        "signature": "bool has_database(string name);",
        "name": "has_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a database loaded for the supplied name.\nThis checks against all databases loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_database` to load in a specific database and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if a database with the given `name` has\nhas been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the database you want to check for.\nThis will match the name you used when opening the database in open_database",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function HasDatabase(name: String): Boolean",
          "cpp": "bool has_database(string name)"
        }
      },
      {
        "signature": "bool has_row(query_result db_result);",
        "name": "has_row",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a given `query_result` has a valid row of data.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` which represents if there was a valid row of data.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to check for a valid row of data on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "getter": "has_row",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function HasRow(dbResult: QueryResult): Boolean",
          "cpp": "bool has_row(query_result db_result)"
        }
      },
      {
        "signature": "database open_database(string name,string filename);",
        "name": "open_database",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads or creates, and returns a database.\n\nThe supplied `filename` is the name of the file of the database. The\nsupplied `name` indicates the name to use to refer to this `database`.\nThe `database` can then be retrieved by passing this `name` to\nthe `database_named` function. If the database file does not exist, it\nwill be created for you.",
        "brief": null,
        "return": {
          "type": "database",
          "description": "A new `database` with the initialised values provided.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name used to refer to the database.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename used to locate the database to use.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "database",
          "constructor": true,
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function OpenDatabase(name: String; filename: String): Database",
          "cpp": "database open_database(string name, string filename)"
        }
      },
      {
        "signature": "bool query_column_for_bool(query_result db_result,int col);",
        "name": "query_column_for_bool",
        "method_name": "query_column_for_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a bool.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns the `bool` which is the data at that column.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to perform the query on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "col": {
            "type": "int",
            "description": "The column you would like to query data from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_bool",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QueryColumnForBool(dbResult: QueryResult; col: Integer): Boolean",
          "cpp": "bool query_column_for_bool(query_result db_result, int col)"
        }
      },
      {
        "signature": "double query_column_for_double(query_result db_result,int col);",
        "name": "query_column_for_double",
        "method_name": "query_column_for_double",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a double.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Returns the `double` which is the data at that column.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to perform the query on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "col": {
            "type": "int",
            "description": "The column you would like to query data from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_double",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QueryColumnForDouble(dbResult: QueryResult; col: Integer): Double",
          "cpp": "double query_column_for_double(query_result db_result, int col)"
        }
      },
      {
        "signature": "int query_column_for_int(query_result db_result,int col);",
        "name": "query_column_for_int",
        "method_name": "query_column_for_int",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for an integer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the `int` which is the data at that column.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to perform the query on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "col": {
            "type": "int",
            "description": "The column you would like to query data from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_int",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QueryColumnForInt(dbResult: QueryResult; col: Integer): Integer",
          "cpp": "int query_column_for_int(query_result db_result, int col)"
        }
      },
      {
        "signature": "string query_column_for_string(query_result db_result,int col);",
        "name": "query_column_for_string",
        "method_name": "query_column_for_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for a string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the `string` which is the data at that column.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to perform the query on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "col": {
            "type": "int",
            "description": "The column you would like to query data from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_column_for_string",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QueryColumnForString(dbResult: QueryResult; col: Integer): String",
          "cpp": "string query_column_for_string(query_result db_result, int col)"
        }
      },
      {
        "signature": "bool query_success(query_result db_result);",
        "name": "query_success",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the most recent query at the given `query_result` was a success or failure.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns whether or not the query was a success or failure represented as a `bool`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to check the success of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "getter": "successful",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QuerySuccess(dbResult: QueryResult): Boolean",
          "cpp": "bool query_success(query_result db_result)"
        }
      },
      {
        "signature": "string query_type_of_col(query_result db_result,int col);",
        "name": "query_type_of_col",
        "method_name": "query_type_of_col",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Queries a given column in the current row of the `query_result` for the data type at its postition.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns a `string` which is the name of the data type being stored.\n- Could return: `INTEGER`, `FLOAT`, `TEXT`, `NULL`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to perform the query on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "col": {
            "type": "int",
            "description": "The column you would like to know the data type of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "query_type_of_col",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function QueryTypeOfCol(dbResult: QueryResult; col: Integer): String",
          "cpp": "string query_type_of_col(query_result db_result, int col)"
        }
      },
      {
        "signature": "void reset_query_result(query_result db_result);",
        "name": "reset_query_result",
        "method_name": "reset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets a query_result back to its initial state, ready to be re-executed.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db_result": {
            "type": "query_result",
            "description": "The `query_result` to reset.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "query_result",
          "method": "reset",
          "self": "db_result",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "procedure ResetQueryResult(dbResult: QueryResult)",
          "cpp": "void reset_query_result(query_result db_result)"
        }
      },
      {
        "signature": "int rows_changed(database db);",
        "name": "rows_changed",
        "method_name": "rows_changed",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the number of row changed in the database at the last time\na changing query was performed on the given database.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the `int` which represents how many rows were changed\nin the database.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db": {
            "type": "database",
            "description": "The database to check how many rows changed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "database",
          "method": "rows_changed",
          "self": "db",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function RowsChanged(db: Database): Integer",
          "cpp": "int rows_changed(database db)"
        }
      },
      {
        "signature": "query_result run_sql(database db,string sql);",
        "name": "run_sql",
        "method_name": "run_sql",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `query_result` for the query passed into `sql`.",
        "brief": null,
        "return": {
          "type": "query_result",
          "description": "Returns the `query_result` which represents\nthe result of perfoming `sql` on `db`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "db": {
            "type": "database",
            "description": "The database to perform `sql` on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "sql": {
            "type": "string",
            "description": "The sql statement to perform on `db`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "database",
          "method": "run_sql",
          "self": "db",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function RunSql(db: Database; sql: String): QueryResult",
          "cpp": "query_result run_sql(database db, string sql)"
        }
      },
      {
        "signature": "query_result run_sql(string database_name,string sql);",
        "name": "run_sql",
        "method_name": null,
        "unique_global_name": "run_sql_from_name",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `query_result` for the query passed into `sql`.",
        "brief": null,
        "return": {
          "type": "query_result",
          "description": "Returns the `query_result` which represents\nthe result of perfoming `sql` on the database at `database_name`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "database_name": {
            "type": "string",
            "description": "The string name of the database to perform `sql` on.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "sql": {
            "type": "string",
            "description": "The sql statement to perform on the database at `database_name`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_name",
          "group": "database",
          "static": "database"
        },
        "signatures": {
          "pascal": "function RunSql(databaseName: String; sql: String): QueryResult",
          "cpp": "query_result run_sql(string database_name, string sql)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_database *database;",
        "name": "database",
        "description": "The `database` type is used to refer to databases that can be\nmanipulated by the SplashKit database code. Databases are:\n\n\n- opened with `open_database`,\n\n\n- and must be released using `free_database` (to release a specific\ndatabase) or `delete_all_databases` (to release all loaded\ndatabases).",
        "brief": null,
        "attributes": {
          "class": "database",
          "group": "database",
          "static": "database"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_query_result *query_result;",
        "name": "query_result",
        "description": "The `query_result` type is used to store the result of performing\na query on the database. It can:\n\n\n- show the success or failure of a query using `query_success`,\n\n\n- stores the data from queries which return data. This data is\naccessed using `query_column_for_bool`, `query_column_for_int`,\n`query_column_for_string` and `query_column_for_double`.",
        "brief": null,
        "attributes": {
          "class": "query_result",
          "group": "database",
          "static": "database"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "geometry": {
    "brief": "SplashKit's geometry functions assist with geometry-related computations.",
    "description": "",
    "functions": [
      {
        "signature": "point_2d center_point(const circle &c);",
        "name": "center_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle to get the center point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CenterPoint(const c: Circle): Point2d",
          "cpp": "point_2d center_point(const circle &c)"
        }
      },
      {
        "signature": "circle circle_at(const point_2d &pt,float radius);",
        "name": "circle_at",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle at the indicated point and radius.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle at the indicatd point and radius",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The location of the center of the circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CircleAt(const pt: Point2d; radius: Single): Circle",
          "cpp": "circle circle_at(const point_2d &pt, float radius)"
        }
      },
      {
        "signature": "circle circle_at(float x,float y,float radius);",
        "name": "circle_at",
        "method_name": null,
        "unique_global_name": "circle_at_from_points",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle at the indicated point and radius.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle at the indicatd point and radius",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "from_points",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CircleAt(x: Single; y: Single; radius: Single): Circle",
          "cpp": "circle circle_at(float x, float y, float radius)"
        }
      },
      {
        "signature": "float circle_radius(const circle c);",
        "name": "circle_radius",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle radius.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CircleRadius(c: Circle): Single",
          "cpp": "float circle_radius(const circle c)"
        }
      },
      {
        "signature": "float circle_x(const circle &c);",
        "name": "circle_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle x value.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the center of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CircleX(const c: Circle): Single",
          "cpp": "float circle_x(const circle &c)"
        }
      },
      {
        "signature": "float circle_y(const circle &c);",
        "name": "circle_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the circle y value.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y location of the center of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CircleY(const c: Circle): Single",
          "cpp": "float circle_y(const circle &c)"
        }
      },
      {
        "signature": "bool circles_intersect(circle c1,circle c2);",
        "name": "circles_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two circles do intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c1": {
            "type": "circle",
            "description": "The circle to test if intersects with c2",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c2": {
            "type": "circle",
            "description": "The circle to test if intersects with c1",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function CirclesIntersect(c1: Circle; c2: Circle): Boolean",
          "cpp": "bool circles_intersect(circle c1, circle c2)"
        }
      },
      {
        "signature": "point_2d closest_point_on_circle(const point_2d &from_pt,const circle &c);",
        "name": "closest_point_on_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The closest point on the circle to the given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on c that is closest to the from point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to get a point on its circumference",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function ClosestPointOnCircle(const fromPt: Point2d; const c: Circle): Point2d",
          "cpp": "point_2d closest_point_on_circle(const point_2d &from_pt, const circle &c)"
        }
      },
      {
        "signature": "point_2d closest_point_on_line_from_circle(const circle &c,const line &l);",
        "name": "closest_point_on_line_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the closest point on a line to a circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is closest to `c` on `l`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function ClosestPointOnLineFromCircle(const c: Circle; const l: Line): Point2d",
          "cpp": "point_2d closest_point_on_line_from_circle(const circle &c, const line &l)"
        }
      },
      {
        "signature": "point_2d closest_point_on_rect_from_circle(const circle &c,const rectangle &rect);",
        "name": "closest_point_on_rect_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the closest point on a rectangle to a circle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is closest to `c` on `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function ClosestPointOnRectFromCircle(const c: Circle; const rect: Rectangle): Point2d",
          "cpp": "point_2d closest_point_on_rect_from_circle(const circle &c, const rectangle &rect)"
        }
      },
      {
        "signature": "point_2d distant_point_on_circle(const point_2d &pt,const circle &c);",
        "name": "distant_point_on_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The furthest point on the circle to the given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on c that is furthest from `pt`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to get a point on its circumference",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function DistantPointOnCircle(const pt: Point2d; const c: Circle): Point2d",
          "cpp": "point_2d distant_point_on_circle(const point_2d &pt, const circle &c)"
        }
      },
      {
        "signature": "bool distant_point_on_circle_heading(const point_2d &pt,const circle &c,const vector_2d &heading,point_2d &opposite_pt);",
        "name": "distant_point_on_circle_heading",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines the opposite side of a circle given a collision point and a\nheading.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the `opposite_pt` is calculated, false when\nthe point would not collide with the circle when\nheading as indicated.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point from which the test is being made",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The direction the point is heading",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opposite_pt": {
            "type": "point_2d",
            "description": "After the call, this is set to the point on the\nopposite side of the circle from pt when it is\nheading in the given direction.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function DistantPointOnCircleHeading(const pt: Point2d; const c: Circle; const heading: Vector2d; var oppositePt: Point2d): Boolean",
          "cpp": "bool distant_point_on_circle_heading(const point_2d &pt, const circle &c, const vector_2d &heading, point_2d &opposite_pt)"
        }
      },
      {
        "signature": "float ray_circle_intersect_distance(const point_2d &ray_origin,const vector_2d &ray_heading,const circle &c);",
        "name": "ray_circle_intersect_distance",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the distance from a ray cast from a point to a given circle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "-1 if the ray does not hit the circle, otherwise the\ndistance from the origin to the circle bounds.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ray_origin": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ray_heading": {
            "type": "vector_2d",
            "description": "The direction of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being tested",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RayCircleIntersectDistance(const rayOrigin: Point2d; const rayHeading: Vector2d; const c: Circle): Single",
          "cpp": "float ray_circle_intersect_distance(const point_2d &ray_origin, const vector_2d &ray_heading, const circle &c)"
        }
      },
      {
        "signature": "bool tangent_points(const point_2d &from_pt,const circle &c,point_2d &p1,point_2d &p2);",
        "name": "tangent_points",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the two tangent points on the circle given the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `from_pt` is outside of the circle, and tangent\npoints are calculated",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The source point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p1": {
            "type": "point_2d",
            "description": "If this returns true, then `p1` contains one of the points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "If this returns true, then `p2` contains one of the points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TangentPoints(const fromPt: Point2d; const c: Circle; var p1: Point2d; var p2: Point2d): Boolean",
          "cpp": "bool tangent_points(const point_2d &from_pt, const circle &c, point_2d &p1, point_2d &p2)"
        }
      },
      {
        "signature": "void widest_points(const circle &c,const vector_2d &along,point_2d &pt1,point_2d &pt2);",
        "name": "widest_points",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the two points on a circles radius that lie along the given\nvector. This represents the points on the circle when the vector is\nplaced at the circle's center point.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "along": {
            "type": "vector_2d",
            "description": "The vector representing the line along which the points lie.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "After the call, this is set to one of the widest points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "After the call, this is set to one of the widest points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "procedure WidestPoints(const c: Circle; const along: Vector2d; var pt1: Point2d; var pt2: Point2d)",
          "cpp": "void widest_points(const circle &c, const vector_2d &along, point_2d &pt1, point_2d &pt2)"
        }
      },
      {
        "signature": "float cosine(float degrees);",
        "name": "cosine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the cosine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the cosine of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function Cosine(degrees: Single): Single",
          "cpp": "float cosine(float degrees)"
        }
      },
      {
        "signature": "float sine(float degrees);",
        "name": "sine",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sine of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the sine of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function Sine(degrees: Single): Single",
          "cpp": "float sine(float degrees)"
        }
      },
      {
        "signature": "float tangent(float degrees);",
        "name": "tangent",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the tangent of the supplied angle (in degrees).",
        "brief": null,
        "return": {
          "type": "float",
          "description": "the tangent of the supplied angle (in degrees).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "degrees": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function Tangent(degrees: Single): Single",
          "cpp": "float tangent(float degrees)"
        }
      },
      {
        "signature": "point_2d closest_point_on_line(const point_2d from_pt,const line &l);",
        "name": "closest_point_on_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the closest point on the line to a given point.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on the line that is closest to `from_pt`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test (usually somewhere near the line)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function ClosestPointOnLine(fromPt: Point2d; const l: Line): Point2d",
          "cpp": "point_2d closest_point_on_line(const point_2d from_pt, const line &l)"
        }
      },
      {
        "signature": "point_2d closest_point_on_lines(const point_2d from_pt,const vector<line> &lines,int &line_idx);",
        "name": "closest_point_on_lines",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the point closest to `from pt` that is on one of the supplied lines.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point on one of the lines that is the closest point\non these lines to the `from pt`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "lines": {
            "type": "vector",
            "description": "The lines to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "line"
          },
          "line_idx": {
            "type": "int",
            "description": "After the call this will store the index of the line that\nhad the matching point.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function ClosestPointOnLines(fromPt: Point2d; const lines: ArrayOfLine; var lineIdx: Integer): Point2d",
          "cpp": "point_2d closest_point_on_lines(const point_2d from_pt, const vector<line> &lines, int &line_idx)"
        }
      },
      {
        "signature": "line line_from(const point_2d &start,const point_2d &end_pt);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a line from one point to another.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineFrom(const start: Point2d; const endPt: Point2d): Line",
          "cpp": "line line_from(const point_2d &start, const point_2d &end_pt)"
        }
      },
      {
        "signature": "line line_from(const point_2d &start,const vector_2d &offset);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a line that starts at a point, and follows a given vector.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The offset to the end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineFrom(const start: Point2d; const offset: Vector2d): Line",
          "cpp": "line line_from(const point_2d &start, const vector_2d &offset)"
        }
      },
      {
        "signature": "line line_from(const vector_2d &v);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a line that goes from the origin and ends at the end of the vector.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the origin to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The offset from the origin for the end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineFrom(const v: Vector2d): Line",
          "cpp": "line line_from(const vector_2d &v)"
        }
      },
      {
        "signature": "line line_from(float x1,float y1,float x2,float y2);",
        "name": "line_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a line from one point to another.",
        "brief": null,
        "return": {
          "type": "line",
          "description": "A line from the start to the end point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x1": {
            "type": "float",
            "description": "The x value of the start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The y value of the start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The x value of the end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The y value of the end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineFrom(x1: Single; y1: Single; x2: Single; y2: Single): Line",
          "cpp": "line line_from(float x1, float y1, float x2, float y2)"
        }
      },
      {
        "signature": "bool line_intersection_point(const line &line1,const line &line2,point_2d &pt);",
        "name": "line_intersection_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the point at which two lines would intersect. This point may lie\npast the end of one or both lines.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "[description]",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "line1": {
            "type": "line",
            "description": "The first line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "line2": {
            "type": "line",
            "description": "The other line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The resulting point where they intersect",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineIntersectionPoint(const line1: Line; const line2: Line; var pt: Point2d): Boolean",
          "cpp": "bool line_intersection_point(const line &line1, const line &line2, point_2d &pt)"
        }
      },
      {
        "signature": "bool line_intersects_circle(const line &l,const circle &c);",
        "name": "line_intersects_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects the circle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the line `l` intersects the circle `c`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineIntersectsCircle(const l: Line; const c: Circle): Boolean",
          "cpp": "bool line_intersects_circle(const line &l, const circle &c)"
        }
      },
      {
        "signature": "bool line_intersects_lines(const line &l,const vector<line> &lines);",
        "name": "line_intersects_lines",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects any of the lines.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `line` intersects any of the lines in `lines`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "lines": {
            "type": "vector",
            "description": "The lines to check against",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "line"
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineIntersectsLines(const l: Line; const lines: ArrayOfLine): Boolean",
          "cpp": "bool line_intersects_lines(const line &l, const vector<line> &lines)"
        }
      },
      {
        "signature": "bool line_intersects_rect(const line &l,const rectangle &rect);",
        "name": "line_intersects_rect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the line intersects the rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `l` intersects `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineIntersectsRect(const l: Line; const rect: Rectangle): Boolean",
          "cpp": "bool line_intersects_rect(const line &l, const rectangle &rect)"
        }
      },
      {
        "signature": "float line_length(const line &l);",
        "name": "line_length",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the length of a line.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The length of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineLength(const l: Line): Single",
          "cpp": "float line_length(const line &l)"
        }
      },
      {
        "signature": "float line_length_squared(const line &l);",
        "name": "line_length_squared",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the squared length of the line. You can also get the\n`line_length`.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The squared length of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineLengthSquared(const l: Line): Single",
          "cpp": "float line_length_squared(const line &l)"
        }
      },
      {
        "signature": "point_2d line_mid_point(const line &l);",
        "name": "line_mid_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the line.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is at the center of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineMidPoint(const l: Line): Point2d",
          "cpp": "point_2d line_mid_point(const line &l)"
        }
      },
      {
        "signature": "vector_2d line_normal(const line &l);",
        "name": "line_normal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The line normal (a perpendicular vector).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The line's normal vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineNormal(const l: Line): Vector2d",
          "cpp": "vector_2d line_normal(const line &l)"
        }
      },
      {
        "signature": "string line_to_string(const line &ln);",
        "name": "line_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a text description of the line.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A text description of the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ln": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LineToString(const ln: Line): String",
          "cpp": "string line_to_string(const line &ln)"
        }
      },
      {
        "signature": "vector<line> lines_from(const rectangle &rect);",
        "name": "lines_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of lines from a supplied rectangle.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "An array containing 4 lines",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "line"
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to get the lines from",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LinesFrom(const rect: Rectangle): ArrayOfLine",
          "cpp": "vector<line> lines_from(const rectangle &rect)"
        }
      },
      {
        "signature": "vector<line> lines_from(const triangle &t);",
        "name": "lines_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of lines from the details in the triangle.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The lines from the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "line"
        },
        "parameters": {
          "t": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LinesFrom(const t: Triangle): ArrayOfLine",
          "cpp": "vector<line> lines_from(const triangle &t)"
        }
      },
      {
        "signature": "bool lines_intersect(const line &l1,const line &l2);",
        "name": "lines_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two lines intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two lines intersect (share a common point).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l1": {
            "type": "line",
            "description": "The first line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l2": {
            "type": "line",
            "description": "The other line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function LinesIntersect(const l1: Line; const l2: Line): Boolean",
          "cpp": "bool lines_intersect(const line &l1, const line &l2)"
        }
      },
      {
        "signature": "point_2d point_at(float x,float y);",
        "name": "point_at",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a point at the given location.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point at the given location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The x value of the coordinate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y value of the coordinate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointAt(x: Single; y: Single): Point2d",
          "cpp": "point_2d point_at(float x, float y)"
        }
      },
      {
        "signature": "point_2d point_at_origin();",
        "name": "point_at_origin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a point representing the origin.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point with x and y set to 0",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointAtOrigin(): Point2d",
          "cpp": "point_2d point_at_origin()"
        }
      },
      {
        "signature": "bool point_in_circle(const point_2d &pt,const circle &c);",
        "name": "point_in_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the circle `c`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the area of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointInCircle(const pt: Point2d; const c: Circle): Boolean",
          "cpp": "bool point_in_circle(const point_2d &pt, const circle &c)"
        }
      },
      {
        "signature": "bool point_in_quad(const point_2d &pt,const quad &q);",
        "name": "point_in_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a point is in a quad.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pt lies within the area of q.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The quad to check if the point is within.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointInQuad(const pt: Point2d; const q: Quad): Boolean",
          "cpp": "bool point_in_quad(const point_2d &pt, const quad &q)"
        }
      },
      {
        "signature": "bool point_in_rectangle(const point_2d &pt,const rectangle &rect);",
        "name": "point_in_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is in the Rectangle `rect`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointInRectangle(const pt: Point2d; const rect: Rectangle): Boolean",
          "cpp": "bool point_in_rectangle(const point_2d &pt, const rectangle &rect)"
        }
      },
      {
        "signature": "bool point_in_triangle(const point_2d &pt,const triangle &tri);",
        "name": "point_in_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the point `pt` is in the Triangle `tri`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is within the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointInTriangle(const pt: Point2d; const tri: Triangle): Boolean",
          "cpp": "bool point_in_triangle(const point_2d &pt, const triangle &tri)"
        }
      },
      {
        "signature": "float point_line_distance(const point_2d &pt,const line &l);",
        "name": "point_line_distance",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the distance from a point to a line.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from `pt` to `l`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointLineDistance(const pt: Point2d; const l: Line): Single",
          "cpp": "float point_line_distance(const point_2d &pt, const line &l)"
        }
      },
      {
        "signature": "point_2d point_offset_by(const point_2d &start_point,const vector_2d &offset);",
        "name": "point_offset_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the `point_2d` that is offset from the `start_point` by the\n`offset`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point as a result of moving by the offset from\nthe starting point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start_point": {
            "type": "point_2d",
            "description": "The starting point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The distance and direction to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointOffsetBy(const startPoint: Point2d; const offset: Vector2d): Point2d",
          "cpp": "point_2d point_offset_by(const point_2d &start_point, const vector_2d &offset)"
        }
      },
      {
        "signature": "point_2d point_offset_from_origin(const vector_2d &offset);",
        "name": "point_offset_from_origin",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the point offset from the origin by the provided vector.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point as a result of moving by the offset from\nthe starting point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "offset": {
            "type": "vector_2d",
            "description": "The distance and direction to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointOffsetFromOrigin(const offset: Vector2d): Point2d",
          "cpp": "point_2d point_offset_from_origin(const vector_2d &offset)"
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if point `pt` is on the line `l`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointOnLine(const pt: Point2d; const l: Line): Boolean",
          "cpp": "bool point_on_line(const point_2d &pt, const line &l)"
        }
      },
      {
        "signature": "bool point_on_line(const point_2d &pt,const line &l,float proximity);",
        "name": "point_on_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the point is on the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "proximity": {
            "type": "float",
            "description": "The sensitivity to allow close approximities",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointOnLine(const pt: Point2d; const l: Line; proximity: Single): Boolean",
          "cpp": "bool point_on_line(const point_2d &pt, const line &l, float proximity)"
        }
      },
      {
        "signature": "float point_point_angle(const point_2d &pt1,const point_2d &pt2);",
        "name": "point_point_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the angle between two points in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle (in degrees) of the line between the points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointPointAngle(const pt1: Point2d; const pt2: Point2d): Single",
          "cpp": "float point_point_angle(const point_2d &pt1, const point_2d &pt2)"
        }
      },
      {
        "signature": "float point_point_distance(const point_2d &pt1,const point_2d &pt2);",
        "name": "point_point_distance",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the distance between two points.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance between the two points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointPointDistance(const pt1: Point2d; const pt2: Point2d): Single",
          "cpp": "float point_point_distance(const point_2d &pt1, const point_2d &pt2)"
        }
      },
      {
        "signature": "string point_to_string(const point_2d &pt);",
        "name": "point_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `point_2d`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function PointToString(const pt: Point2d): String",
          "cpp": "string point_to_string(const point_2d &pt)"
        }
      },
      {
        "signature": "point_2d random_bitmap_point(bitmap bmp);",
        "name": "random_bitmap_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point within the bounds of the bitmap.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RandomBitmapPoint(bmp: Bitmap): Point2d",
          "cpp": "point_2d random_bitmap_point(bitmap bmp)"
        }
      },
      {
        "signature": "point_2d random_screen_point();",
        "name": "random_screen_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the current window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RandomScreenPoint(): Point2d",
          "cpp": "point_2d random_screen_point()"
        }
      },
      {
        "signature": "point_2d random_window_point(window wind);",
        "name": "random_window_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a random point on the provided window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point within the bounds of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RandomWindowPoint(wind: Window): Point2d",
          "cpp": "point_2d random_window_point(window wind)"
        }
      },
      {
        "signature": "bool same_point(const point_2d &pt1,const point_2d &pt2);",
        "name": "same_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns True of `pt1` is at the same point as `pt2`. This checks at an\ninteger level, indicating the two points refer to the same pixel.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two points are at the same location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The other point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function SamePoint(const pt1: Point2d; const pt2: Point2d): Boolean",
          "cpp": "bool same_point(const point_2d &pt1, const point_2d &pt2)"
        }
      },
      {
        "signature": "quad quad_from(const point_2d &p1,const point_2d &p2,const point_2d &p3,const point_2d &p4);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the passed in points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad from the passed in points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The top left of the quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "The top right of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p3": {
            "type": "point_2d",
            "description": "The bottom left of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p4": {
            "type": "point_2d",
            "description": "The bottom right of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function QuadFrom(const p1: Point2d; const p2: Point2d; const p3: Point2d; const p4: Point2d): Quad",
          "cpp": "quad quad_from(const point_2d &p1, const point_2d &p2, const point_2d &p3, const point_2d &p4)"
        }
      },
      {
        "signature": "quad quad_from(const rectangle &rect);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the x-y points of a given recatangle",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad at the same location as the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to convert to a quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function QuadFrom(const rect: Rectangle): Quad",
          "cpp": "quad quad_from(const rectangle &rect)"
        }
      },
      {
        "signature": "quad quad_from(const rectangle &rect,const matrix_2d &transform);",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad that represents the rectangle after the transformation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to transform to a quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "transform": {
            "type": "matrix_2d",
            "description": "A transform to apply to the resulting quad.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function QuadFrom(const rect: Rectangle; const transform: Matrix2d): Quad",
          "cpp": "quad quad_from(const rectangle &rect, const matrix_2d &transform)"
        }
      },
      {
        "signature": "quad quad_from(float x_top_left,float y_top_left,float x_top_right,float y_top_right,float x_bottom_left,float y_bottom_left,float x_bottom_right,float y_bottom_right );",
        "name": "quad_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a quad for the passed in x & y points.",
        "brief": null,
        "return": {
          "type": "quad",
          "description": "A quad with the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x_top_left": {
            "type": "float",
            "description": "X coordinate of the top left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_top_left": {
            "type": "float",
            "description": "Y coordinate of the top left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_top_right": {
            "type": "float",
            "description": "X coordinate of the top right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_top_right": {
            "type": "float",
            "description": "Y coordinate of the top right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_bottom_left": {
            "type": "float",
            "description": "X coordinate of the bottom left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_bottom_left": {
            "type": "float",
            "description": "Y coordinate of the bottom left of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_bottom_right": {
            "type": "float",
            "description": "X coordinate of the bottom right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_bottom_right": {
            "type": "float",
            "description": "Y coordinate of the bottom right of the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function QuadFrom(xTopLeft: Single; yTopLeft: Single; xTopRight: Single; yTopRight: Single; xBottomLeft: Single; yBottomLeft: Single; xBottomRight: Single; yBottomRight: Single): Quad",
          "cpp": "quad quad_from(float x_top_left, float y_top_left, float x_top_right, float y_top_right, float x_bottom_left, float y_bottom_left, float x_bottom_right, float y_bottom_right)"
        }
      },
      {
        "signature": "bool quads_intersect(const quad &q1,const quad &q2);",
        "name": "quads_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if two quads intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two quads intersect.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "q1": {
            "type": "quad",
            "description": "The first quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q2": {
            "type": "quad",
            "description": "The second quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function QuadsIntersect(const q1: Quad; const q2: Quad): Boolean",
          "cpp": "bool quads_intersect(const quad &q1, const quad &q2)"
        }
      },
      {
        "signature": "void set_quad_point(quad &q,int idx,const point_2d &value);",
        "name": "set_quad_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change a point in a quad.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "q": {
            "type": "quad",
            "description": "The quad to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the point: 0 is top left, 1 is top right, 2 is\nbottom left, and 3 is bottom right",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "point_2d",
            "description": "The new value for that point in the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "procedure SetQuadPoint(var q: Quad; idx: Integer; const value: Point2d)",
          "cpp": "void set_quad_point(quad &q, int idx, const point_2d &value)"
        }
      },
      {
        "signature": "vector<triangle> triangles_from(const quad &q);",
        "name": "triangles_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the two triangles that make up a quad in a vector.",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "A vector with the two triangles from the quad.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "triangle"
        },
        "parameters": {
          "q": {
            "type": "quad",
            "description": "The quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TrianglesFrom(const q: Quad): ArrayOfTriangle",
          "cpp": "vector<triangle> triangles_from(const quad &q)"
        }
      },
      {
        "signature": "rectangle inset_rectangle(const rectangle &rect,float inset_amount);",
        "name": "inset_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a rectangle that is inset an amount from a given rectangle.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A new rectangle created inset from `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to inset",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "inset_amount": {
            "type": "float",
            "description": "The amount to inset the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function InsetRectangle(const rect: Rectangle; insetAmount: Single): Rectangle",
          "cpp": "rectangle inset_rectangle(const rectangle &rect, float inset_amount)"
        }
      },
      {
        "signature": "rectangle intersection(const rectangle &rect1,const rectangle &rect2);",
        "name": "intersection",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that represents the intersection of two rectangles.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The intersection of rect1 and rect2.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "The first rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect2": {
            "type": "rectangle",
            "description": "The second rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function Intersection(const rect1: Rectangle; const rect2: Rectangle): Rectangle",
          "cpp": "rectangle intersection(const rectangle &rect1, const rectangle &rect2)"
        }
      },
      {
        "signature": "rectangle rectangle_around(const triangle &t);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given triangle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the triangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "t": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleAround(const t: Triangle): Rectangle",
          "cpp": "rectangle rectangle_around(const triangle &t)"
        }
      },
      {
        "signature": "rectangle rectangle_around(const circle &c);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given circle",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleAround(const c: Circle): Rectangle",
          "cpp": "rectangle rectangle_around(const circle &c)"
        }
      },
      {
        "signature": "rectangle rectangle_around(const line &l);",
        "name": "rectangle_around",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that surrounds a given line segment",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle that will surround the line",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleAround(const l: Line): Rectangle",
          "cpp": "rectangle rectangle_around(const line &l)"
        }
      },
      {
        "signature": "float rectangle_bottom(const rectangle &rect);",
        "name": "rectangle_bottom",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the bottom of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the top of the screen to the bottom of\nthe rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleBottom(const rect: Rectangle): Single",
          "cpp": "float rectangle_bottom(const rectangle &rect)"
        }
      },
      {
        "signature": "point_2d rectangle_center(const rectangle &rect);",
        "name": "rectangle_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of a given rectangle",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleCenter(const rect: Rectangle): Point2d",
          "cpp": "point_2d rectangle_center(const rectangle &rect)"
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt,const float width,const float height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle at the specified point with a given width and height",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the specified dimensions and location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The origin for the rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "Its width",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "Its height",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleFrom(pt: Point2d; width: Single; height: Single): Rectangle",
          "cpp": "rectangle rectangle_from(const point_2d pt, const float width, const float height)"
        }
      },
      {
        "signature": "rectangle rectangle_from(const point_2d pt1,const point_2d pt2);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle enclosing the two points.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt1": {
            "type": "point_2d",
            "description": "The first point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The second point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleFrom(pt1: Point2d; pt2: Point2d): Rectangle",
          "cpp": "rectangle rectangle_from(const point_2d pt1, const point_2d pt2)"
        }
      },
      {
        "signature": "rectangle rectangle_from(float x,float y,float width,float height);",
        "name": "rectangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the specified dimensions and location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The x coordinate of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y coordinate of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleFrom(x: Single; y: Single; width: Single; height: Single): Rectangle",
          "cpp": "rectangle rectangle_from(float x, float y, float width, float height)"
        }
      },
      {
        "signature": "float rectangle_left(const rectangle &rect);",
        "name": "rectangle_left",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the left edge of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the left of the screen to the left side of\nthe rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleLeft(const rect: Rectangle): Single",
          "cpp": "float rectangle_left(const rectangle &rect)"
        }
      },
      {
        "signature": "rectangle rectangle_offset_by(const rectangle &rect,const vector_2d &offset);",
        "name": "rectangle_offset_by",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that is moved by the provided vector.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A new rectangle that represents the original rectangle\nafter being moved by the offset vector.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The original rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount and direction for the rectangle to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleOffsetBy(const rect: Rectangle; const offset: Vector2d): Rectangle",
          "cpp": "rectangle rectangle_offset_by(const rectangle &rect, const vector_2d &offset)"
        }
      },
      {
        "signature": "float rectangle_right(const rectangle &rect);",
        "name": "rectangle_right",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the right edge of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance from the left of the screen to the right side\nof the rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleRight(const rect: Rectangle): Single",
          "cpp": "float rectangle_right(const rectangle &rect)"
        }
      },
      {
        "signature": "string rectangle_to_string(const rectangle &rect);",
        "name": "rectangle_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text representation of the passed in rectangle.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the rectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleToString(const rect: Rectangle): String",
          "cpp": "string rectangle_to_string(const rectangle &rect)"
        }
      },
      {
        "signature": "float rectangle_top(const rectangle &rect);",
        "name": "rectangle_top",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The top of the rectangle.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Its distance from the top of the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectangleTop(const rect: Rectangle): Single",
          "cpp": "float rectangle_top(const rectangle &rect)"
        }
      },
      {
        "signature": "bool rectangles_intersect(const rectangle &rect1,const rectangle &rect2);",
        "name": "rectangles_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two rectangles intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when rect1 and rect2 intersect.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect1": {
            "type": "rectangle",
            "description": "The first rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect2": {
            "type": "rectangle",
            "description": "The second rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function RectanglesIntersect(const rect1: Rectangle; const rect2: Rectangle): Boolean",
          "cpp": "bool rectangles_intersect(const rectangle &rect1, const rectangle &rect2)"
        }
      },
      {
        "signature": "point_2d triangle_barycenter(const triangle &tri);",
        "name": "triangle_barycenter",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the barycenter of the triangle. This is one way of calculating the\ncenter point of a triangle.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The point that is the barycenter of `tri`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle to get the center of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TriangleBarycenter(const tri: Triangle): Point2d",
          "cpp": "point_2d triangle_barycenter(const triangle &tri)"
        }
      },
      {
        "signature": "triangle triangle_from(const point_2d &p1,const point_2d &p2,const point_2d &p3);",
        "name": "triangle_from",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generate a triangle from a set of points.",
        "brief": null,
        "return": {
          "type": "triangle",
          "description": "A triangle with the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The first point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p2": {
            "type": "point_2d",
            "description": "The second point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "p3": {
            "type": "point_2d",
            "description": "The third point of the triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TriangleFrom(const p1: Point2d; const p2: Point2d; const p3: Point2d): Triangle",
          "cpp": "triangle triangle_from(const point_2d &p1, const point_2d &p2, const point_2d &p3)"
        }
      },
      {
        "signature": "triangle triangle_from(float x1,float y1,float x2,float y2,float x3,float y3);",
        "name": "triangle_from",
        "method_name": null,
        "unique_global_name": "triangle_from__from_coordinates",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generate a triangle from a set of points.",
        "brief": null,
        "return": {
          "type": "triangle",
          "description": "A triangle at the indicated points",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x1": {
            "type": "float",
            "description": "The x coordinate for the first point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The y coordinate for the first point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The x coordinate for the second point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The y coordinate for the second point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "float",
            "description": "The x coordinate for the third point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "float",
            "description": "The y coordinate for the third point",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_from_coordinates",
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TriangleFrom(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single): Triangle",
          "cpp": "triangle triangle_from(float x1, float y1, float x2, float y2, float x3, float y3)"
        }
      },
      {
        "signature": "bool triangle_rectangle_intersect(const triangle &tri,const rectangle &rect);",
        "name": "triangle_rectangle_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the triangle intersects with the rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the triangle and rect intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TriangleRectangleIntersect(const tri: Triangle; const rect: Rectangle): Boolean",
          "cpp": "bool triangle_rectangle_intersect(const triangle &tri, const rectangle &rect)"
        }
      },
      {
        "signature": "string triangle_to_string(const triangle &tri);",
        "name": "triangle_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a text description of the triangle.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A text description of the triangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tri": {
            "type": "triangle",
            "description": "The triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TriangleToString(const tri: Triangle): String",
          "cpp": "string triangle_to_string(const triangle &tri)"
        }
      },
      {
        "signature": "bool triangles_intersect(const triangle &t1,const triangle &t2);",
        "name": "triangles_intersect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the two triangles intersect.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two triangles intersect",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "t1": {
            "type": "triangle",
            "description": "The first triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "t2": {
            "type": "triangle",
            "description": "The other triangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "geometry",
          "static": "geometry"
        },
        "signatures": {
          "pascal": "function TrianglesIntersect(const t1: Triangle; const t2: Triangle): Boolean",
          "cpp": "bool triangles_intersect(const triangle &t1, const triangle &t2)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "graphics": {
    "brief": "SplashKit Images allow drawing of bitmaps and sprites to graphic windows.SplashKit Text allows for drawing text in a variety of ways to\ngraphic windows.Window Manager in SplashKit can be used create, and manipulate\ngraphics windows",
    "description": "",
    "functions": [
      {
        "signature": "void draw_circle(color clr,const circle &c);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawCircle(clr: Color; const c: Circle)",
          "cpp": "void draw_circle(color clr, const circle &c)"
        }
      },
      {
        "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawCircle(clr: Color; const c: Circle; opts: DrawingOptions)",
          "cpp": "void draw_circle(color clr, const circle &c, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_circle(color clr,float x,float y,float radius);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawCircle(clr: Color; x: Single; y: Single; radius: Single)",
          "cpp": "void draw_circle(color clr, float x, float y, float radius)"
        }
      },
      {
        "signature": "void draw_circle(color clr,float x,float y,float radius,drawing_options opts);",
        "name": "draw_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawCircle(clr: Color; x: Single; y: Single; radius: Single; opts: DrawingOptions)",
          "cpp": "void draw_circle(color clr, float x, float y, float radius, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillCircle(clr: Color; const c: Circle)",
          "cpp": "void fill_circle(color clr, const circle &c)"
        }
      },
      {
        "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle being drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillCircle(clr: Color; const c: Circle; opts: DrawingOptions)",
          "cpp": "void fill_circle(color clr, const circle &c, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_circle(color clr,float x,float y,float radius);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillCircle(clr: Color; x: Single; y: Single; radius: Single)",
          "cpp": "void fill_circle(color clr, float x, float y, float radius)"
        }
      },
      {
        "signature": "void fill_circle(color clr,float x,float y,float radius,drawing_options opts);",
        "name": "fill_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Drawing options to configure the drawing operation",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillCircle(clr: Color; x: Single; y: Single; radius: Single; opts: DrawingOptions)",
          "cpp": "void fill_circle(color clr, float x, float y, float radius, drawing_options opts)"
        }
      },
      {
        "signature": "rectangle current_clip();",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for the current window",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function CurrentClip(): Rectangle",
          "cpp": "rectangle current_clip()"
        }
      },
      {
        "signature": "rectangle current_clip(bitmap bmp);",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for a bitmap",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the clipping rectangle from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function CurrentClip(bmp: Bitmap): Rectangle",
          "cpp": "rectangle current_clip(bitmap bmp)"
        }
      },
      {
        "signature": "rectangle current_clip(window wnd);",
        "name": "current_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle of the current clip area for a window",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current clipping rectangle for the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the clipping rectangle from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function CurrentClip(wnd: Window): Rectangle",
          "cpp": "rectangle current_clip(window wnd)"
        }
      },
      {
        "signature": "void pop_clip(window wnd);",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the window. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PopClip(wnd: Window)",
          "cpp": "void pop_clip(window wnd)"
        }
      },
      {
        "signature": "void pop_clip();",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the current window. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PopClip()",
          "cpp": "void pop_clip()"
        }
      },
      {
        "signature": "void pop_clip(bitmap bmp);",
        "name": "pop_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the last clipping rectangle pushed to the bitmap. This\nwill then apply the previously pushed clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PopClip(bmp: Bitmap)",
          "cpp": "void pop_clip(bitmap bmp)"
        }
      },
      {
        "signature": "void push_clip(window wnd,const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Add the clipping rectangle of a window and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to add clipping to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PushClip(wnd: Window; const r: Rectangle)",
          "cpp": "void push_clip(window wnd, const rectangle &r)"
        }
      },
      {
        "signature": "void push_clip(bitmap bmp,const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Add the clipping rectangle of a bitmap and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to add clipping to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PushClip(bmp: Bitmap; const r: Rectangle)",
          "cpp": "void push_clip(bitmap bmp, const rectangle &r)"
        }
      },
      {
        "signature": "void push_clip(const rectangle &r);",
        "name": "push_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Push a clip rectangle to the current window. The resulting clipping\nrectangle will be the intersection of the existing clipping rectangle\nwith the new rectangle provided in this call. This can be undone using\n`pop_clip`.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure PushClip(const r: Rectangle)",
          "cpp": "void push_clip(const rectangle &r)"
        }
      },
      {
        "signature": "void reset_clip(bitmap bmp);",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle on a bitmap. This will clear all\nof the clipping rectangles pushed to the bitmap.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to clear the clipping rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure ResetClip(bmp: Bitmap)",
          "cpp": "void reset_clip(bitmap bmp)"
        }
      },
      {
        "signature": "void reset_clip();",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle of the current window. This will clear all\nof the clipping rectangles pushed to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure ResetClip()",
          "cpp": "void reset_clip()"
        }
      },
      {
        "signature": "void reset_clip(window wnd);",
        "name": "reset_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reset the clipping rectangle on a window. This will clear all\nof the clipping rectangles pushed to the window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to clear the clipping rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure ResetClip(wnd: Window)",
          "cpp": "void reset_clip(window wnd)"
        }
      },
      {
        "signature": "void set_clip(const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the current window. This will clear any\nexisting clipping rectangles pushed to the current window, and use the\nsupplied rectangle for clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure SetClip(const r: Rectangle)",
          "cpp": "void set_clip(const rectangle &r)"
        }
      },
      {
        "signature": "void set_clip(bitmap bmp,const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the bitmap. This will clear any existing\nclipping rectangles pushed to the bitmap, and use the supplied rectangle\nfor clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure SetClip(bmp: Bitmap; const r: Rectangle)",
          "cpp": "void set_clip(bitmap bmp, const rectangle &r)"
        }
      },
      {
        "signature": "void set_clip(window wnd,const rectangle &r);",
        "name": "set_clip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the clip rectangle of the window. This will clear any existing\nclipping rectangles pushed to the window, and use the supplied rectangle\nfor clipping.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "r": {
            "type": "rectangle",
            "description": "The new clipping rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure SetClip(wnd: Window; const r: Rectangle)",
          "cpp": "void set_clip(window wnd, const rectangle &r)"
        }
      },
      {
        "signature": "drawing_options option_defaults();",
        "name": "option_defaults",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `drawing_options` with default values.\nThis will draw to the current window, with default scale of 1, no\nrotation or offset, not flipped, drawing whole images, with default\ncamera mechanisms and line width.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A default drawing options.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionDefaults(): DrawingOptions",
          "cpp": "drawing_options option_defaults()"
        }
      },
      {
        "signature": "drawing_options option_draw_to(bitmap dest);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Drawing options that will draw onto a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "bitmap",
            "description": "The bitmap to draw to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionDrawTo(dest: Bitmap): DrawingOptions",
          "cpp": "drawing_options option_draw_to(bitmap dest)"
        }
      },
      {
        "signature": "drawing_options option_draw_to(bitmap dest,drawing_options opts);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Drawing options that will draw onto a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "bitmap",
            "description": "The bitmap to draw to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionDrawTo(dest: Bitmap; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_draw_to(bitmap dest, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_draw_to(window dest);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a specified Window. Pass dest the Window you want to draw on.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw to the indicated window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "window",
            "description": "The window to draw onto.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionDrawTo(dest: Window): DrawingOptions",
          "cpp": "drawing_options option_draw_to(window dest)"
        }
      },
      {
        "signature": "drawing_options option_draw_to(window dest,drawing_options opts);",
        "name": "option_draw_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on to.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw to the indicated window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dest": {
            "type": "window",
            "description": "The window to draw onto.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionDrawTo(dest: Window; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_draw_to(window dest, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_flip_x();",
        "name": "option_flip_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip an image along its X axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps horizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipX(): DrawingOptions",
          "cpp": "drawing_options option_flip_x()"
        }
      },
      {
        "signature": "drawing_options option_flip_x(drawing_options opts);",
        "name": "option_flip_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip an image along its X axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps horizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipX(opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_flip_x(drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_flip_xy();",
        "name": "option_flip_xy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along both X and Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipXy(): DrawingOptions",
          "cpp": "drawing_options option_flip_xy()"
        }
      },
      {
        "signature": "drawing_options option_flip_xy(drawing_options opts);",
        "name": "option_flip_xy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along both X and Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipXy(opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_flip_xy(drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_flip_y();",
        "name": "option_flip_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along its Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps vertically.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipY(): DrawingOptions",
          "cpp": "drawing_options option_flip_y()"
        }
      },
      {
        "signature": "drawing_options option_flip_y(drawing_options opts);",
        "name": "option_flip_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to flip the drawing of an image along its Y axis.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will flip bitmaps vertically.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionFlipY(opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_flip_y(drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_line_width(int width);",
        "name": "option_line_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to change the width of line drawings.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw lines with the indicated width.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "The new line width for line drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionLineWidth(width: Integer): DrawingOptions",
          "cpp": "drawing_options option_line_width(int width)"
        }
      },
      {
        "signature": "drawing_options option_line_width(int width,drawing_options opts);",
        "name": "option_line_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to change the width of line drawings.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw lines with the indicated width.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "The new line width for line drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionLineWidth(width: Integer; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_line_width(int width, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_part_bmp(float x,float y,float w,float h);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only a part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The x coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "w": {
            "type": "float",
            "description": "The width of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "h": {
            "type": "float",
            "description": "The height of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionPartBmp(x: Single; y: Single; w: Single; h: Single): DrawingOptions",
          "cpp": "drawing_options option_part_bmp(float x, float y, float w, float h)"
        }
      },
      {
        "signature": "drawing_options option_part_bmp(float x,float y,float w,float h,drawing_options opts);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only a part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The x coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y coordinate of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "w": {
            "type": "float",
            "description": "The width of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "h": {
            "type": "float",
            "description": "The height of the part within the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionPartBmp(x: Single; y: Single; w: Single; h: Single; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_part_bmp(float x, float y, float w, float h, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_part_bmp(rectangle part);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "part": {
            "type": "rectangle",
            "description": "The rectangle of the part of the bitmap to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionPartBmp(part: Rectangle): DrawingOptions",
          "cpp": "drawing_options option_part_bmp(rectangle part)"
        }
      },
      {
        "signature": "drawing_options option_part_bmp(rectangle part,drawing_options opts);",
        "name": "option_part_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw only part of a bitmap.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options to draw parts of a bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "part": {
            "type": "rectangle",
            "description": "The rectangle of the part of the bitmap to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionPartBmp(part: Rectangle; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_part_bmp(rectangle part, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(float angle);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate a bitmap around its centre point.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around its center point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionRotateBmp(angle: Single): DrawingOptions",
          "cpp": "drawing_options option_rotate_bmp(float angle)"
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(float angle,drawing_options opts);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate a bitmap around its centre point.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around its center point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionRotateBmp(angle: Single; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_rotate_bmp(float angle, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(float angle,float anchor_x,float anchor_y);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around an anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_x": {
            "type": "float",
            "description": "The x location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_y": {
            "type": "float",
            "description": "The y location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionRotateBmp(angle: Single; anchorX: Single; anchorY: Single): DrawingOptions",
          "cpp": "drawing_options option_rotate_bmp(float angle, float anchor_x, float anchor_y)"
        }
      },
      {
        "signature": "drawing_options option_rotate_bmp(float angle,float anchor_x,float anchor_y,drawing_options opts);",
        "name": "option_rotate_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will rotate bitmaps around an anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "The angle to rotate bitmaps.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_x": {
            "type": "float",
            "description": "The x location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_y": {
            "type": "float",
            "description": "The y location of the anchor within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionRotateBmp(angle: Single; anchorX: Single; anchorY: Single; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_rotate_bmp(float angle, float anchor_x, float anchor_y, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_scale_bmp(float scale_x,float scale_y);",
        "name": "option_scale_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will scale bitmaps along the x,y axis.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale_x": {
            "type": "float",
            "description": "The amount to scale bitmaps aalong the x axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "float",
            "description": "The amount to scale bitmaps aalong the y axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionScaleBmp(scaleX: Single; scaleY: Single): DrawingOptions",
          "cpp": "drawing_options option_scale_bmp(float scale_x, float scale_y)"
        }
      },
      {
        "signature": "drawing_options option_scale_bmp(float scale_x,float scale_y,drawing_options opts);",
        "name": "option_scale_bmp",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.\nPass opts the other options you want use.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will scale bitmaps along the x,y axis.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale_x": {
            "type": "float",
            "description": "The amount to scale bitmaps aalong the x axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "float",
            "description": "The amount to scale bitmaps aalong the y axis",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionScaleBmp(scaleX: Single; scaleY: Single; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_scale_bmp(float scale_x, float scale_y, drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_to_screen();",
        "name": "option_to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw to the surface without camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionToScreen(): DrawingOptions",
          "cpp": "drawing_options option_to_screen()"
        }
      },
      {
        "signature": "drawing_options option_to_screen(drawing_options opts);",
        "name": "option_to_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw to the surface without camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionToScreen(opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_to_screen(drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_to_world();",
        "name": "option_to_world",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw with camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionToWorld(): DrawingOptions",
          "cpp": "drawing_options option_to_world()"
        }
      },
      {
        "signature": "drawing_options option_to_world(drawing_options opts);",
        "name": "option_to_world",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "Options that will draw with camera effects.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "opts": {
            "type": "drawing_options",
            "description": "Values for the other options.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionToWorld(opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_to_world(drawing_options opts)"
        }
      },
      {
        "signature": "drawing_options option_with_animation(animation anim);",
        "name": "option_with_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the current cell from the\nanimation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation with the cell details to be used.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionWithAnimation(anim: Animation): DrawingOptions",
          "cpp": "drawing_options option_with_animation(animation anim)"
        }
      },
      {
        "signature": "drawing_options option_with_animation(animation anim,drawing_options opts);",
        "name": "option_with_animation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn. This extends the passed in drawing options with\nthe animation details.",
        "brief": null,
        "return": {
          "type": "drawing_options",
          "description": "A drawing option that will draw the current cell from the\nanimation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "anim": {
            "type": "animation",
            "description": "The animation with the cell details to be used.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The existing options to extend.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function OptionWithAnimation(anim: Animation; opts: DrawingOptions): DrawingOptions",
          "cpp": "drawing_options option_with_animation(animation anim, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_ellipse(color clr,const rectangle rect);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawEllipse(clr: Color; rect: Rectangle)",
          "cpp": "void draw_ellipse(color clr, const rectangle rect)"
        }
      },
      {
        "signature": "void draw_ellipse(color clr,const rectangle rect,drawing_options opts);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)",
          "cpp": "void draw_ellipse(color clr, const rectangle rect, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_ellipse(color clr,float x,float y,float width,float height);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawEllipse(clr: Color; x: Single; y: Single; width: Single; height: Single)",
          "cpp": "void draw_ellipse(color clr, float x, float y, float width, float height)"
        }
      },
      {
        "signature": "void draw_ellipse(color clr,float x,float y,float width,float height,drawing_options opts);",
        "name": "draw_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawEllipse(clr: Color; x: Single; y: Single; width: Single; height: Single; opts: DrawingOptions)",
          "cpp": "void draw_ellipse(color clr, float x, float y, float width, float height, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_ellipse(color clr,const rectangle rect);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillEllipse(clr: Color; rect: Rectangle)",
          "cpp": "void fill_ellipse(color clr, const rectangle rect)"
        }
      },
      {
        "signature": "void fill_ellipse(color clr,const rectangle rect,drawing_options opts);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "Indicates the location and size of the ellipse",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)",
          "cpp": "void fill_ellipse(color clr, const rectangle rect, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_ellipse(color clr,float x,float y,float width,float height);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, and size.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillEllipse(clr: Color; x: Single; y: Single; width: Single; height: Single)",
          "cpp": "void fill_ellipse(color clr, float x, float y, float width, float height)"
        }
      },
      {
        "signature": "void fill_ellipse(color clr,float x,float y,float width,float height,drawing_options opts);",
        "name": "fill_ellipse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills an ellipse using the provided location, size, and drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the ellipse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillEllipse(clr: Color; x: Single; y: Single; width: Single; height: Single; opts: DrawingOptions)",
          "cpp": "void fill_ellipse(color clr, float x, float y, float width, float height, drawing_options opts)"
        }
      },
      {
        "signature": "void clear_screen();",
        "name": "clear_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clears the current screen to color white.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure ClearScreen()",
          "cpp": "void clear_screen()"
        }
      },
      {
        "signature": "void clear_screen(color clr);",
        "name": "clear_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Clears all open windows to the `clr` provided.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color to clear the screen's background color to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure ClearScreen(clr: Color)",
          "cpp": "void clear_screen(color clr)"
        }
      },
      {
        "signature": "display display_details(unsigned int index);",
        "name": "display_details",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the details about one of the displays attached to the computer.",
        "brief": null,
        "return": {
          "type": "display",
          "description": "The details of this display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "index": {
            "type": "unsigned int",
            "description": "The display number (from 0 to `number_of_displays` - 1)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayDetails(index: Cardinal): Display",
          "cpp": "display display_details(unsigned int index)"
        }
      },
      {
        "signature": "int display_height(display disp);",
        "name": "display_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the height of the display in pixels, read from the system details.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayHeight(disp: Display): Integer",
          "cpp": "int display_height(display disp)"
        }
      },
      {
        "signature": "string display_name(display disp);",
        "name": "display_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the name of the display, read from the system details.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayName(disp: Display): String",
          "cpp": "string display_name(display disp)"
        }
      },
      {
        "signature": "int display_width(display disp);",
        "name": "display_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return the width of the display in pixels, read from the system details.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayWidth(disp: Display): Integer",
          "cpp": "int display_width(display disp)"
        }
      },
      {
        "signature": "int display_x(display disp);",
        "name": "display_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a relative x location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The x location of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayX(disp: Display): Integer",
          "cpp": "int display_x(display disp)"
        }
      },
      {
        "signature": "int display_y(display disp);",
        "name": "display_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a relative y location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The y location of the display",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "disp": {
            "type": "display",
            "description": "The display details",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function DisplayY(disp: Display): Integer",
          "cpp": "int display_y(display disp)"
        }
      },
      {
        "signature": "int number_of_displays();",
        "name": "number_of_displays",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of physical displays attached to the computer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of displays attached to the computer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function NumberOfDisplays(): Integer",
          "cpp": "int number_of_displays()"
        }
      },
      {
        "signature": "void refresh_screen();",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Refreshes the current drawing on all open windows.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure RefreshScreen()",
          "cpp": "void refresh_screen()"
        }
      },
      {
        "signature": "void refresh_screen(unsigned int target_fps);",
        "name": "refresh_screen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "target_fps": {
            "type": "unsigned int",
            "description": "The targeted frames per second to refresh the screen at.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure RefreshScreen(targetFps: Cardinal)",
          "cpp": "void refresh_screen(unsigned int target_fps)"
        }
      },
      {
        "signature": "void save_bitmap(bitmap bmp,const string &basename);",
        "name": "save_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Save the bitmap to the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to save",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure SaveBitmap(bmp: Bitmap; const basename: String)",
          "cpp": "void save_bitmap(bitmap bmp, const string &basename)"
        }
      },
      {
        "signature": "int screen_height();",
        "name": "screen_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function ScreenHeight(): Integer",
          "cpp": "int screen_height()"
        }
      },
      {
        "signature": "int screen_width();",
        "name": "screen_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function ScreenWidth(): Integer",
          "cpp": "int screen_width()"
        }
      },
      {
        "signature": "void take_screenshot(const string &basename);",
        "name": "take_screenshot",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure TakeScreenshot(const basename: String)",
          "cpp": "void take_screenshot(const string &basename)"
        }
      },
      {
        "signature": "void take_screenshot(window wind,const string &basename);",
        "name": "take_screenshot",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to capture in the screenshot",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "basename": {
            "type": "string",
            "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure TakeScreenshot(wind: Window; const basename: String)",
          "cpp": "void take_screenshot(window wind, const string &basename)"
        }
      },
      {
        "signature": "point_2d bitmap_cell_center(bitmap bmp);",
        "name": "bitmap_cell_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point in the center of a cell for this bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the center of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellCenter(bmp: Bitmap): Point2d",
          "cpp": "point_2d bitmap_cell_center(bitmap bmp)"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,float x,float y);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The the x location of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The the y location of the bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellCircle(bmp: Bitmap; x: Single; y: Single): Circle",
          "cpp": "circle bitmap_cell_circle(bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point indicating the location of the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellCircle(bmp: Bitmap; pt: Point2d): Circle",
          "cpp": "circle bitmap_cell_circle(bitmap bmp, const point_2d pt)"
        }
      },
      {
        "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt,float scale);",
        "name": "bitmap_cell_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that will encompass the bitmap cell.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point indicating the location of the bitmap.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale": {
            "type": "float",
            "description": "The scaling factor for the bitmap drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellCircle(bmp: Bitmap; pt: Point2d; scale: Single): Circle",
          "cpp": "circle bitmap_cell_circle(bitmap bmp, const point_2d pt, float scale)"
        }
      },
      {
        "signature": "int bitmap_cell_columns(bitmap bmp);",
        "name": "bitmap_cell_columns",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of cell columns",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellColumns(bmp: Bitmap): Integer",
          "cpp": "int bitmap_cell_columns(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_cell_count(bitmap bmp);",
        "name": "bitmap_cell_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of cells within the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of individual cells within the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellCount(bmp: Bitmap): Integer",
          "cpp": "int bitmap_cell_count(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_cell_height(bitmap bmp);",
        "name": "bitmap_cell_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of each cells in bmp",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellHeight(bmp: Bitmap): Integer",
          "cpp": "int bitmap_cell_height(bitmap bmp)"
        }
      },
      {
        "signature": "vector_2d bitmap_cell_offset(bitmap src,int cell);",
        "name": "bitmap_cell_offset",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset needed to get to the cell from the top left of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap with the cell details.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The index of the cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellOffset(src: Bitmap; cell: Integer): Vector2d",
          "cpp": "vector_2d bitmap_cell_offset(bitmap src, int cell)"
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src);",
        "name": "bitmap_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass a cell of the bitmap.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with width and height from the bitmap's cell details.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap to get the details from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellRectangle(src: Bitmap): Rectangle",
          "cpp": "rectangle bitmap_cell_rectangle(bitmap src)"
        }
      },
      {
        "signature": "rectangle bitmap_cell_rectangle(bitmap src,const point_2d &pt);",
        "name": "bitmap_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle at pt, with width and height from the bitmap's cell details.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap to get the details from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point details for the rectangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellRectangle(src: Bitmap; const pt: Point2d): Rectangle",
          "cpp": "rectangle bitmap_cell_rectangle(bitmap src, const point_2d &pt)"
        }
      },
      {
        "signature": "int bitmap_cell_rows(bitmap bmp);",
        "name": "bitmap_cell_rows",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of rows of cells in the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellRows(bmp: Bitmap): Integer",
          "cpp": "int bitmap_cell_rows(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_cell_width(bitmap bmp);",
        "name": "bitmap_cell_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of each cell in this bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of each cells in bmp",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCellWidth(bmp: Bitmap): Integer",
          "cpp": "int bitmap_cell_width(bitmap bmp)"
        }
      },
      {
        "signature": "point_2d bitmap_center(bitmap bmp);",
        "name": "bitmap_center",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This returns a point that represents the center of the bitmap in local\nspace.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A point in the center of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the center of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCenter(bmp: Bitmap): Point2d",
          "cpp": "point_2d bitmap_center(bitmap bmp)"
        }
      },
      {
        "signature": "circle bitmap_circle(bitmap bmp,const point_2d &pt);",
        "name": "bitmap_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a circle that will encompass the entire bitamp.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A circle that surrounds the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to encompass.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is located.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapCircle(bmp: Bitmap; const pt: Point2d): Circle",
          "cpp": "circle bitmap_circle(bitmap bmp, const point_2d &pt)"
        }
      },
      {
        "signature": "string bitmap_filename(bitmap bmp);",
        "name": "bitmap_filename",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The file name of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the filename from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapFilename(bmp: Bitmap): String",
          "cpp": "string bitmap_filename(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_height(bitmap bmp);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapHeight(bmp: Bitmap): Integer",
          "cpp": "int bitmap_height(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_height(string name);",
        "name": "bitmap_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapHeight(name: String): Integer",
          "cpp": "int bitmap_height(string name)"
        }
      },
      {
        "signature": "string bitmap_name(bitmap bmp);",
        "name": "bitmap_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the name from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapName(bmp: Bitmap): String",
          "cpp": "string bitmap_name(bitmap bmp)"
        }
      },
      {
        "signature": "bitmap bitmap_named(string name);",
        "name": "bitmap_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap with the name specified, which may refer to nothing\nif the bitmap has not been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapNamed(name: String): Bitmap",
          "cpp": "bitmap bitmap_named(string name)"
        }
      },
      {
        "signature": "rectangle bitmap_rectangle(bitmap bmp);",
        "name": "bitmap_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that is the same size as a bitmap (the whole bitmap).",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the same size as the bitmap.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapRectangle(bmp: Bitmap): Rectangle",
          "cpp": "rectangle bitmap_rectangle(bitmap bmp)"
        }
      },
      {
        "signature": "rectangle bitmap_rectangle(bitmap bmp,float x,float y);",
        "name": "bitmap_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that is the same size as the bitmap and is located at\nthe indicated position.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle with the same size as the bitmap, at the\nindicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapRectangle(bmp: Bitmap; x: Single; y: Single): Rectangle",
          "cpp": "rectangle bitmap_rectangle(bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "rectangle bitmap_rectangle_of_cell(bitmap src,int cell);",
        "name": "bitmap_rectangle_of_cell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle that can be used to access the part of a bitmap\nrelated to an individual cell.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The area of the cell within the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapRectangleOfCell(src: Bitmap; cell: Integer): Rectangle",
          "cpp": "rectangle bitmap_rectangle_of_cell(bitmap src, int cell)"
        }
      },
      {
        "signature": "void bitmap_set_cell_details(bitmap bmp,int width,int height,int columns,int rows,int count);",
        "name": "bitmap_set_cell_details",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Initialise the bitmap cell details. This allows parts of the bitmap to be\ndrawn as individual cells.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of each cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of each cell",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "columns": {
            "type": "int",
            "description": "The number of cell columns within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rows": {
            "type": "int",
            "description": "The number of cell rows within the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "count": {
            "type": "int",
            "description": "The total number of cells, may be fewer than columns *\nrows",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure BitmapSetCellDetails(bmp: Bitmap; width: Integer; height: Integer; columns: Integer; rows: Integer; count: Integer)",
          "cpp": "void bitmap_set_cell_details(bitmap bmp, int width, int height, int columns, int rows, int count)"
        }
      },
      {
        "signature": "int bitmap_width(bitmap bmp);",
        "name": "bitmap_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapWidth(bmp: Bitmap): Integer",
          "cpp": "int bitmap_width(bitmap bmp)"
        }
      },
      {
        "signature": "int bitmap_width(string name);",
        "name": "bitmap_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the bitmap.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function BitmapWidth(name: String): Integer",
          "cpp": "int bitmap_width(string name)"
        }
      },
      {
        "signature": "void clear_bitmap(bitmap bmp,color clr);",
        "name": "clear_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The new color for the surface of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure ClearBitmap(bmp: Bitmap; clr: Color)",
          "cpp": "void clear_bitmap(bitmap bmp, color clr)"
        }
      },
      {
        "signature": "void clear_bitmap(string name,color clr);",
        "name": "clear_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The new color for the surface of the bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure ClearBitmap(name: String; clr: Color)",
          "cpp": "void clear_bitmap(string name, color clr)"
        }
      },
      {
        "signature": "bitmap create_bitmap(string name,int width,int height);",
        "name": "create_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new bitmap that you can draw to. Initially the bitmap will\nbe transparent.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "A new transparent bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource to be created. If this\nalready exists SplashKit will alter the name to make it\nunique.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of the created bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of the created bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function CreateBitmap(name: String; width: Integer; height: Integer): Bitmap",
          "cpp": "bitmap create_bitmap(string name, int width, int height)"
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,float x,float y);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure DrawBitmap(bmp: Bitmap; x: Single; y: Single)",
          "cpp": "void draw_bitmap(bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "void draw_bitmap(bitmap bmp,float x,float y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": "draw",
        "unique_global_name": "draw_bitmap_with_options",
        "unique_method_name": "draw_with_options",
        "suffix_name": null,
        "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "bitmap",
          "method": "draw",
          "self": "bmp",
          "suffix": "with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure DrawBitmap(bmp: Bitmap; x: Single; y: Single; opts: DrawingOptions)",
          "cpp": "void draw_bitmap(bitmap bmp, float x, float y, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_bitmap(string name,float x,float y);",
        "name": "draw_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_named",
        "unique_method_name": "draw_bitmap_named",
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "the name of the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "draw_bitmap",
          "suffix": "named",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure DrawBitmap(name: String; x: Single; y: Single)",
          "cpp": "void draw_bitmap(string name, float x, float y)"
        }
      },
      {
        "signature": "void draw_bitmap(string name,float x,float y,drawing_options opts);",
        "name": "draw_bitmap",
        "method_name": "draw_bitmap",
        "unique_global_name": "draw_bitmap_named_with_options",
        "unique_method_name": "draw_bitmap_named_with_options",
        "suffix_name": null,
        "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "the name of the bitmap which will be drawn to the screen",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "the x location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "the y location which represents where the bitmap\nwill be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "draw_bitmap",
          "suffix": "named_with_options",
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure DrawBitmap(name: String; x: Single; y: Single; opts: DrawingOptions)",
          "cpp": "void draw_bitmap(string name, float x, float y, drawing_options opts)"
        }
      },
      {
        "signature": "void free_all_bitmaps();",
        "name": "free_all_bitmaps",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free all of the loaded bitmap resources.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure FreeAllBitmaps()",
          "cpp": "void free_all_bitmaps()"
        }
      },
      {
        "signature": "void free_bitmap(bitmap to_delete);",
        "name": "free_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the bitmap resource.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_delete": {
            "type": "bitmap",
            "description": "The bitmap to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "procedure FreeBitmap(toDelete: Bitmap)",
          "cpp": "void free_bitmap(bitmap to_delete)"
        }
      },
      {
        "signature": "bool has_bitmap(string name);",
        "name": "has_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a bitmap loaded for the supplied name.\nThis checks against all bitmaps loaded.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if SplashKit has a bitmap with that name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function HasBitmap(name: String): Boolean",
          "cpp": "bool has_bitmap(string name)"
        }
      },
      {
        "signature": "bitmap load_bitmap(string name,string filename);",
        "name": "load_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads and returns a bitmap. The supplied `filename` is used to\nlocate the Bitmap to load. The supplied `name` indicates the\nname to use to refer to this Bitmap in SplashKit. The `bitmap` can then\nbe retrieved by passing this `name` to the `bitmap_named` function.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The loaded bitmap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource in SplashKit",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function LoadBitmap(name: String; filename: String): Bitmap",
          "cpp": "bitmap load_bitmap(string name, string filename)"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,const point_2d &pt);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap is drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point within the bitmap to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function PixelDrawnAtPoint(bmp: Bitmap; const pt: Point2d): Boolean",
          "cpp": "bool pixel_drawn_at_point(bitmap bmp, const point_2d &pt)"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,float x,float y);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap is drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function PixelDrawnAtPoint(bmp: Bitmap; x: Single; y: Single): Boolean",
          "cpp": "bool pixel_drawn_at_point(bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,const point_2d &pt);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The bitmap cell to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point within the bitmap to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; const pt: Point2d): Boolean",
          "cpp": "bool pixel_drawn_at_point(bitmap bmp, int cell, const point_2d &pt)"
        }
      },
      {
        "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,float x,float y);",
        "name": "pixel_drawn_at_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The bitmap cell to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y coordinate within the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "images"
        },
        "signatures": {
          "pascal": "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; x: Single; y: Single): Boolean",
          "cpp": "bool pixel_drawn_at_point(bitmap bmp, int cell, float x, float y)"
        }
      },
      {
        "signature": "void draw_line(color clr,const line &l);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws a line onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; const l: Line)",
          "cpp": "void draw_line(color clr, const line &l)"
        }
      },
      {
        "signature": "void draw_line(color clr,const line &l,drawing_options opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws a line.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line's details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; const l: Line; opts: DrawingOptions)",
          "cpp": "void draw_line(color clr, const line &l, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; const fromPt: Point2d; const toPt: Point2d)",
          "cpp": "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt)"
        }
      },
      {
        "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "from_pt": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "to_pt": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; const fromPt: Point2d; const toPt: Point2d; const opts: DrawingOptions)",
          "cpp": "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_line(color clr,float x1,float y1,float x2,float y2);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single)",
          "cpp": "void draw_line(color clr, float x1, float y1, float x2, float y2)"
        }
      },
      {
        "signature": "void draw_line(color clr,float x1,float y1,float x2,float y2,const drawing_options &opts);",
        "name": "draw_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a line from one point to another",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the first\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the second\npoint",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawLine(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single; const opts: DrawingOptions)",
          "cpp": "void draw_line(color clr, float x1, float y1, float x2, float y2, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_pixel(color clr,const point_2d &pt);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawPixel(clr: Color; const pt: Point2d)",
          "cpp": "void draw_pixel(color clr, const point_2d &pt)"
        }
      },
      {
        "signature": "void draw_pixel(color clr,const point_2d &pt,drawing_options opts);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel with the supplied options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location of the pixel to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawPixel(clr: Color; const pt: Point2d; opts: DrawingOptions)",
          "cpp": "void draw_pixel(color clr, const point_2d &pt, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_pixel(color clr,float x,float y);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top edge of the window to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawPixel(clr: Color; x: Single; y: Single)",
          "cpp": "void draw_pixel(color clr, float x, float y)"
        }
      },
      {
        "signature": "void draw_pixel(color clr,float x,float y,drawing_options opts);",
        "name": "draw_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws an individual pixel with the supplied options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the pixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left edge of the window/bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top edge of the window/bitmap to the\npixel",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawPixel(clr: Color; x: Single; y: Single; opts: DrawingOptions)",
          "cpp": "void draw_pixel(color clr, float x, float y, drawing_options opts)"
        }
      },
      {
        "signature": "color get_pixel(bitmap bmp,const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the location on the supplied\nbitmap.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(bmp: Bitmap; const pt: Point2d): Color",
          "cpp": "color get_pixel(bitmap bmp, const point_2d &pt)"
        }
      },
      {
        "signature": "color get_pixel(bitmap bmp,float x,float y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the supplied\nbitmap.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left edge of the bitmap to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the bitmap to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(bmp: Bitmap; x: Single; y: Single): Color",
          "cpp": "color get_pixel(bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "color get_pixel(const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(const pt: Point2d): Color",
          "cpp": "color get_pixel(const point_2d &pt)"
        }
      },
      {
        "signature": "color get_pixel(float x,float y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The distance from the left edge of the window to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(x: Single; y: Single): Color",
          "cpp": "color get_pixel(float x, float y)"
        }
      },
      {
        "signature": "color get_pixel(window wnd,const point_2d &pt);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the location on the supplied\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The position of the pixel",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(wnd: Window; const pt: Point2d): Color",
          "cpp": "color get_pixel(window wnd, const point_2d &pt)"
        }
      },
      {
        "signature": "color get_pixel(window wnd,float x,float y);",
        "name": "get_pixel",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the color of the pixel at the x,y location on the supplied\nwindow.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The color of the pixel at the supplied location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to get the color from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left edge of the window to the pixel\nto read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window to the pixel to read",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function GetPixel(wnd: Window; x: Single; y: Single): Color",
          "cpp": "color get_pixel(window wnd, float x, float y)"
        }
      },
      {
        "signature": "void draw_quad(color clr,const quad &q);",
        "name": "draw_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a quad to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawQuad(clr: Color; const q: Quad)",
          "cpp": "void draw_quad(color clr, const quad &q)"
        }
      },
      {
        "signature": "void draw_quad(color clr,const quad &q,const drawing_options &opts);",
        "name": "draw_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a quad using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawQuad(clr: Color; const q: Quad; const opts: DrawingOptions)",
          "cpp": "void draw_quad(color clr, const quad &q, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_rectangle(color clr,const rectangle &rect);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawRectangle(clr: Color; const rect: Rectangle)",
          "cpp": "void draw_rectangle(color clr, const rectangle &rect)"
        }
      },
      {
        "signature": "void draw_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)",
          "cpp": "void draw_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_rectangle(color clr,float x,float y,float width,float height);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawRectangle(clr: Color; x: Single; y: Single; width: Single; height: Single)",
          "cpp": "void draw_rectangle(color clr, float x, float y, float width, float height)"
        }
      },
      {
        "signature": "void draw_rectangle(color clr,float x,float y,float width,float height,const drawing_options &opts);",
        "name": "draw_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawRectangle(clr: Color; x: Single; y: Single; width: Single; height: Single; const opts: DrawingOptions)",
          "cpp": "void draw_rectangle(color clr, float x, float y, float width, float height, const drawing_options &opts)"
        }
      },
      {
        "signature": "void fill_quad(color clr,const quad &q);",
        "name": "fill_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a quad on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillQuad(clr: Color; const q: Quad)",
          "cpp": "void fill_quad(color clr, const quad &q)"
        }
      },
      {
        "signature": "void fill_quad(color clr,const quad &q,const drawing_options &opts);",
        "name": "fill_quad",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a quad using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the quad",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The details of the quad",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillQuad(clr: Color; const q: Quad; const opts: DrawingOptions)",
          "cpp": "void fill_quad(color clr, const quad &q, const drawing_options &opts)"
        }
      },
      {
        "signature": "void fill_rectangle(color clr,const rectangle &rect);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a rectangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillRectangle(clr: Color; const rect: Rectangle)",
          "cpp": "void fill_rectangle(color clr, const rectangle &rect)"
        }
      },
      {
        "signature": "void fill_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to draw",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)",
          "cpp": "void fill_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
        }
      },
      {
        "signature": "void fill_rectangle(color clr,float x,float y,float width,float height);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillRectangle(clr: Color; x: Single; y: Single; width: Single; height: Single)",
          "cpp": "void fill_rectangle(color clr, float x, float y, float width, float height)"
        }
      },
      {
        "signature": "void fill_rectangle(color clr,float x,float y,float width,float height,const drawing_options &opts);",
        "name": "fill_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a rectangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The distance from the left of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of the window/bitmap to the\nrectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillRectangle(clr: Color; x: Single; y: Single; width: Single; height: Single; const opts: DrawingOptions)",
          "cpp": "void fill_rectangle(color clr, float x, float y, float width, float height, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,float x,float y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_font_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "font_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Single; y: Single)",
          "cpp": "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, float x, float y)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,float x,float y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_with_options_font_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The name of the `font` which will be used to draw the text",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options_font_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Single; y: Single; const opts: DrawingOptions)",
          "cpp": "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, float x, float y, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,float x,float y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_no_font_no_size",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "no_font_no_size",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; x: Single; y: Single)",
          "cpp": "void draw_text(const string &text, const color &clr, float x, float y)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,float x,float y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_no_font_no_size_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "no_font_no_size_with_options",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; x: Single; y: Single; const opts: DrawingOptions)",
          "cpp": "void draw_text(const string &text, const color &clr, float x, float y, const drawing_options &opts)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,float x,float y);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font which will be drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Single; y: Single)",
          "cpp": "void draw_text(const string &text, const color &clr, font fnt, int font_size, float x, float y)"
        }
      },
      {
        "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,float x,float y,const drawing_options &opts);",
        "name": "draw_text",
        "method_name": null,
        "unique_global_name": "draw_text_with_options",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the currently focussed window.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to be written to the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "The desired `color` of the text to be written.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The `font` to be used to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the font.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location to draw the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The `drawing_options` which provide extra information for how to draw the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "with_options",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Single; y: Single; const opts: DrawingOptions)",
          "cpp": "void draw_text(const string &text, const color &clr, font fnt, int font_size, float x, float y, const drawing_options &opts)"
        }
      },
      {
        "signature": "bool font_has_size(const string &name,int font_size);",
        "name": "font_has_size",
        "method_name": "has_size",
        "unique_global_name": "font_has_size_name_as_string",
        "unique_method_name": "has_size_name_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has the supplied size.",
        "return": {
          "type": "bool",
          "description": "Returns true if there is a font with the supplied name that has the supplied size.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to be checked.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "has_size",
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function FontHasSize(const name: String; fontSize: Integer): Boolean",
          "cpp": "bool font_has_size(const string &name, int font_size)"
        }
      },
      {
        "signature": "bool font_has_size(font fnt,int font_size);",
        "name": "font_has_size",
        "method_name": "has_size",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has the supplied size.",
        "return": {
          "type": "bool",
          "description": "Returns true if the supplied `font` has the supplied size.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "has_size",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function FontHasSize(fnt: Font; fontSize: Integer): Boolean",
          "cpp": "bool font_has_size(font fnt, int font_size)"
        }
      },
      {
        "signature": "void font_load_size(const string &name,int font_size);",
        "name": "font_load_size",
        "method_name": "load_size",
        "unique_global_name": "font_load_size_name_as_string",
        "unique_method_name": "load_size_name_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new size for an already loaded `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to load the size for.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "load_size",
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure FontLoadSize(const name: String; fontSize: Integer)",
          "cpp": "void font_load_size(const string &name, int font_size)"
        }
      },
      {
        "signature": "void font_load_size(font fnt,int font_size);",
        "name": "font_load_size",
        "method_name": "load_size",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new size for an already loaded `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to load the size for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The desired size of the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "load_size",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure FontLoadSize(fnt: Font; fontSize: Integer)",
          "cpp": "void font_load_size(font fnt, int font_size)"
        }
      },
      {
        "signature": "font font_named(string name);",
        "name": "font_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Finds a loaded font that has the supplied name and returns it.",
        "return": {
          "type": "font",
          "description": "Returns the font that has the supplied name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font to find.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function FontNamed(name: String): Font",
          "cpp": "font font_named(string name)"
        }
      },
      {
        "signature": "void free_all_fonts();",
        "name": "free_all_fonts",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Frees all loaded fonts.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FreeAllFonts()",
          "cpp": "void free_all_fonts()"
        }
      },
      {
        "signature": "void free_font(font fnt);",
        "name": "free_font",
        "method_name": "free",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Frees a loaded font.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The font to be freed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "destructor": true,
          "method": "free",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure FreeFont(fnt: Font)",
          "cpp": "void free_font(font fnt)"
        }
      },
      {
        "signature": "font_style get_font_style(const string &name);",
        "name": "get_font_style",
        "method_name": "get_style",
        "unique_global_name": "get_font_style_name_as_string",
        "unique_method_name": "get_style_name_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Gets the font style for given `font`.",
        "return": {
          "type": "font_style",
          "description": "Returns the current `font_style` for the `font`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font to return the style of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "getter": true,
          "method": "get_style",
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function GetFontStyle(const name: String): FontStyle",
          "cpp": "font_style get_font_style(const string &name)"
        }
      },
      {
        "signature": "font_style get_font_style(font fnt);",
        "name": "get_font_style",
        "method_name": "get_style",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Gets the font style for given `font`.",
        "return": {
          "type": "font_style",
          "description": "Returns the current `font_style` for the `font`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to return the style of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "getter": true,
          "method": "get_style",
          "self": "fnt",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function GetFontStyle(fnt: Font): FontStyle",
          "cpp": "font_style get_font_style(font fnt)"
        }
      },
      {
        "signature": "bool has_font(font fnt);",
        "name": "has_font",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if the supplied `font` has been loaded.",
        "return": {
          "type": "bool",
          "description": "Returns true if the specified `font` is loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to check if loaded.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function HasFont(fnt: Font): Boolean",
          "cpp": "bool has_font(font fnt)"
        }
      },
      {
        "signature": "bool has_font(string name);",
        "name": "has_font",
        "method_name": null,
        "unique_global_name": "has_font_name_as_string",
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Checks if there exists a loaded font with the supplied name.",
        "return": {
          "type": "bool",
          "description": "Returns whether there is a loaded font with the supplied name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of `font` to check if loaded.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function HasFont(name: String): Boolean",
          "cpp": "bool has_font(string name)"
        }
      },
      {
        "signature": "font load_font(const string &name,const string &filename);",
        "name": "load_font",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Loads a new font from a file.",
        "return": {
          "type": "font",
          "description": "Returns a new `font` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to be loaded from file.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file to load the `font` from.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "constructor": true,
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "function LoadFont(const name: String; const filename: String): Font",
          "cpp": "font load_font(const string &name, const string &filename)"
        }
      },
      {
        "signature": "void set_font_style(const string &name,font_style style);",
        "name": "set_font_style",
        "method_name": "set_style",
        "unique_global_name": "set_font_style_name_as_string",
        "unique_method_name": "set_style_name_as_string",
        "suffix_name": null,
        "description": null,
        "brief": "Sets the style for a `font` by name.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the `font` to set the style of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "style": {
            "type": "font_style",
            "description": "The new style for the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "set_style",
          "setter": true,
          "suffix": "name_as_string",
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure SetFontStyle(const name: String; style: FontStyle)",
          "cpp": "void set_font_style(const string &name, font_style style)"
        }
      },
      {
        "signature": "void set_font_style(font fnt,font_style style);",
        "name": "set_font_style",
        "method_name": "set_style",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Sets the style for a `font`.",
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fnt": {
            "type": "font",
            "description": "The `font` to set the style of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "style": {
            "type": "font_style",
            "description": "The new style for the `font`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "font",
          "method": "set_style",
          "self": "fnt",
          "setter": true,
          "group": "graphics",
          "static": "text"
        },
        "signatures": {
          "pascal": "procedure SetFontStyle(fnt: Font; style: FontStyle)",
          "cpp": "void set_font_style(font fnt, font_style style)"
        }
      },
      {
        "signature": "int text_height(const string &text,const string& fnt,int font_size);",
        "name": "text_height",
        "method_name": "height",
        "unique_global_name": "text_height_font_named",
        "unique_method_name": "height_font_named",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the height of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the height of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "height",
          "static": "text",
          "suffix": "font_named",
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function TextHeight(const text: String; const fnt: String; fontSize: Integer): Integer",
          "cpp": "int text_height(const string &text, const string &fnt, int font_size)"
        }
      },
      {
        "signature": "int text_height(const string &text,font fnt,int font_size);",
        "name": "text_height",
        "method_name": "height",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Returns the height of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the height of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "height",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function TextHeight(const text: String; fnt: Font; fontSize: Integer): Integer",
          "cpp": "int text_height(const string &text, font fnt, int font_size)"
        }
      },
      {
        "signature": "int text_width(const string &text,const string& fnt,int font_size);",
        "name": "text_width",
        "method_name": "width",
        "unique_global_name": "text_width_font_named",
        "unique_method_name": "width_font_named",
        "suffix_name": null,
        "description": null,
        "brief": "Returns the width of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the width of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "string",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "width",
          "static": "text",
          "suffix": "font_named",
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function TextWidth(const text: String; const fnt: String; fontSize: Integer): Integer",
          "cpp": "int text_width(const string &text, const string &fnt, int font_size)"
        }
      },
      {
        "signature": "int text_width(const string &text,font fnt,int font_size);",
        "name": "text_width",
        "method_name": "width",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": null,
        "brief": "Returns the width of the supplied text string.",
        "return": {
          "type": "int",
          "description": "Returns the width of the text as an integer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text string to check the length of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font used for the text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "width",
          "static": "text",
          "group": "graphics"
        },
        "signatures": {
          "pascal": "function TextWidth(const text: String; fnt: Font; fontSize: Integer): Integer",
          "cpp": "int text_width(const string &text, font fnt, int font_size)"
        }
      },
      {
        "signature": "void draw_triangle(color clr,const triangle &tri);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawTriangle(clr: Color; const tri: Triangle)",
          "cpp": "void draw_triangle(color clr, const triangle &tri)"
        }
      },
      {
        "signature": "void draw_triangle(color clr,const triangle &tri,drawing_options opts);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)",
          "cpp": "void draw_triangle(color clr, const triangle &tri, drawing_options opts)"
        }
      },
      {
        "signature": "void draw_triangle(color clr,float x1,float y1,float x2,float y2,float x3,float y3);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle to the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "float",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawTriangle(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single)",
          "cpp": "void draw_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)"
        }
      },
      {
        "signature": "void draw_triangle(color clr,float x1,float y1,float x2,float y2,float x3,float y3,drawing_options opts);",
        "name": "draw_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure DrawTriangle(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; opts: DrawingOptions)",
          "cpp": "void draw_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_triangle(color clr,const triangle &tri);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw a triangle onto the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillTriangle(clr: Color; const tri: Triangle)",
          "cpp": "void fill_triangle(color clr, const triangle &tri)"
        }
      },
      {
        "signature": "void fill_triangle(color clr,const triangle &tri,drawing_options opts);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fill a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangles details",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)",
          "cpp": "void fill_triangle(color clr, const triangle &tri, drawing_options opts)"
        }
      },
      {
        "signature": "void fill_triangle(color clr,float x1,float y1,float x2,float y2,float x3,float y3);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a triangle on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "float",
            "description": "The distance from the left side of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "float",
            "description": "The distance from the top of the window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillTriangle(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single)",
          "cpp": "void fill_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)"
        }
      },
      {
        "signature": "void fill_triangle(color clr,float x1,float y1,float x2,float y2,float x3,float y3,drawing_options opts);",
        "name": "fill_triangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Fills a triangle using the supplied drawing options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x3": {
            "type": "float",
            "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y3": {
            "type": "float",
            "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "The drawing options",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics"
        },
        "signatures": {
          "pascal": "procedure FillTriangle(clr: Color; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; opts: DrawingOptions)",
          "cpp": "void fill_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3, drawing_options opts)"
        }
      },
      {
        "signature": "void clear_window(window wind,color clr);",
        "name": "clear_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "clears a window to the specified color given in `clr`",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to clear",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "clr": {
            "type": "color",
            "description": "the `color` to clear the window to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "self": "wind",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure ClearWindow(wind: Window; clr: Color)",
          "cpp": "void clear_window(window wind, color clr)"
        }
      },
      {
        "signature": "void close_all_windows();",
        "name": "close_all_windows",
        "method_name": "free_all_window",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the windows which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "window",
          "method": "free_all_window",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure CloseAllWindows()",
          "cpp": "void close_all_windows()"
        }
      },
      {
        "signature": "void close_window(const string &name);",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the graphics window identified by `name`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name (caption) of the window to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "destructor": true,
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure CloseWindow(const name: String)",
          "cpp": "void close_window(const string &name)"
        }
      },
      {
        "signature": "void close_window();",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure CloseWindow()",
          "cpp": "void close_window()"
        }
      },
      {
        "signature": "void close_window(window wind);",
        "name": "close_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes and frees the graphics window supplied in `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to close",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "destructor": true,
          "self": "wind",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure CloseWindow(wind: Window)",
          "cpp": "void close_window(window wind)"
        }
      },
      {
        "signature": "window current_window();",
        "name": "current_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the window that you are currently interacting with. This will be\nthe default window for drawing options, and events.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "The current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function CurrentWindow(): Window",
          "cpp": "window current_window()"
        }
      },
      {
        "signature": "bool has_window(string caption);",
        "name": "has_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a window with the given `caption`\nwhich has has been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "The name of the window to check for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function HasWindow(caption: String): Boolean",
          "cpp": "bool has_window(string caption)"
        }
      },
      {
        "signature": "void move_window(int x,int y);",
        "name": "move_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the current window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure MoveWindow(x: Integer; y: Integer)",
          "cpp": "void move_window(int x, int y)"
        }
      },
      {
        "signature": "void move_window(const string &name,int x,int y);",
        "name": "move_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure MoveWindow(const name: String; x: Integer; y: Integer)",
          "cpp": "void move_window(const string &name, int x, int y)"
        }
      },
      {
        "signature": "void move_window(window wind,int x,int y);",
        "name": "move_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move the window to the new location on the displays.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the window to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "int",
            "description": "The new x location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The new y location",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure MoveWindow(wind: Window; x: Integer; y: Integer)",
          "cpp": "void move_window(window wind, int x, int y)"
        }
      },
      {
        "signature": "window open_window(string caption,int width,int height);",
        "name": "open_window",
        "method_name": "open_window",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "A new window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "The title of the window. If a window with this caption\nalready exists, SplashKit will alter the caption to\nensure that it is unique.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "The width of the window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "The height of the window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "constructor": true,
          "method": "open_window",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function OpenWindow(caption: String; width: Integer; height: Integer): Window",
          "cpp": "window open_window(string caption, int width, int height)"
        }
      },
      {
        "signature": "void refresh_window(window wind);",
        "name": "refresh_window",
        "method_name": "refresh",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Refreshes the window `wind`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to refresh.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "refresh",
          "self": "wind",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure RefreshWindow(wind: Window)",
          "cpp": "void refresh_window(window wind)"
        }
      },
      {
        "signature": "void resize_window(int width,int height);",
        "name": "resize_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the size of the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "width": {
            "type": "int",
            "description": "Its new width",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "Its new height",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure ResizeWindow(width: Integer; height: Integer)",
          "cpp": "void resize_window(int width, int height)"
        }
      },
      {
        "signature": "void resize_window(window wnd,int width,int height);",
        "name": "resize_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the size of the window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "int",
            "description": "Its new width",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "int",
            "description": "Its new height",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure ResizeWindow(wnd: Window; width: Integer; height: Integer)",
          "cpp": "void resize_window(window wnd, int width, int height)"
        }
      },
      {
        "signature": "void set_current_window(const string &name);",
        "name": "set_current_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Set the current window to the window with the supplied caption.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The caption of the new current window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure SetCurrentWindow(const name: String)",
          "cpp": "void set_current_window(const string &name)"
        }
      },
      {
        "signature": "void set_current_window(window wind);",
        "name": "set_current_window",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Change the current window. Use this so that you can draw to different\nwindows by default.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The new current window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure SetCurrentWindow(wind: Window)",
          "cpp": "void set_current_window(window wind)"
        }
      },
      {
        "signature": "bool window_close_requested(const string &name);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if there is a music file with the given `name`\nhas has been loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to close",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowCloseRequested(const name: String): Boolean",
          "cpp": "bool window_close_requested(const string &name)"
        }
      },
      {
        "signature": "bool window_close_requested(window wind);",
        "name": "window_close_requested",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Closes the window given in `wind`",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the window is closed,\n`false` if there is an error.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "the `window` to be closed",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "self": "wind",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowCloseRequested(wind: Window): Boolean",
          "cpp": "bool window_close_requested(window wind)"
        }
      },
      {
        "signature": "bool window_has_border();",
        "name": "window_has_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the current window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHasBorder(): Boolean",
          "cpp": "bool window_has_border()"
        }
      },
      {
        "signature": "bool window_has_border(const string &name);",
        "name": "window_has_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHasBorder(const name: String): Boolean",
          "cpp": "bool window_has_border(const string &name)"
        }
      },
      {
        "signature": "bool window_has_border(window wnd);",
        "name": "window_has_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicate if the window has a border.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the window has a border",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHasBorder(wnd: Window): Boolean",
          "cpp": "bool window_has_border(window wnd)"
        }
      },
      {
        "signature": "int window_height();",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHeight(): Integer",
          "cpp": "int window_height()"
        }
      },
      {
        "signature": "int window_height(const string &name);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "height",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHeight(const name: String): Integer",
          "cpp": "int window_height(const string &name)"
        }
      },
      {
        "signature": "int window_height(window wind);",
        "name": "window_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the height of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "height",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowHeight(wind: Window): Integer",
          "cpp": "int window_height(window wind)"
        }
      },
      {
        "signature": "bool window_is_fullscreen();",
        "name": "window_is_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the current window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowIsFullscreen(): Boolean",
          "cpp": "bool window_is_fullscreen()"
        }
      },
      {
        "signature": "bool window_is_fullscreen(const string &name);",
        "name": "window_is_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowIsFullscreen(const name: String): Boolean",
          "cpp": "bool window_is_fullscreen(const string &name)"
        }
      },
      {
        "signature": "bool window_is_fullscreen(window wnd);",
        "name": "window_is_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the window currently fullscreen?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the window is fullscreen",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowIsFullscreen(wnd: Window): Boolean",
          "cpp": "bool window_is_fullscreen(window wnd)"
        }
      },
      {
        "signature": "window window_named(string caption);",
        "name": "window_named",
        "method_name": "window_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "Returns a `window` with the name specified by `caption`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "caption": {
            "type": "string",
            "description": "the `string` name of the window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "method": "window_named",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowNamed(caption: String): Window",
          "cpp": "window window_named(string caption)"
        }
      },
      {
        "signature": "point_2d window_position();",
        "name": "window_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the current window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowPosition(): Point2d",
          "cpp": "point_2d window_position()"
        }
      },
      {
        "signature": "point_2d window_position(const string &name);",
        "name": "window_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowPosition(const name: String): Point2d",
          "cpp": "point_2d window_position(const string &name)"
        }
      },
      {
        "signature": "point_2d window_position(window wnd);",
        "name": "window_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The location of the window.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowPosition(wnd: Window): Point2d",
          "cpp": "point_2d window_position(window wnd)"
        }
      },
      {
        "signature": "void window_set_icon(window wind,bitmap bmp);",
        "name": "window_set_icon",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the icon of the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to change the icon of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The image with the details to show in the icon",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowSetIcon(wind: Window; bmp: Bitmap)",
          "cpp": "void window_set_icon(window wind, bitmap bmp)"
        }
      },
      {
        "signature": "void window_toggle_border();",
        "name": "window_toggle_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the current window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleBorder()",
          "cpp": "void window_toggle_border()"
        }
      },
      {
        "signature": "void window_toggle_border(const string &name);",
        "name": "window_toggle_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleBorder(const name: String)",
          "cpp": "void window_toggle_border(const string &name)"
        }
      },
      {
        "signature": "void window_toggle_border(window wnd);",
        "name": "window_toggle_border",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the window border.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleBorder(wnd: Window)",
          "cpp": "void window_toggle_border(window wnd)"
        }
      },
      {
        "signature": "void window_toggle_fullscreen();",
        "name": "window_toggle_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the current window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleFullscreen()",
          "cpp": "void window_toggle_fullscreen()"
        }
      },
      {
        "signature": "void window_toggle_fullscreen(const string &name);",
        "name": "window_toggle_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleFullscreen(const name: String)",
          "cpp": "void window_toggle_fullscreen(const string &name)"
        }
      },
      {
        "signature": "void window_toggle_fullscreen(window wnd);",
        "name": "window_toggle_fullscreen",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the fullscreen property of the window",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "procedure WindowToggleFullscreen(wnd: Window)",
          "cpp": "void window_toggle_fullscreen(window wnd)"
        }
      },
      {
        "signature": "int window_width();",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the current window.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the current window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowWidth(): Integer",
          "cpp": "int window_width()"
        }
      },
      {
        "signature": "int window_width(const string &name);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window with the indicated name in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowWidth(const name: String): Integer",
          "cpp": "int window_width(const string &name)"
        }
      },
      {
        "signature": "int window_width(window wind);",
        "name": "window_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the width of the window in pixels.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the window",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "window",
          "getter": "width",
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowWidth(wind: Window): Integer",
          "cpp": "int window_width(window wind)"
        }
      },
      {
        "signature": "window window_with_focus();",
        "name": "window_with_focus",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the window that the user currently has selected. This may be\ndifferent to the current window.",
        "brief": null,
        "return": {
          "type": "window",
          "description": "The window the user has selected",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowWithFocus(): Window",
          "cpp": "window window_with_focus()"
        }
      },
      {
        "signature": "int window_x();",
        "name": "window_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the current window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowX(): Integer",
          "cpp": "int window_x()"
        }
      },
      {
        "signature": "int window_x(const string &name);",
        "name": "window_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowX(const name: String): Integer",
          "cpp": "int window_x(const string &name)"
        }
      },
      {
        "signature": "int window_x(window wnd);",
        "name": "window_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The x location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowX(wnd: Window): Integer",
          "cpp": "int window_x(window wnd)"
        }
      },
      {
        "signature": "int window_y();",
        "name": "window_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the current window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowY(): Integer",
          "cpp": "int window_y()"
        }
      },
      {
        "signature": "int window_y(const string &name);",
        "name": "window_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the window",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowY(const name: String): Integer",
          "cpp": "int window_y(const string &name)"
        }
      },
      {
        "signature": "int window_y(window wnd);",
        "name": "window_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The y location of the window on the displays.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Its location on the displays",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wnd": {
            "type": "window",
            "description": "The window",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "graphics",
          "static": "window_manager"
        },
        "signatures": {
          "pascal": "function WindowY(wnd: Window): Integer",
          "cpp": "int window_y(window wnd)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _window_data *window;",
        "name": "window",
        "description": "The Window type is used to refer to a window that you have opened\nin SplashKit. You create new Windows using `open_window` and they can\nbe closed using `close_window`.\n\n\n- opened with `open_window`\n\n- and must be released using `close_window` (to close a specific\nwindow) or `delete_all_windows` (to close all loaded\nwindows).",
        "brief": null,
        "attributes": {
          "class": "window",
          "group": "graphics",
          "static": "window_manager"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "input": {
    "brief": "Input handles user interaction and events such as keypresses.",
    "description": "",
    "functions": [
      {
        "signature": "void process_events();",
        "name": "process_events",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "ProcessEvents allows SplashKit to react to user interactions. This\nprocedure checks the current keyboard and mouse states and should be\ncalled once within your game loop to check user interaction.\n\nSide Effects\n- Reads user interaction events\n- Updates keys down, text input, etc.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "pascal": "procedure ProcessEvents()",
          "cpp": "void process_events()"
        }
      },
      {
        "signature": "bool quit_requested();",
        "name": "quit_requested",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks to see if the user has asked for the application to quit. This\nvalue is updated by the `process_events` routine. Also see\n`window_close_requested`.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the application has been requested to close.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "pascal": "function QuitRequested(): Boolean",
          "cpp": "bool quit_requested()"
        }
      },
      {
        "signature": "void reset_quit();",
        "name": "reset_quit",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Cancels a quit request, ensuring the quit requested will return false.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input",
          "static": "input"
        },
        "signatures": {
          "pascal": "procedure ResetQuit()",
          "cpp": "void reset_quit()"
        }
      },
      {
        "signature": "bool any_key_pressed();",
        "name": "any_key_pressed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks to see if any key has been pressed since the last time\n`process_events` was called.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if any key was pressed.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function AnyKeyPressed(): Boolean",
          "cpp": "bool any_key_pressed()"
        }
      },
      {
        "signature": "void deregister_callback_on_key_down(key_callback *callback);",
        "name": "deregister_callback_on_key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key down actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key down events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure DeregisterCallbackOnKeyDown(callback: KeyCallback)",
          "cpp": "void deregister_callback_on_key_down(key_callback *callback)"
        }
      },
      {
        "signature": "void deregister_callback_on_key_typed(key_callback *callback);",
        "name": "deregister_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key typed actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key typed events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure DeregisterCallbackOnKeyTyped(callback: KeyCallback)",
          "cpp": "void deregister_callback_on_key_typed(key_callback *callback)"
        }
      },
      {
        "signature": "void deregister_callback_on_key_up(key_callback *callback);",
        "name": "deregister_callback_on_key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the registered callback from receiving events related to key up actions.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to from from key up events",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure DeregisterCallbackOnKeyUp(callback: KeyCallback)",
          "cpp": "void deregister_callback_on_key_up(key_callback *callback)"
        }
      },
      {
        "signature": "bool key_down(key_code key);",
        "name": "key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key is currently held down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it is down",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function KeyDown(key: KeyCode): Boolean",
          "cpp": "bool key_down(key_code key)"
        }
      },
      {
        "signature": "string key_name(key_code key);",
        "name": "key_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The `key_name` function returns a string name for a given `key_code`. For\nexample, `COMMA_KEY` returns the string 'Comma'. This function could be used\nto display more meaningful key names for configuring game controls, etc.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the key",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to get the name of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function KeyName(key: KeyCode): String",
          "cpp": "string key_name(key_code key)"
        }
      },
      {
        "signature": "bool key_released(key_code key);",
        "name": "key_released",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified key was released since the last time\n`process_events` was called. This occurs only once for the key that is\nreleased and will not return true again until the key is pressed down and\nreleased again.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key was just released",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it was released",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function KeyReleased(key: KeyCode): Boolean",
          "cpp": "bool key_released(key_code key)"
        }
      },
      {
        "signature": "bool key_typed(key_code key);",
        "name": "key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the key requested is just pressed down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked. this will only occur once for that key that is\npressed and will not return true again until the key is released and presssed down again",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key was just pressed down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it was typed",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function KeyTyped(key: KeyCode): Boolean",
          "cpp": "bool key_typed(key_code key)"
        }
      },
      {
        "signature": "bool key_up(key_code key);",
        "name": "key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns false when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the key is currently up",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "key": {
            "type": "key_code",
            "description": "The key to check if it is up",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function KeyUp(key: KeyCode): Boolean",
          "cpp": "bool key_up(key_code key)"
        }
      },
      {
        "signature": "void register_callback_on_key_down(key_callback *callback);",
        "name": "register_callback_on_key_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key down\ncalls. This will be called in response to `process_events`, for each key that\nthe user presses down.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is first pressed",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure RegisterCallbackOnKeyDown(callback: KeyCallback)",
          "cpp": "void register_callback_on_key_down(key_callback *callback)"
        }
      },
      {
        "signature": "void register_callback_on_key_typed(key_callback *callback);",
        "name": "register_callback_on_key_typed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key typed\ncalls. This will be called in response to `process_events`, when the user initially\npresses a key down.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is typed",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure RegisterCallbackOnKeyTyped(callback: KeyCallback)",
          "cpp": "void register_callback_on_key_typed(key_callback *callback)"
        }
      },
      {
        "signature": "void register_callback_on_key_up(key_callback *callback);",
        "name": "register_callback_on_key_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register the passed in callback function to receive notification of key up\ncalls. This will be called in response to `process_events`, for each key that\nthe user releases.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "callback": {
            "type": "key_callback",
            "description": "The function to be called when a key is released",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure RegisterCallbackOnKeyUp(callback: KeyCallback)",
          "cpp": "void register_callback_on_key_up(key_callback *callback)"
        }
      },
      {
        "signature": "void hide_mouse();",
        "name": "hide_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to hide (no longer visible) if it is currently\nshowing. Use `ShowMouse` to make the mouse cursor visible again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure HideMouse()",
          "cpp": "void hide_mouse()"
        }
      },
      {
        "signature": "bool mouse_clicked(mouse_button button);",
        "name": "mouse_clicked",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the specified button was clicked since the last time\n`process_events` was called.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button was clicked",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseClicked(button: MouseButton): Boolean",
          "cpp": "bool mouse_clicked(mouse_button button)"
        }
      },
      {
        "signature": "bool mouse_down(mouse_button button);",
        "name": "mouse_down",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the specified button is currently pressed down.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button is down",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseDown(button: MouseButton): Boolean",
          "cpp": "bool mouse_down(mouse_button button)"
        }
      },
      {
        "signature": "vector_2d mouse_movement();",
        "name": "mouse_movement",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount of accumulated mouse movement, since the last time\n`process_events` was called, as a `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The movement of the mouse since the last process events",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseMovement(): Vector2d",
          "cpp": "vector_2d mouse_movement()"
        }
      },
      {
        "signature": "point_2d mouse_position();",
        "name": "mouse_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current window position of the mouse as a `Point2D`",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The position of the mouse in the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MousePosition(): Point2d",
          "cpp": "point_2d mouse_position()"
        }
      },
      {
        "signature": "vector_2d mouse_position_vector();",
        "name": "mouse_position_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns The current window position of the mouse as a `Vector`",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset from the window origin to the mouse.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MousePositionVector(): Vector2d",
          "cpp": "vector_2d mouse_position_vector()"
        }
      },
      {
        "signature": "bool mouse_shown();",
        "name": "mouse_shown",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the mouse is currently visible, `false` if not.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse is shown.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseShown(): Boolean",
          "cpp": "bool mouse_shown()"
        }
      },
      {
        "signature": "bool mouse_up(mouse_button button);",
        "name": "mouse_up",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns `true` if the specified button is currently up.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the mouse button is up (i.e. not down)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "button": {
            "type": "mouse_button",
            "description": "The mouse button to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseUp(button: MouseButton): Boolean",
          "cpp": "bool mouse_up(mouse_button button)"
        }
      },
      {
        "signature": "vector_2d mouse_wheel_scroll();",
        "name": "mouse_wheel_scroll",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the amount the mouse wheel was scrolled since the last call\nto `process_events`. The result is a vector containing the x and y\namounts scrolled. Scroll left generates a negative x, scroll right a\npositive x. Scroll backward is negative y, scroll forward positive y.\nNote that on MacOS the directions may be inverted by OS settings.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The distance and direction of the mouse scroll since the last\n`process_events`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseWheelScroll(): Vector2d",
          "cpp": "vector_2d mouse_wheel_scroll()"
        }
      },
      {
        "signature": "float mouse_x();",
        "name": "mouse_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current x value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance of the mouse from the left edge of the current\nwindow location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseX(): Single",
          "cpp": "float mouse_x()"
        }
      },
      {
        "signature": "float mouse_y();",
        "name": "mouse_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current y value of the mouse's position.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The distance of the mouse from the top edge of the current\nwindow location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function MouseY(): Single",
          "cpp": "float mouse_y()"
        }
      },
      {
        "signature": "void move_mouse(float x,float y);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The new x location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The new y location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure MoveMouse(x: Single; y: Single)",
          "cpp": "void move_mouse(float x, float y)"
        }
      },
      {
        "signature": "void move_mouse(point_2d point);",
        "name": "move_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Moves the mouse cursor to the specified screen location.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "point": {
            "type": "point_2d",
            "description": "The new location of the mouse",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure MoveMouse(point: Point2d)",
          "cpp": "void move_mouse(point_2d point)"
        }
      },
      {
        "signature": "void show_mouse();",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tells the mouse cursor to be visible if it was previously hidden with\nby a `HideMouse` or `SetMouseVisible`(False) call.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure ShowMouse()",
          "cpp": "void show_mouse()"
        }
      },
      {
        "signature": "void show_mouse(bool show);",
        "name": "show_mouse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Used to explicitly set the mouse cursors visible state (if it is showing\nin the window or not) based on the show parameter.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "show": {
            "type": "bool",
            "description": "When true the mouse is shown, when false it is hidden",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure ShowMouse(show: Boolean)",
          "cpp": "void show_mouse(bool show)"
        }
      },
      {
        "signature": "void draw_collected_text(color clr,font fnt,int font_size,const drawing_options &opts);",
        "name": "draw_collected_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draw the text that the user is currently enterring on the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The color for the text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "fnt": {
            "type": "font",
            "description": "The font to use",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "font_size": {
            "type": "int",
            "description": "The size of the font",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "opts": {
            "type": "drawing_options",
            "description": "Any drawing options",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure DrawCollectedText(clr: Color; fnt: Font; fontSize: Integer; const opts: DrawingOptions)",
          "cpp": "void draw_collected_text(color clr, font fnt, int font_size, const drawing_options &opts)"
        }
      },
      {
        "signature": "void end_reading_text();",
        "name": "end_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Ends reading text in for the current window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure EndReadingText()",
          "cpp": "void end_reading_text()"
        }
      },
      {
        "signature": "void end_reading_text(window wind);",
        "name": "end_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Ends reading text for the passed in window.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to end reading text",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure EndReadingText(wind: Window)",
          "cpp": "void end_reading_text(window wind)"
        }
      },
      {
        "signature": "bool reading_text();",
        "name": "reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the current window is reading text.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when window is setup to read input from the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function ReadingText(): Boolean",
          "cpp": "bool reading_text()"
        }
      },
      {
        "signature": "bool reading_text(window wind);",
        "name": "reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the window is reading text.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when window is setup to read input from the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function ReadingText(wind: Window): Boolean",
          "cpp": "bool reading_text(window wind)"
        }
      },
      {
        "signature": "void start_reading_text(rectangle rect);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure StartReadingText(rect: Rectangle)",
          "cpp": "void start_reading_text(rectangle rect)"
        }
      },
      {
        "signature": "void start_reading_text(rectangle rect,string initial_text);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "initial_text": {
            "type": "string",
            "description": "The initial text, which may be edited by the user.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure StartReadingText(rect: Rectangle; initialText: String)",
          "cpp": "void start_reading_text(rectangle rect, string initial_text)"
        }
      },
      {
        "signature": "void start_reading_text(window wind,rectangle rect);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the window within the bounds of the\nsupplied rectangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window where the text will be entered",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure StartReadingText(wind: Window; rect: Rectangle)",
          "cpp": "void start_reading_text(window wind, rectangle rect)"
        }
      },
      {
        "signature": "void start_reading_text(window wind,rectangle rect,string initial_text);",
        "name": "start_reading_text",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start reading text in the window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window where the text will be entered",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area where the text will be entered.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "initial_text": {
            "type": "string",
            "description": "The initial text, which may be edited by the user.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "procedure StartReadingText(wind: Window; rect: Rectangle; initialText: String)",
          "cpp": "void start_reading_text(window wind, rectangle rect, string initial_text)"
        }
      },
      {
        "signature": "bool text_entry_cancelled();",
        "name": "text_entry_cancelled",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Did the user press escape and cancel the enterring of text?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the use has cancelled text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function TextEntryCancelled(): Boolean",
          "cpp": "bool text_entry_cancelled()"
        }
      },
      {
        "signature": "bool text_entry_cancelled(window wind);",
        "name": "text_entry_cancelled",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Did the user press escape and cancel the enterring of text?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the use has cancelled text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function TextEntryCancelled(wind: Window): Boolean",
          "cpp": "bool text_entry_cancelled(window wind)"
        }
      },
      {
        "signature": "string text_input();",
        "name": "text_input",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The text the user has currently enterred on the current window.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The user's text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function TextInput(): String",
          "cpp": "string text_input()"
        }
      },
      {
        "signature": "string text_input(window wind);",
        "name": "text_input",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The text the user has currently enterred on the current window.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The user's text entry",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "wind": {
            "type": "window",
            "description": "The window to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "input"
        },
        "signatures": {
          "pascal": "function TextInput(wind: Window): String",
          "cpp": "string text_input(window wind)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef void (key_callback)(int code);",
        "name": "key_callback",
        "description": "The `key_callback` is a function pointer used to register your code with SplashKit\nor keyboard related events. See `register_callback_on_key_down`,\n`register_callback_on_key_up`, and `register_callback_on_key_typed`",
        "brief": null,
        "attributes": {
          "group": "input"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "code": {
            "type": "int",
            "description": "The `key_code` related to the event.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum key_code {UNKNOWN_KEY = 0,BACKSPACE_KEY = 8,TAB_KEY = 9,CLEAR_KEY = 12,RETURN_KEY = 13,PAUSE_KEY = 19,ESCAPE_KEY = 27,SPACE_KEY = 32,EXCLAIM_KEY = 33,DOUBLE_QUOTE_KEY = 34,HASH_KEY = 35,DOLLAR_KEY = 36,AMPERSAND_KEY = 38,QUOTE_KEY = 39,LEFT_PAREN_KEY = 40,RIGHT_PAREN_KEY = 41,ASTERISK_KEY = 42,PLUS_KEY = 43,COMMA_KEY = 44,MINUS_KEY = 45,PERIOD_KEY = 46,SLASH_KEY = 47,NUM_0_KEY = 48,NUM_1_KEY = 49,NUM_2_KEY = 50,NUM_3_KEY = 51,NUM_4_KEY = 52,NUM_5_KEY = 53,NUM_6_KEY = 54,NUM_7_KEY = 55,NUM_8_KEY = 56,NUM_9_KEY = 57,COLON_KEY = 58,SEMI_COLON_KEY = 59,LESS_KEY = 60,EQUALS_KEY = 61,GREATER_KEY = 62,QUESTION_KEY = 63,AT_KEY = 64,LEFT_BRACKET_KEY = 91,BACKSLASH_KEY = 92,RIGHT_BRACKET_KEY = 93,CARET_KEY = 94,UNDERSCORE_KEY = 95,BACKQUOTE_KEY = 96,A_KEY = 97,B_KEY = 98,C_KEY = 99,D_KEY = 100,E_KEY = 101,F_KEY = 102,G_KEY = 103,H_KEY = 104,I_KEY = 105,J_KEY = 106,K_KEY = 107,L_KEY = 108,M_KEY = 109,N_KEY = 110,O_KEY = 111,P_KEY = 112,Q_KEY = 113,R_KEY = 114,S_KEY = 115,T_KEY = 116,U_KEY = 117,V_KEY = 118,W_KEY = 119,X_KEY = 120,Y_KEY = 121,Z_KEY = 122,DELETE_KEY = 127,KEYPAD_0 = 256,KEYPAD_1 = 257,KEYPAD_2 = 258,KEYPAD_3 = 259,KEYPAD_4 = 260,KEYPAD_5 = 261,KEYPAD_6 = 262,KEYPAD_7 = 263,KEYPAD_8 = 264,KEYPAD_9 = 265,KEYPAD_PERIOD = 266,KEYPAD_DIVIDE = 267,KEYPAD_MULTIPLY = 268,KEYPAD_MINUS = 269,KEYPAD_PLUS = 270,KEYPAD_ENTER = 271,KEYPAD_EQUALS = 272,UP_KEY = 273,DOWN_KEY = 274,RIGHT_KEY = 275,LEFT_KEY = 276,INSERT_KEY = 277,HOME_KEY = 278,END_KEY = 279,PAGE_UP_KEY = 280,PAGE_DOWN_KEY = 281,F1_KEY = 282,F2_KEY = 283,F3_KEY = 284,F4_KEY = 285,F5_KEY = 286,F6_KEY = 287,F7_KEY = 288,F8_KEY = 289,F9_KEY = 290,F10_KEY = 291,F11_KEY = 292,F12_KEY = 293,F13_KEY = 294,F14_KEY = 295,F15_KEY = 296,NUM_LOCK_KEY = 300,CAPS_LOCK_KEY = 301,SCROLL_LOCK_KEY = 302,RIGHT_SHIFT_KEY = 303,LEFT_SHIFT_KEY = 304,RIGHT_CTRL_KEY = 305,LEFT_CTRL_KEY = 306,RIGHT_ALT_KEY = 307,LEFT_ALT_KEY = 308,LEFT_SUPER_KEY = 311,RIGHT_SUPER_KEY = 312,MODE_KEY = 313,HELP_KEY = 315,SYS_REQ_KEY = 317,MENU_KEY = 319,POWER_KEY = 320,};",
        "name": "key_code",
        "description": "These are the key codes you can use to check details of keyboard actions.\nSee `key_down`, `key_up`, `key_typed`, and `key_released` functions.\nYou can get a string representation of these keys using `key_name`.",
        "brief": null,
        "constants": {
          "UNKNOWN_KEY": {
            "description": "The unknown key",
            "number": 0
          },
          "BACKSPACE_KEY": {
            "description": "The backspace key",
            "number": 8
          },
          "TAB_KEY": {
            "description": "The tab key",
            "number": 9
          },
          "CLEAR_KEY": {
            "description": "The clear key",
            "number": 12
          },
          "RETURN_KEY": {
            "description": "The return key",
            "number": 13
          },
          "PAUSE_KEY": {
            "description": "The pause key",
            "number": 19
          },
          "ESCAPE_KEY": {
            "description": "The escape key",
            "number": 27
          },
          "SPACE_KEY": {
            "description": "The space key",
            "number": 32
          },
          "EXCLAIM_KEY": {
            "description": "The exclaim key",
            "number": 33
          },
          "DOUBLE_QUOTE_KEY": {
            "description": "The double quote key",
            "number": 34
          },
          "HASH_KEY": {
            "description": "The hash key",
            "number": 35
          },
          "DOLLAR_KEY": {
            "description": "The dollar key",
            "number": 36
          },
          "AMPERSAND_KEY": {
            "description": "The ampersand key",
            "number": 38
          },
          "QUOTE_KEY": {
            "description": "The quote key",
            "number": 39
          },
          "LEFT_PAREN_KEY": {
            "description": "The left paren key",
            "number": 40
          },
          "RIGHT_PAREN_KEY": {
            "description": "The right paren key",
            "number": 41
          },
          "ASTERISK_KEY": {
            "description": "The asterisk key",
            "number": 42
          },
          "PLUS_KEY": {
            "description": "The plus key",
            "number": 43
          },
          "COMMA_KEY": {
            "description": "The comma key",
            "number": 44
          },
          "MINUS_KEY": {
            "description": "The minus key",
            "number": 45
          },
          "PERIOD_KEY": {
            "description": "The period key",
            "number": 46
          },
          "SLASH_KEY": {
            "description": "The slash key",
            "number": 47
          },
          "NUM_0_KEY": {
            "description": "The num 0 key",
            "number": 48
          },
          "NUM_1_KEY": {
            "description": "The num 1 key",
            "number": 49
          },
          "NUM_2_KEY": {
            "description": "The num 2 key",
            "number": 50
          },
          "NUM_3_KEY": {
            "description": "The num 3 key",
            "number": 51
          },
          "NUM_4_KEY": {
            "description": "The num 4 key",
            "number": 52
          },
          "NUM_5_KEY": {
            "description": "The num 5 key",
            "number": 53
          },
          "NUM_6_KEY": {
            "description": "The num 6 key",
            "number": 54
          },
          "NUM_7_KEY": {
            "description": "The num 7 key",
            "number": 55
          },
          "NUM_8_KEY": {
            "description": "The num 8 key",
            "number": 56
          },
          "NUM_9_KEY": {
            "description": "The num 9 key",
            "number": 57
          },
          "COLON_KEY": {
            "description": "The colon key",
            "number": 58
          },
          "SEMI_COLON_KEY": {
            "description": "The semi colon key",
            "number": 59
          },
          "LESS_KEY": {
            "description": "The less key",
            "number": 60
          },
          "EQUALS_KEY": {
            "description": "The equals key",
            "number": 61
          },
          "GREATER_KEY": {
            "description": "The greater key",
            "number": 62
          },
          "QUESTION_KEY": {
            "description": "The question key",
            "number": 63
          },
          "AT_KEY": {
            "description": "The at key",
            "number": 64
          },
          "LEFT_BRACKET_KEY": {
            "description": "The left bracket key",
            "number": 91
          },
          "BACKSLASH_KEY": {
            "description": "The backslash (\\) key",
            "number": 92
          },
          "RIGHT_BRACKET_KEY": {
            "description": "The right bracket key",
            "number": 93
          },
          "CARET_KEY": {
            "description": "The caret (^) key",
            "number": 94
          },
          "UNDERSCORE_KEY": {
            "description": "The underscore (_) key",
            "number": 95
          },
          "BACKQUOTE_KEY": {
            "description": "The backquote (`) key",
            "number": 96
          },
          "A_KEY": {
            "description": "The a key",
            "number": 97
          },
          "B_KEY": {
            "description": "The b key",
            "number": 98
          },
          "C_KEY": {
            "description": "The c key",
            "number": 99
          },
          "D_KEY": {
            "description": "The d key",
            "number": 100
          },
          "E_KEY": {
            "description": "The e key",
            "number": 101
          },
          "F_KEY": {
            "description": "The f key",
            "number": 102
          },
          "G_KEY": {
            "description": "The g key",
            "number": 103
          },
          "H_KEY": {
            "description": "The h key",
            "number": 104
          },
          "I_KEY": {
            "description": "The i key",
            "number": 105
          },
          "J_KEY": {
            "description": "The j key",
            "number": 106
          },
          "K_KEY": {
            "description": "The k key",
            "number": 107
          },
          "L_KEY": {
            "description": "The l key",
            "number": 108
          },
          "M_KEY": {
            "description": "The m key",
            "number": 109
          },
          "N_KEY": {
            "description": "The n key",
            "number": 110
          },
          "O_KEY": {
            "description": "The o key",
            "number": 111
          },
          "P_KEY": {
            "description": "The p key",
            "number": 112
          },
          "Q_KEY": {
            "description": "The q key",
            "number": 113
          },
          "R_KEY": {
            "description": "The r key",
            "number": 114
          },
          "S_KEY": {
            "description": "The s key",
            "number": 115
          },
          "T_KEY": {
            "description": "The t key",
            "number": 116
          },
          "U_KEY": {
            "description": "The u key",
            "number": 117
          },
          "V_KEY": {
            "description": "The v key",
            "number": 118
          },
          "W_KEY": {
            "description": "The w key",
            "number": 119
          },
          "X_KEY": {
            "description": "The x key",
            "number": 120
          },
          "Y_KEY": {
            "description": "The y key",
            "number": 121
          },
          "Z_KEY": {
            "description": "The z key",
            "number": 122
          },
          "DELETE_KEY": {
            "description": "The delete key",
            "number": 127
          },
          "KEYPAD_0": {
            "description": "The keypad 0 key",
            "number": 256
          },
          "KEYPAD_1": {
            "description": "The keypad 1 key",
            "number": 257
          },
          "KEYPAD_2": {
            "description": "The keypad 2 key",
            "number": 258
          },
          "KEYPAD_3": {
            "description": "The keypad 3 key",
            "number": 259
          },
          "KEYPAD_4": {
            "description": "The keypad 4 key",
            "number": 260
          },
          "KEYPAD_5": {
            "description": "The keypad 5 key",
            "number": 261
          },
          "KEYPAD_6": {
            "description": "The keypad 6 key",
            "number": 262
          },
          "KEYPAD_7": {
            "description": "The keypad 7 key",
            "number": 263
          },
          "KEYPAD_8": {
            "description": "The keypad 8 key",
            "number": 264
          },
          "KEYPAD_9": {
            "description": "The keypad 9 key",
            "number": 265
          },
          "KEYPAD_PERIOD": {
            "description": "The keypad period key",
            "number": 266
          },
          "KEYPAD_DIVIDE": {
            "description": "The keypad divide key",
            "number": 267
          },
          "KEYPAD_MULTIPLY": {
            "description": "The keypad multiply key",
            "number": 268
          },
          "KEYPAD_MINUS": {
            "description": "The keypad minus key",
            "number": 269
          },
          "KEYPAD_PLUS": {
            "description": "The keypad plus key",
            "number": 270
          },
          "KEYPAD_ENTER": {
            "description": "The keypad enter key",
            "number": 271
          },
          "KEYPAD_EQUALS": {
            "description": "The keypad equals key",
            "number": 272
          },
          "UP_KEY": {
            "description": "The up key",
            "number": 273
          },
          "DOWN_KEY": {
            "description": "The down key",
            "number": 274
          },
          "RIGHT_KEY": {
            "description": "The right key",
            "number": 275
          },
          "LEFT_KEY": {
            "description": "The left key",
            "number": 276
          },
          "INSERT_KEY": {
            "description": "The insert key",
            "number": 277
          },
          "HOME_KEY": {
            "description": "The home key",
            "number": 278
          },
          "END_KEY": {
            "description": "The end key",
            "number": 279
          },
          "PAGE_UP_KEY": {
            "description": "The page up key",
            "number": 280
          },
          "PAGE_DOWN_KEY": {
            "description": "The page down key",
            "number": 281
          },
          "F1_KEY": {
            "description": "The f1 key",
            "number": 282
          },
          "F2_KEY": {
            "description": "The f2 key",
            "number": 283
          },
          "F3_KEY": {
            "description": "The f3 key",
            "number": 284
          },
          "F4_KEY": {
            "description": "The f4 key",
            "number": 285
          },
          "F5_KEY": {
            "description": "The f5 key",
            "number": 286
          },
          "F6_KEY": {
            "description": "The f6 key",
            "number": 287
          },
          "F7_KEY": {
            "description": "The f7 key",
            "number": 288
          },
          "F8_KEY": {
            "description": "The f8 key",
            "number": 289
          },
          "F9_KEY": {
            "description": "The f9 key",
            "number": 290
          },
          "F10_KEY": {
            "description": "The f10 key",
            "number": 291
          },
          "F11_KEY": {
            "description": "The f11 key",
            "number": 292
          },
          "F12_KEY": {
            "description": "The f12 key",
            "number": 293
          },
          "F13_KEY": {
            "description": "The f13 key",
            "number": 294
          },
          "F14_KEY": {
            "description": "The f14 key",
            "number": 295
          },
          "F15_KEY": {
            "description": "The f15 key",
            "number": 296
          },
          "NUM_LOCK_KEY": {
            "description": "The num lock key",
            "number": 300
          },
          "CAPS_LOCK_KEY": {
            "description": "The caps lock key",
            "number": 301
          },
          "SCROLL_LOCK_KEY": {
            "description": "The scroll lock key",
            "number": 302
          },
          "RIGHT_SHIFT_KEY": {
            "description": "The right shift key",
            "number": 303
          },
          "LEFT_SHIFT_KEY": {
            "description": "The left shift key",
            "number": 304
          },
          "RIGHT_CTRL_KEY": {
            "description": "The right ctrl key",
            "number": 305
          },
          "LEFT_CTRL_KEY": {
            "description": "The left ctrl key",
            "number": 306
          },
          "RIGHT_ALT_KEY": {
            "description": "The right alt or option key",
            "number": 307
          },
          "LEFT_ALT_KEY": {
            "description": "The left alt or option key",
            "number": 308
          },
          "LEFT_SUPER_KEY": {
            "description": "The left super (windows or command) key",
            "number": 311
          },
          "RIGHT_SUPER_KEY": {
            "description": "The right super (windows or command) key",
            "number": 312
          },
          "MODE_KEY": {
            "description": "The mode key",
            "number": 313
          },
          "HELP_KEY": {
            "description": "The help key",
            "number": 315
          },
          "SYS_REQ_KEY": {
            "description": "The sys req key",
            "number": 317
          },
          "MENU_KEY": {
            "description": "The menu key",
            "number": 319
          },
          "POWER_KEY": {
            "description": "The power key",
            "number": 320
          }
        },
        "attributes": {
          "group": "input"
        }
      },
      {
        "signature": "enum mouse_button {NO_BUTTON,LEFT_BUTTON,MIDDLE_BUTTON,RIGHT_BUTTON,MOUSE_X1_BUTTON,MOUSE_X2_BUTTON};",
        "name": "mouse_button",
        "description": "A mouse can have many different types of buttons. Most people know\nabout the simple Left and Right buttons, but there is also a Middle\nbutton (sometimes part of a scoll wheel), and possible side buttons.",
        "brief": null,
        "constants": {
          "NO_BUTTON": {
            "description": "No mouse button"
          },
          "LEFT_BUTTON": {
            "description": "The left mouse button"
          },
          "MIDDLE_BUTTON": {
            "description": "The middle mouse button"
          },
          "RIGHT_BUTTON": {
            "description": "The right mouse button"
          },
          "MOUSE_X1_BUTTON": {
            "description": "The x1 mouse button"
          },
          "MOUSE_X2_BUTTON": {
            "description": "The x2 mouse button"
          }
        },
        "attributes": {
          "group": "input"
        }
      }
    ],
    "defines": [

    ]
  },
  "json": {
    "brief": "SplashKit Json allows you to create and read JSON objects.",
    "description": "Splashkit's JSON library allows you to easily create or read JSON objects and\nmanipulate them to/from a JSON string or from a file containing a JSON\nstring. Create a new JSON object with a call to `create_json()` and\nread or write data to it by calling methods like\n`json_add_string(json j, string key, string value)` and\n`json_read_string(json j, string key)`.",
    "functions": [
      {
        "signature": "json create_json();",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The empty `json` object returned can be filled with data and read by the\nfunctions and procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates an empty `json` object.",
        "return": {
          "type": "json",
          "description": "Returns an empty `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function CreateJson(): Json",
          "cpp": "json create_json()"
        },
        "example": "create_json"
      },
      {
        "signature": "json create_json(string json_string);",
        "name": "create_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
        "brief": "Creates a `json` object filled with JSON fields from `json_string`.",
        "return": {
          "type": "json",
          "description": "Returns a `json` object filled with data from the parameter `string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "json_string": {
            "type": "string",
            "description": "The JSON formatted `string` to be converted to a `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "constructor": true,
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function CreateJson(jsonString: String): Json",
          "cpp": "json create_json(string json_string)"
        }
      },
      {
        "signature": "void free_all_json();",
        "name": "free_all_json",
        "method_name": "free_all",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the `json` objects which have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "method": "free_all",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "pascal": "procedure FreeAllJson()",
          "cpp": "void free_all_json()"
        }
      },
      {
        "signature": "void free_json(json j);",
        "name": "free_json",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the SplashKit resources associated with the `json` object.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object whose resources should be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "destructor": true,
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure FreeJson(j: Json)",
          "cpp": "void free_json(json j)"
        }
      },
      {
        "signature": "int json_count_keys(json j);",
        "name": "json_count_keys",
        "method_name": "count_keys",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the count of keys in the top-level `json` object.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The count of keys in the top-level `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to count keys.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "count_keys",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonCountKeys(j: Json): Integer",
          "cpp": "int json_count_keys(json j)"
        }
      },
      {
        "signature": "json json_from_color(color clr);",
        "name": "json_from_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts a `color` to a `json` object.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "The `color` serialized into a `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "clr": {
            "type": "color",
            "description": "The `color` to convert to `json`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonFromColor(clr: Color): Json",
          "cpp": "json json_from_color(color clr)"
        }
      },
      {
        "signature": "json json_from_file(const string& filename);",
        "name": "json_from_file",
        "method_name": "from_file",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns the `json` object loaded from the JSON file in `filename`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The filename of the file to be written to `Resources/json/`.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "from_file",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "pascal": "function JsonFromFile(const filename: String): Json",
          "cpp": "json json_from_file(const string &filename)"
        }
      },
      {
        "signature": "json json_from_string(const string &j_string);",
        "name": "json_from_string",
        "method_name": "from_json_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object from a `string` in the JSON format.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns a `json` object loaded with data from `string j_string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j_string": {
            "type": "string",
            "description": "A `string` in the JSON format.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "from_json_string",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "pascal": "function JsonFromString(const jString: String): Json",
          "cpp": "json json_from_string(const string &j_string)"
        }
      },
      {
        "signature": "bool json_has_key(json j,string key);",
        "name": "json_has_key",
        "method_name": "has_key",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if the `json` object contains the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns `true` if the `json j` object contains a key for `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to check for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key to be checked.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "has_key",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonHasKey(j: Json; key: String): Boolean",
          "cpp": "bool json_has_key(json j, string key)"
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<double> &out);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_double",
        "unique_method_name": "read_array_of_double",
        "suffix_name": null,
        "description": "Reads an array of `double` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "double"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_double",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonReadArray(j: Json; key: String; var out: ArrayOfDouble)",
          "cpp": "void json_read_array(json j, string key, vector<double> &out)"
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<json> &out);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_json",
        "unique_method_name": "read_array_of_json",
        "suffix_name": null,
        "description": "Reads an array of `json` object values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "json"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_json",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonReadArray(j: Json; key: String; var out: ArrayOfJson)",
          "cpp": "void json_read_array(json j, string key, vector<json> &out)"
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<string> &out);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_string",
        "unique_method_name": "read_array_of_string",
        "suffix_name": null,
        "description": "Reads an array of `string` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_string",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonReadArray(j: Json; key: String; var out: ArrayOfString)",
          "cpp": "void json_read_array(json j, string key, vector<string> &out)"
        }
      },
      {
        "signature": "void json_read_array(json j,string key,vector<bool> &out);",
        "name": "json_read_array",
        "method_name": "read_array",
        "unique_global_name": "json_read_array_of_bool",
        "unique_method_name": "read_array_of_bool",
        "suffix_name": null,
        "description": "Reads an array of `bool` values from the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "out": {
            "type": "vector",
            "description": "The array which will be filled with the data stored for `string` key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "bool"
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_array",
          "self": "j",
          "suffix": "of_bool",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonReadArray(j: Json; key: String; var out: ArrayOfBoolean)",
          "cpp": "void json_read_array(json j, string key, vector<bool> &out)"
        }
      },
      {
        "signature": "bool json_read_bool(json j,string key);",
        "name": "json_read_bool",
        "method_name": "read_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `bool` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns the `bool` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_bool",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadBool(j: Json; key: String): Boolean",
          "cpp": "bool json_read_bool(json j, string key)"
        }
      },
      {
        "signature": "float json_read_number(json j,string key);",
        "name": "json_read_number",
        "method_name": "read_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `float` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns the `float` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadNumber(j: Json; key: String): Single",
          "cpp": "float json_read_number(json j, string key)"
        }
      },
      {
        "signature": "double json_read_number_as_double(json j,string key);",
        "name": "json_read_number_as_double",
        "method_name": "read_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `double` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "double",
          "description": "Returns the `double` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadNumberAsDouble(j: Json; key: String): Double",
          "cpp": "double json_read_number_as_double(json j, string key)"
        }
      },
      {
        "signature": "int json_read_number_as_int(json j,string key);",
        "name": "json_read_number_as_int",
        "method_name": "read_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `integer` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns the `integer` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadNumberAsInt(j: Json; key: String): Integer",
          "cpp": "int json_read_number_as_int(json j, string key)"
        }
      },
      {
        "signature": "json json_read_object(json j,string key);",
        "name": "json_read_object",
        "method_name": "read_object",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `json` object value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "json",
          "description": "Returns the `json` object value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_object",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadObject(j: Json; key: String): Json",
          "cpp": "json json_read_object(json j, string key)"
        }
      },
      {
        "signature": "string json_read_string(json j,string key);",
        "name": "json_read_string",
        "method_name": "read_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Reads a `string` value from the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the `string` value stored at the `string` key.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object from which data will be returned for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key used to find data in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "read_string",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonReadString(j: Json; key: String): String",
          "cpp": "string json_read_string(json j, string key)"
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<string> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_string",
        "unique_method_name": "add_array_of_string",
        "suffix_name": null,
        "description": "Adds an array of `string` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "string"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_string",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetArray(j: Json; key: String; value: ArrayOfString)",
          "cpp": "void json_set_array(json j, string key, vector<string> value)"
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<double> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_double",
        "unique_method_name": "add_array_of_double",
        "suffix_name": null,
        "description": "Adds an array of `double` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "double"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_double",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetArray(j: Json; key: String; value: ArrayOfDouble)",
          "cpp": "void json_set_array(json j, string key, vector<double> value)"
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<bool> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_bool",
        "unique_method_name": "add_array_of_bool",
        "suffix_name": null,
        "description": "Adds an array of `bool` values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "bool"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_bool",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetArray(j: Json; key: String; value: ArrayOfBoolean)",
          "cpp": "void json_set_array(json j, string key, vector<bool> value)"
        }
      },
      {
        "signature": "void json_set_array(json j,string key,vector<json> value);",
        "name": "json_set_array",
        "method_name": "add_array",
        "unique_global_name": "json_set_array_of_json",
        "unique_method_name": "add_array_of_json",
        "suffix_name": null,
        "description": "Adds an array of `json` object values to the `json` object for\nthe given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": true,
            "type_parameter": "json"
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_array",
          "self": "j",
          "suffix": "of_json",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetArray(j: Json; key: String; value: ArrayOfJson)",
          "cpp": "void json_set_array(json j, string key, vector<json> value)"
        }
      },
      {
        "signature": "void json_set_bool(json j,string key,bool value);",
        "name": "json_set_bool",
        "method_name": "add_bool",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `bool` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_bool",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetBool(j: Json; key: String; value: Boolean)",
          "cpp": "void json_set_bool(json j, string key, bool value)"
        }
      },
      {
        "signature": "void json_set_number(json j,string key,int value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds an `int` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "int",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetNumber(j: Json; key: String; value: Integer)",
          "cpp": "void json_set_number(json j, string key, int value)"
        }
      },
      {
        "signature": "void json_set_number(json j,string key,double value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `double` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "double",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetNumber(j: Json; key: String; value: Double)",
          "cpp": "void json_set_number(json j, string key, double value)"
        }
      },
      {
        "signature": "void json_set_number(json j,string key,float value);",
        "name": "json_set_number",
        "method_name": "add_number",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `float` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_number",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetNumber(j: Json; key: String; value: Single)",
          "cpp": "void json_set_number(json j, string key, float value)"
        }
      },
      {
        "signature": "void json_set_object(json j,string key,json obj);",
        "name": "json_set_object",
        "method_name": "add_object",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `json` object to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "obj": {
            "type": "json",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_object",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetObject(j: Json; key: String; obj: Json)",
          "cpp": "void json_set_object(json j, string key, json obj)"
        }
      },
      {
        "signature": "void json_set_string(json j,string key,string value);",
        "name": "json_set_string",
        "method_name": "add_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a `string` value to the `json` object for the given `string` key.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object where data will be inserted for the given key.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "key": {
            "type": "string",
            "description": "The `string` key where data will be stored in the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "string",
            "description": "The value to be inserted into the `json` object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "json",
          "method": "add_string",
          "self": "j",
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "procedure JsonSetString(j: Json; key: String; value: String)",
          "cpp": "void json_set_string(json j, string key, string value)"
        }
      },
      {
        "signature": "color json_to_color(json j);",
        "name": "json_to_color",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts a `json` object to a `color` object.",
        "brief": null,
        "return": {
          "type": "color",
          "description": "The `color` deserialized from the `json` object.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` to convert to a `color`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "json",
          "static": "json"
        },
        "signatures": {
          "pascal": "function JsonToColor(j: Json): Color",
          "cpp": "color json_to_color(json j)"
        }
      },
      {
        "signature": "void json_to_file(json j,const string& filename);",
        "name": "json_to_file",
        "method_name": "to_file",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to be written to file.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename of the file to be stored in `Resources/json/`",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_file",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "pascal": "procedure JsonToFile(j: Json; const filename: String)",
          "cpp": "void json_to_file(json j, const string &filename)"
        }
      },
      {
        "signature": "string json_to_string(json j);",
        "name": "json_to_string",
        "method_name": "to_json_string",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts and returns the `json` object as a `string`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the `json` object as a `string`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "j": {
            "type": "json",
            "description": "The `json` object to be converted to a `string`.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "method": "to_json_string",
          "static": "json",
          "group": "json"
        },
        "signatures": {
          "pascal": "function JsonToString(j: Json): String",
          "cpp": "string json_to_string(json j)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_json *json;",
        "name": "json",
        "description": "The `json` type is used to refer to objects in the JSON format that can be\nmanipulated by the SplashKit `json` functions and procedures.\n\n\nAll `json` objects are:\n\n\n- created with `create_json()` or `create_json(string s)` or\n`json_from_string(string s)` or `json_from_file(json j)`\n\n\n- and must be released using `free_json()` (to release a specific `json object)\nor `free_all_json()` (to release all loaded `json objects).",
        "brief": null,
        "attributes": {
          "class": "json",
          "group": "json",
          "static": "json"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "networking": {
    "brief": "SplashKit's network-related functions allow you to communicate data\nacross networks.",
    "description": "",
    "functions": [
      {
        "signature": "string dec_to_hex(unsigned int a_dec);",
        "name": "dec_to_hex",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts the supplied decimal integer into it's hexadecimal representation.\ne.g. 0x7F000001 from 2130706433",
        "brief": "Converts a decimal integer into a hexadecimal string",
        "return": {
          "type": "string",
          "description": "hexadecimal representation of the supplied decimal integer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_dec": {
            "type": "unsigned int",
            "description": "decimal to be converted to a hexadecimal number string",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function DecToHex(aDec: Cardinal): String",
          "cpp": "string dec_to_hex(unsigned int a_dec)"
        }
      },
      {
        "signature": "string hex_str_to_ipv4(const string &a_hex);",
        "name": "hex_str_to_ipv4",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is translated into ipv4 standard address string.\nFunction handles hex strings starting with or without 0x.\ne.g. 127.0.0.1 from 0x7F000001",
        "brief": "Converts a hexadecimal ipv4 string to standard ipv4 address string x.x.x.x",
        "return": {
          "type": "string",
          "description": "standard ipv4 address using format X.X.X.X",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "hexadecimal ipv4 string to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function HexStrToIpv4(const aHex: String): String",
          "cpp": "string hex_str_to_ipv4(const string &a_hex)"
        }
      },
      {
        "signature": "string hex_to_dec_string(const string &a_hex);",
        "name": "hex_to_dec_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The supplied hexadecimal string is converted into it's decimal representation\ne.g. 7F into 127",
        "brief": "Converts a hexadecimal string to a decimal string",
        "return": {
          "type": "string",
          "description": "decimal representation of supplied hex string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_hex": {
            "type": "string",
            "description": "hexadecimal string to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function HexToDecString(const aHex: String): String",
          "cpp": "string hex_to_dec_string(const string &a_hex)"
        }
      },
      {
        "signature": "unsigned int ipv4_to_dec(const string &a_ip);",
        "name": "ipv4_to_dec",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Encodes the supplied ipv4 address string (in format X.X.X.X) into a single integer\ne.g. 127.0.0.1 into 2130706433",
        "brief": "Encodes ipv4 string into single integer",
        "return": {
          "type": "unsigned int",
          "description": "encoded ipv4 string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "ipv4 address to encode",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function Ipv4ToDec(const aIp: String): Cardinal",
          "cpp": "unsigned int ipv4_to_dec(const string &a_ip)"
        }
      },
      {
        "signature": "string ipv4_to_hex(const string& a_ip);",
        "name": "ipv4_to_hex",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Converts an ipv4 address into it's hexadecimal representation\ne.g. 0x7F000001 from 127.0.0.1",
        "brief": "Converts an ipv4 address string to hex representation",
        "return": {
          "type": "string",
          "description": "hexadecimal representation of ipc4 string",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "a_ip": {
            "type": "string",
            "description": "ip address to convert",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function Ipv4ToHex(const aIp: String): String",
          "cpp": "string ipv4_to_hex(const string &a_ip)"
        }
      },
      {
        "signature": "string ipv4_to_str(unsigned int ip);",
        "name": "ipv4_to_str",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Decodes the supplied unsigned 32 bit integer into it's ipv4 address form\ne.g. 2130706433 into 127.0.0.1",
        "brief": "Decodes an integer into it's ipv4 address representation",
        "return": {
          "type": "string",
          "description": "ipv4 address string in X.X.X.X format",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ip": {
            "type": "unsigned int",
            "description": "integer to be decoded",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function Ipv4ToStr(ip: Cardinal): String",
          "cpp": "string ipv4_to_str(unsigned int ip)"
        }
      },
      {
        "signature": "string my_ip();",
        "name": "my_ip",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the ipv4 string of the localhost loopback for the current computer.",
        "brief": "Returns the ipv4 string for the current computer's ip",
        "return": {
          "type": "string",
          "description": "ipv4 address string in X.X.X.X format",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        },
        "signatures": {
          "pascal": "function MyIp(): String",
          "cpp": "string my_ip()"
        }
      },
      {
        "signature": "bitmap download_bitmap(const string &name,const string &url,unsigned short port);",
        "name": "download_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download an image from a web server and load it into SplashKit so that\nyou can use it.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bitmap resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the image resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function DownloadBitmap(const name: String; const url: String; port: Word): Bitmap",
          "cpp": "bitmap download_bitmap(const string &name, const string &url, unsigned short port)"
        }
      },
      {
        "signature": "font download_font(const string &name,const string &url,unsigned short port);",
        "name": "download_font",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a font from a web server and load it into SplashKit so that\nyou can use it.",
        "brief": null,
        "return": {
          "type": "font",
          "description": "The font that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the font resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the font resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function DownloadFont(const name: String; const url: String; port: Word): Font",
          "cpp": "font download_font(const string &name, const string &url, unsigned short port)"
        }
      },
      {
        "signature": "music download_music(const string &name,const string &url,unsigned short port);",
        "name": "download_music",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a music file from a web server and load it into SplashKit so\nthat you can use it.",
        "brief": null,
        "return": {
          "type": "music",
          "description": "The music that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the music resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the music resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function DownloadMusic(const name: String; const url: String; port: Word): Music",
          "cpp": "music download_music(const string &name, const string &url, unsigned short port)"
        }
      },
      {
        "signature": "sound_effect download_sound_effect(const string &name,const string &url,unsigned short port);",
        "name": "download_sound_effect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Download a sound effect from a web server and load it into SplashKit so\nthat you can use it.",
        "brief": null,
        "return": {
          "type": "sound_effect",
          "description": "The sound effect that was loaded",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sound effect resource when it is loaded",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "url": {
            "type": "string",
            "description": "The URL path to the sound effect resoure",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function DownloadSoundEffect(const name: String; const url: String; port: Word): SoundEffect",
          "cpp": "sound_effect download_sound_effect(const string &name, const string &url, unsigned short port)"
        }
      },
      {
        "signature": "void free_response (http_response response);",
        "name": "free_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the response resource.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response to free",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "procedure FreeResponse(response: HttpResponse)",
          "cpp": "void free_response(http_response response)"
        }
      },
      {
        "signature": "http_response http_get(const string &url,unsigned short port);",
        "name": "http_get",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Make a get request to access a resource on the internet.",
        "brief": null,
        "return": {
          "type": "http_response",
          "description": "The response with all of the data received",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "url": {
            "type": "string",
            "description": "The path to the resource, for example http://splashkit.io",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port on the server (80 for http, 443 for https)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function HttpGet(const url: String; port: Word): HttpResponse",
          "cpp": "http_response http_get(const string &url, unsigned short port)"
        }
      },
      {
        "signature": "http_response http_post(const string &url,unsigned short port,string body);",
        "name": "http_post",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Post the supplied information to the indicated url.",
        "brief": null,
        "return": {
          "type": "http_response",
          "description": "The response from the server",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "url": {
            "type": "string",
            "description": "The url of the server to post the data to",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "port": {
            "type": "unsigned short",
            "description": "The port to connect to on the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "body": {
            "type": "string",
            "description": "The body of the message to post",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function HttpPost(const url: String; port: Word; body: String): HttpResponse",
          "cpp": "http_response http_post(const string &url, unsigned short port, string body)"
        }
      },
      {
        "signature": "string http_response_to_string(http_response response);",
        "name": "http_response_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read the HTTP response and convert it to text",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The data from the response as text",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response from the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "function HttpResponseToString(response: HttpResponse): String",
          "cpp": "string http_response_to_string(http_response response)"
        }
      },
      {
        "signature": "void save_response_to_file(http_response response,string path);",
        "name": "save_response_to_file",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Save the HTTP response downloaded into a file.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "response": {
            "type": "http_response",
            "description": "The response from the server",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The path to the file where the response should be saved",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking"
        },
        "signatures": {
          "pascal": "procedure SaveResponseToFile(response: HttpResponse; path: String)",
          "cpp": "void save_response_to_file(http_response response, string path)"
        }
      },
      {
        "signature": "bool has_incoming_requests(web_server server);",
        "name": "has_incoming_requests",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the given `web_sever` has pending requests.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "Returns a `bool` denoting whether the `web_server` has pending requests.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The `web_server` to check for waiting requests.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function HasIncomingRequests(server: WebServer): Boolean",
          "cpp": "bool has_incoming_requests(web_server server)"
        }
      },
      {
        "signature": "bool is_delete_request_for(http_request request,const string &path);",
        "name": "is_delete_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to delete a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP DELETE request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsDeleteRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_delete_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "bool is_get_request_for(http_request request,const string &path);",
        "name": "is_get_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to get a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP GET request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsGetRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_get_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "bool is_options_request_for(http_request request,const string &path);",
        "name": "is_options_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to check options for given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP OPTIONS request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsOptionsRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_options_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "bool is_post_request_for(http_request request,const string &path);",
        "name": "is_post_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to create (post) a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP POST request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsPostRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_post_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "bool is_put_request_for(http_request request,const string &path);",
        "name": "is_put_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to update (put) a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP PUT request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsPutRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_put_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "bool is_request_for(http_request request,http_method method,const string &path);",
        "name": "is_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request is after a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is for the indicated method and path",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "method": {
            "type": "http_method",
            "description": "The kind of request",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsRequestFor(request: HttpRequest; method: HttpMethod; const path: String): Boolean",
          "cpp": "bool is_request_for(http_request request, http_method method, const string &path)"
        }
      },
      {
        "signature": "bool is_trace_request_for(http_request request,const string &path);",
        "name": "is_trace_request_for",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Checks if a request wants to trace a given resource.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the request is a HTTP TRACE request for `path`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "request": {
            "type": "http_request",
            "description": "The request to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "path": {
            "type": "string",
            "description": "The resource/route path",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function IsTraceRequestFor(request: HttpRequest; const path: String): Boolean",
          "cpp": "bool is_trace_request_for(http_request request, const string &path)"
        }
      },
      {
        "signature": "http_request next_web_request(web_server server);",
        "name": "next_web_request",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the next request on a given `web_server` instance",
        "brief": null,
        "return": {
          "type": "http_request",
          "description": "Returns the next request on the given `web_server` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The `web_server` to get the `http_request` from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function NextWebRequest(server: WebServer): HttpRequest",
          "cpp": "http_request next_web_request(web_server server)"
        }
      },
      {
        "signature": "string request_body(http_request r);",
        "name": "request_body",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the body of the request.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The body of the request.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function RequestBody(r: HttpRequest): String",
          "cpp": "string request_body(http_request r)"
        }
      },
      {
        "signature": "http_method request_method(http_request r);",
        "name": "request_method",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the HTTP method of the client request.",
        "brief": null,
        "return": {
          "type": "http_method",
          "description": "Returns the request method.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function RequestMethod(r: HttpRequest): HttpMethod",
          "cpp": "http_method request_method(http_request r)"
        }
      },
      {
        "signature": "string request_uri(http_request r);",
        "name": "request_uri",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the server URI of the client request.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Returns the requested URI in the form of a string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "A request object.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function RequestUri(r: HttpRequest): String",
          "cpp": "string request_uri(http_request r)"
        }
      },
      {
        "signature": "vector<string> request_uri_stubs(http_request r);",
        "name": "request_uri_stubs",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to http://localhost:8080/names/0 returns...\n\n[\"names\", \"0\"]",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The array of stubs as strings.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request for retrieving URI to split into stubs.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function RequestUriStubs(r: HttpRequest): ArrayOfString",
          "cpp": "vector<string> request_uri_stubs(http_request r)"
        }
      },
      {
        "signature": "void send_html_file_response(http_request r,const string &filename);",
        "name": "send_html_file_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Serves a HTML file to the given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The name of the file in Resources/server",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_response",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendHtmlFileResponse(r: HttpRequest; const filename: String)",
          "cpp": "void send_html_file_response(http_request r, const string &filename)"
        }
      },
      {
        "signature": "void send_response(http_request r);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a response with no content to a `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "self": "r",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest)",
          "cpp": "void send_response(http_request r)"
        }
      },
      {
        "signature": "void send_response(http_request r,const string &message);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a message to a given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The message to be sent",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_response",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest; const message: String)",
          "cpp": "void send_response(http_request r, const string &message)"
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a response code to a given `http_request`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "self": "r",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest; code: HttpStatusCode)",
          "cpp": "void send_response(http_request r, http_status_code code)"
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code,const string &message);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a message to a given `http_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The messsage, in the form of a `http_response`, to be sent.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "self": "r",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String)",
          "cpp": "void send_response(http_request r, http_status_code code, const string &message)"
        }
      },
      {
        "signature": "void send_response(http_request r,http_status_code code,const string &message,const string &content_type);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends a message to a given `http_request` with the specified content type.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The `http_request` to send the response to",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "code": {
            "type": "http_status_code",
            "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "message": {
            "type": "string",
            "description": "The messsage, in the form of a `http_response`, to be sent.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the response.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_request",
          "self": "r",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String; const contentType: String)",
          "cpp": "void send_response(http_request r, http_status_code code, const string &message, const string &content_type)"
        }
      },
      {
        "signature": "void send_response(http_request r,json j);",
        "name": "send_response",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Send a JSON response to a given `http_request`",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "r": {
            "type": "http_request",
            "description": "The request the response belongs to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "j": {
            "type": "json",
            "description": "The json to be sent.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "http_response",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure SendResponse(r: HttpRequest; j: Json)",
          "cpp": "void send_response(http_request r, json j)"
        }
      },
      {
        "signature": "vector<string> split_uri_stubs(const string &uri);",
        "name": "split_uri_stubs",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to http://localhost:8080/names/0 returns...\n\n[\"names\", \"0\"]",
        "brief": null,
        "return": {
          "type": "vector",
          "description": "The array of stubs as strings.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": true,
          "type_parameter": "string"
        },
        "parameters": {
          "uri": {
            "type": "string",
            "description": "The URI to split into stubs.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function SplitUriStubs(const uri: String): ArrayOfString",
          "cpp": "vector<string> split_uri_stubs(const string &uri)"
        }
      },
      {
        "signature": "web_server start_web_server();",
        "name": "start_web_server",
        "method_name": "start",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a new web server instance and starts it.",
        "brief": null,
        "return": {
          "type": "web_server",
          "description": "Returns a new `web_sever` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "method": "start",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function StartWebServer(): WebServer",
          "cpp": "web_server start_web_server()"
        }
      },
      {
        "signature": "web_server start_web_server(unsigned short port);",
        "name": "start_web_server",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Starts the web server on a given port number.",
        "brief": null,
        "return": {
          "type": "web_server",
          "description": "Returns a new `web_server` instance.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "port": {
            "type": "unsigned short",
            "description": "The port number to connect through.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "constructor": true,
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "function StartWebServer(port: Word): WebServer",
          "cpp": "web_server start_web_server(unsigned short port)"
        }
      },
      {
        "signature": "void stop_web_server(web_server server);",
        "name": "stop_web_server",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stops a given `web_server` instance.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "server": {
            "type": "web_server",
            "description": "The server instance to stop.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "web_server",
          "destructor": true,
          "method": "stop",
          "self": "server",
          "group": "networking",
          "static": "web_server"
        },
        "signatures": {
          "pascal": "procedure StopWebServer(server: WebServer)",
          "cpp": "void stop_web_server(web_server server)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct sk_connection_data *connection;",
        "name": "connection",
        "description": "A connection represents the communication channel from a client going to\na server. This can be used for the client and the server to send and\nreceive messages.",
        "brief": null,
        "attributes": {
          "class": "connection",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_message *message;",
        "name": "message",
        "description": "A message contains data that has been transferred between a client\nconnection and a server (or visa versa).",
        "brief": null,
        "attributes": {
          "class": "message",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_server_data *server_socket;",
        "name": "server_socket",
        "description": "A server represents a network resource that clients can connect to. The\nserver will receive messages from all of the client connections, and can\nbe used to access the clients connected to the server.",
        "brief": null,
        "attributes": {
          "class": "server_socket",
          "group": "networking",
          "static": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_http_response *http_response;",
        "name": "http_response",
        "description": "A HTTP response is a resource that comes back from a HTTP request. This\nmay be the text related to a web page, or the data related to a resource.\nOnce you have used the response, you need to make sure to call\n`free_response`.",
        "brief": null,
        "attributes": {
          "class": "http_response",
          "group": "networking"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_http_request *http_request;",
        "name": "http_request",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "http_request",
          "group": "networking",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_web_server *web_server;",
        "name": "web_server",
        "description": null,
        "brief": null,
        "attributes": {
          "class": "web_server",
          "group": "networking",
          "static": "web_server"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum connection_type {TCP,UDP,UNKNOWN};",
        "name": "connection_type",
        "description": "The kind of protocol used for a server of connection.",
        "brief": null,
        "constants": {
          "TCP": {
            "description": "Uses the TCP protocol. SplashKit can send messages of any\nsize, and repackage it from you at the other end. Messages\nare reliably transferred."
          },
          "UDP": {
            "description": "Uses the UDP protocol. SplashKit will send messages of up\nto 1024 bytes (by default). You need to handle packaging\nanything larger than this."
          },
          "UNKNOWN": {
            "description": "The protocol is unknown, usually due to the connection\nor server being invalid or closed."
          }
        },
        "attributes": {
          "group": "networking",
          "static": "networking"
        }
      },
      {
        "signature": "enum http_method {HTTP_GET_METHOD,HTTP_POST_METHOD,HTTP_PUT_METHOD,HTTP_DELETE_METHOD,HTTP_OPTIONS_METHOD,HTTP_TRACE_METHOD,UNKNOWN_HTTP_METHOD};",
        "name": "http_method",
        "description": "The method token is used to indicate the kind of action to be performed\non the server. See [W3 specifications](https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html).",
        "brief": null,
        "constants": {
          "HTTP_GET_METHOD": {
            "description": "A get method"
          },
          "HTTP_POST_METHOD": {
            "description": "A post method"
          },
          "HTTP_PUT_METHOD": {
            "description": "A put method"
          },
          "HTTP_DELETE_METHOD": {
            "description": "A delete method"
          },
          "HTTP_OPTIONS_METHOD": {
            "description": "An options method"
          },
          "HTTP_TRACE_METHOD": {
            "description": "A trace method"
          },
          "UNKNOWN_HTTP_METHOD": {
            "description": "A method not recognised by SplashKit"
          }
        },
        "attributes": {
          "group": "networking",
          "static": "web_server"
        }
      }
    ],
    "defines": [

    ]
  },
  "physics": {
    "brief": "SplashKit Collisions library allow you to perform tests between\nbitmaps, sprites and shapes to determin if a collision has occured.Provides matrix functions to work on 2d coordinates.Provides vector functions to work on vectors.",
    "description": "",
    "functions": [
      {
        "signature": "bool bitmap_collision(bitmap bmp1,float x1,float y1,bitmap bmp2,float x2,float y2);",
        "name": "bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The x location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The y location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The x location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The y location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapCollision(bmp1: Bitmap; x1: Single; y1: Single; bmp2: Bitmap; x2: Single; y2: Single): Boolean",
          "cpp": "bool bitmap_collision(bitmap bmp1, float x1, float y1, bitmap bmp2, float x2, float y2)"
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,const point_2d &pt1,bitmap bmp2,const point_2d &pt2);",
        "name": "bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "The point where bitmap 1 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The point where bitmap 2 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapCollision(bmp1: Bitmap; const pt1: Point2d; bmp2: Bitmap; const pt2: Point2d): Boolean",
          "cpp": "bool bitmap_collision(bitmap bmp1, const point_2d &pt1, bitmap bmp2, const point_2d &pt2)"
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,const matrix_2d &matrix1,bitmap bmp2,int cell2,const matrix_2d &matrix2);",
        "name": "bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if two bitmaps collide, based on their cell and transform\nmatricies.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "matrix1": {
            "type": "matrix_2d",
            "description": "The transformation for the first matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "matrix2": {
            "type": "matrix_2d",
            "description": "The transformation for the second matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapCollision(bmp1: Bitmap; cell1: Integer; const matrix1: Matrix2d; bmp2: Bitmap; cell2: Integer; const matrix2: Matrix2d): Boolean",
          "cpp": "bool bitmap_collision(bitmap bmp1, int cell1, const matrix_2d &matrix1, bitmap bmp2, int cell2, const matrix_2d &matrix2)"
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,const point_2d &pt1,bitmap bmp2,int cell2,const point_2d &pt2);",
        "name": "bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt1": {
            "type": "point_2d",
            "description": "The point where bitmap 1 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt2": {
            "type": "point_2d",
            "description": "The point where bitmap 2 is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapCollision(bmp1: Bitmap; cell1: Integer; const pt1: Point2d; bmp2: Bitmap; cell2: Integer; const pt2: Point2d): Boolean",
          "cpp": "bool bitmap_collision(bitmap bmp1, int cell1, const point_2d &pt1, bitmap bmp2, int cell2, const point_2d &pt2)"
        }
      },
      {
        "signature": "bool bitmap_collision(bitmap bmp1,int cell1,float x1,float y1,bitmap bmp2,int cell2,float x2,float y2);",
        "name": "bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Check if two bitmaps collide.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if pixels in the two bitmaps would collide/overlap",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp1": {
            "type": "bitmap",
            "description": "The first bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell1": {
            "type": "int",
            "description": "The cell of the first bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x1": {
            "type": "float",
            "description": "The x location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y1": {
            "type": "float",
            "description": "The y location where the first bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp2": {
            "type": "bitmap",
            "description": "The second bitmap",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell2": {
            "type": "int",
            "description": "The cell of the second bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x2": {
            "type": "float",
            "description": "The x location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y2": {
            "type": "float",
            "description": "The y location where the second bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapCollision(bmp1: Bitmap; cell1: Integer; x1: Single; y1: Single; bmp2: Bitmap; cell2: Integer; x2: Single; y2: Single): Boolean",
          "cpp": "bool bitmap_collision(bitmap bmp1, int cell1, float x1, float y1, bitmap bmp2, int cell2, float x2, float y2)"
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap drawn using the passed in translation matrix would draw a pixel\nat the passed in point. Use to check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The translation matrix that represents the position, scale,\nand rotation of the bitmap when it is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapPointCollision(bmp: Bitmap; const translation: Matrix2d; const pt: Point2d): Boolean",
          "cpp": "bool bitmap_point_collision(bitmap bmp, const matrix_2d &translation, const point_2d &pt)"
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,const point_2d &bmp_pt,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at the `bmp_pt` point would draw a pixel\nat the passed in point. Use to check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, at `bmp_pt`,\nwill draw a pixel at the indicated point (`pt`).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapPointCollision(bmp: Bitmap; const pt: Point2d; const bmpPt: Point2d): Boolean",
          "cpp": "bool bitmap_point_collision(bitmap bmp, const point_2d &pt, const point_2d &bmp_pt)"
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,float bmp_x,float bmp_y,float x,float y);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap drawn at x,y would draw a pixel at the passed in point. Use \nto check collisions between a point and a bitmap.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, at `bmp_pt`,\nwill draw a pixel at the indicated point (`pt`).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_x": {
            "type": "float",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp_y": {
            "type": "float",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location of the point to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapPointCollision(bmp: Bitmap; bmpX: Single; bmpY: Single; x: Single; y: Single): Boolean",
          "cpp": "bool bitmap_point_collision(bitmap bmp, float bmp_x, float bmp_y, float x, float y)"
        }
      },
      {
        "signature": "bool bitmap_point_collision(bitmap bmp,int cell,const matrix_2d& translation,const point_2d& pt);",
        "name": "bitmap_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using the passed in translation matrix would draw a pixel\nat the passed in point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if drawing the bitmap, using the passed in translation,\nwill draw a pixel at the indicated point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The translation matrix that represents the position, scale,\nand rotation of the bitmap when it is drawn.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point in the resulting drawing that is being tested.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapPointCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2d; const pt: Point2d): Boolean",
          "cpp": "bool bitmap_point_collision(bitmap bmp, int cell, const matrix_2d &translation, const point_2d &pt)"
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,int cell,const matrix_2d& translation,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn using a passed in translation, will\nintersect with a rectangle. You can use this to detect collisions between\nbitmaps and rectangles.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translation": {
            "type": "matrix_2d",
            "description": "The matrix used to transfrom the bitmap when drawing",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapRectangleCollision(bmp: Bitmap; cell: Integer; const translation: Matrix2d; const rect: Rectangle): Boolean",
          "cpp": "bool bitmap_rectangle_collision(bitmap bmp, int cell, const matrix_2d &translation, const rectangle &rect)"
        }
      },
      {
        "signature": "bool bitmap_rectangle_collision(bitmap bmp,int cell,const point_2d& pt,const rectangle& rect);",
        "name": "bitmap_rectangle_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a bitmap cell drawn at `pt` would intersect with a rectangle.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a drawn pixel in the cell of the bitmap will\nintersect with `rect` when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to test",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function BitmapRectangleCollision(bmp: Bitmap; cell: Integer; const pt: Point2d; const rect: Rectangle): Boolean",
          "cpp": "bool bitmap_rectangle_collision(bitmap bmp, int cell, const point_2d &pt, const rectangle &rect)"
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,float x,float y);",
        "name": "sprite_bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; x: Single; y: Single): Boolean",
          "cpp": "bool sprite_bitmap_collision(sprite s, bitmap bmp, float x, float y)"
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,int cell,const point_2d &pt);",
        "name": "sprite_bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap cell when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point where the bitmap is drawn",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; cell: Integer; const pt: Point2d): Boolean",
          "cpp": "bool sprite_bitmap_collision(sprite s, bitmap bmp, int cell, const point_2d &pt)"
        }
      },
      {
        "signature": "bool sprite_bitmap_collision(sprite s,bitmap bmp,int cell,float x,float y);",
        "name": "sprite_bitmap_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a sprite will collide with a bitmap drawn at the indicated\nlocation.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite collides with the bitmap cell when drawn\nat the indicated location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The bitmap to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "cell": {
            "type": "int",
            "description": "The cell of the bitmap to check",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location where the bitmap is drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpriteBitmapCollision(s: Sprite; bmp: Bitmap; cell: Integer; x: Single; y: Single): Boolean",
          "cpp": "bool sprite_bitmap_collision(sprite s, bitmap bmp, int cell, float x, float y)"
        }
      },
      {
        "signature": "bool sprite_collision(sprite s1,sprite s2);",
        "name": "sprite_collision",
        "method_name": "collide_with_sprite",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if two given sprites `s1` and `s2` are collided",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "return `true` if both `s1` and `s2` are colliding, false otherwise.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "the first `sprite` to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s2": {
            "type": "sprite",
            "description": "the second `sprite` to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "collide_with_sprite",
          "self": "s1",
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpriteCollision(s1: Sprite; s2: Sprite): Boolean",
          "cpp": "bool sprite_collision(sprite s1, sprite s2)"
        }
      },
      {
        "signature": "bool sprite_point_collision(sprite s,const point_2d& pt);",
        "name": "sprite_point_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a sprite is drawn at a given point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite it drawn at the indicated point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpritePointCollision(s: Sprite; const pt: Point2d): Boolean",
          "cpp": "bool sprite_point_collision(sprite s, const point_2d &pt)"
        }
      },
      {
        "signature": "bool sprite_rectangle_collision(sprite s,const rectangle& rect);",
        "name": "sprite_rectangle_collision",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Tests if a sprite is drawn within an given area (rectangle).",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite it drawn in the rectangle area",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to check",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "collisions"
        },
        "signatures": {
          "pascal": "function SpriteRectangleCollision(s: Sprite; const rect: Rectangle): Boolean",
          "cpp": "bool sprite_rectangle_collision(sprite s, const rectangle &rect)"
        }
      },
      {
        "signature": "void apply_matrix(const matrix_2d &matrix,quad &q);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a quad.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "The matrix with the transformations needed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "q": {
            "type": "quad",
            "description": "The quad to transform.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "procedure ApplyMatrix(const matrix: Matrix2d; var q: Quad)",
          "cpp": "void apply_matrix(const matrix_2d &matrix, quad &q)"
        }
      },
      {
        "signature": "void apply_matrix(const matrix_2d &m,triangle &tri);",
        "name": "apply_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Use a matrix to transform all of the points in a triangle.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix to be applied to the triangle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "tri": {
            "type": "triangle",
            "description": "The triangle to tranform.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "procedure ApplyMatrix(const m: Matrix2d; var tri: Triangle)",
          "cpp": "void apply_matrix(const matrix_2d &m, triangle &tri)"
        }
      },
      {
        "signature": "matrix_2d identity_matrix();",
        "name": "identity_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the identity matrix. When a matrix_2d or Vector is multiplied by\nthe identity matrix the result is the original matrix or vector.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "An identify matrix.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function IdentityMatrix(): Matrix2d",
          "cpp": "matrix_2d identity_matrix()"
        }
      },
      {
        "signature": "matrix_2d matrix_inverse(const matrix_2d &m);",
        "name": "matrix_inverse",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculate the inverse of a matrix.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that is the inverse of m",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix to invert.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function MatrixInverse(const m: Matrix2d): Matrix2d",
          "cpp": "matrix_2d matrix_inverse(const matrix_2d &m)"
        }
      },
      {
        "signature": "point_2d matrix_multiply(const matrix_2d &m,const point_2d &pt);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `point_2d` parameter `v with the `matrix_2d` `m and\nreturns the result as a `point_2d`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "A new point, the result of applying the transformation to pt.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix with the transformation to apply.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to be transformed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function MatrixMultiply(const m: Matrix2d; const pt: Point2d): Point2d",
          "cpp": "point_2d matrix_multiply(const matrix_2d &m, const point_2d &pt)"
        }
      },
      {
        "signature": "matrix_2d matrix_multiply(const matrix_2d &m1,const matrix_2d &m2);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the two `matrix_2d` parameters, `m1` by `m2`, and returns\nthe result as a new `matrix_2d`. Use this to combine the effects to two\nmatrix transformations.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "The result of multiplying m1 by m2",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m1": {
            "type": "matrix_2d",
            "description": "The first matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "m2": {
            "type": "matrix_2d",
            "description": "The second matrix",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function MatrixMultiply(const m1: Matrix2d; const m2: Matrix2d): Matrix2d",
          "cpp": "matrix_2d matrix_multiply(const matrix_2d &m1, const matrix_2d &m2)"
        }
      },
      {
        "signature": "vector_2d matrix_multiply(const matrix_2d &m,const vector_2d &v);",
        "name": "matrix_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the `Vector` parameter `v` with the `matrix_2d` `m` and\nreturns the result as a `Vector`. Use this to transform the vector with\nthe matrix (to apply scaling, rotation or translation effects).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector, the result of applying the transformation to v.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "m": {
            "type": "matrix_2d",
            "description": "The matrix with the transformation to apply.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v": {
            "type": "vector_2d",
            "description": "The vector to be transformed.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function MatrixMultiply(const m: Matrix2d; const v: Vector2d): Vector2d",
          "cpp": "vector_2d matrix_multiply(const matrix_2d &m, const vector_2d &v)"
        }
      },
      {
        "signature": "string matrix_to_string(const matrix_2d &matrix);",
        "name": "matrix_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This function returns a string representation of a Matrix.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the matrix.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "matrix": {
            "type": "matrix_2d",
            "description": "The matrix to convert to a string.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function MatrixToString(const matrix: Matrix2d): String",
          "cpp": "string matrix_to_string(const matrix_2d &matrix)"
        }
      },
      {
        "signature": "matrix_2d rotation_matrix(float deg);",
        "name": "rotation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rotation matrix that rotates 2d points by the angle.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that encodes the rotation by a number of degrees.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "deg": {
            "type": "float",
            "description": "The amount to rotate points",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function RotationMatrix(deg: Single): Matrix2d",
          "cpp": "matrix_2d rotation_matrix(float deg)"
        }
      },
      {
        "signature": "matrix_2d scale_matrix(const point_2d &scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a scale matrix that scales x and y to\ndifferent degrees.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will scale points based on scale parameter.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "The amount to scale, with separate x and y components.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function ScaleMatrix(const scale: Point2d): Matrix2d",
          "cpp": "matrix_2d scale_matrix(const point_2d &scale)"
        }
      },
      {
        "signature": "matrix_2d scale_matrix(float scale);",
        "name": "scale_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to scale 2d points (both x and y).",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix to scale points by.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "float",
            "description": "The amount to scale points by.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function ScaleMatrix(scale: Single): Matrix2d",
          "cpp": "matrix_2d scale_matrix(float scale)"
        }
      },
      {
        "signature": "matrix_2d scale_rotate_translate_matrix(const point_2d &scale,float deg,const point_2d &translate);",
        "name": "scale_rotate_translate_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a matrix that can scale, rotate then translate geometry points.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will scale, rotate, and translate.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "scale": {
            "type": "point_2d",
            "description": "The amount to scale",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "deg": {
            "type": "float",
            "description": "The amount to rotate",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "translate": {
            "type": "point_2d",
            "description": "The amount to move",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function ScaleRotateTranslateMatrix(const scale: Point2d; deg: Single; const translate: Point2d): Matrix2d",
          "cpp": "matrix_2d scale_rotate_translate_matrix(const point_2d &scale, float deg, const point_2d &translate)"
        }
      },
      {
        "signature": "matrix_2d translation_matrix(const point_2d &pt);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a translation matric used to translate 2d points by the\ndistance in the point_2d.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will move points by amount in pt",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point to translate to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function TranslationMatrix(const pt: Point2d): Matrix2d",
          "cpp": "matrix_2d translation_matrix(const point_2d &pt)"
        }
      },
      {
        "signature": "matrix_2d translation_matrix(float dx,float dy);",
        "name": "translation_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to translate 2d points. Moving them\nby dx and dy.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that will move points by dx, dy",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "dx": {
            "type": "float",
            "description": "The amount to move points along the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "dy": {
            "type": "float",
            "description": "The amount to move points along the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        },
        "signatures": {
          "pascal": "function TranslationMatrix(dx: Single; dy: Single): Matrix2d",
          "cpp": "matrix_2d translation_matrix(float dx, float dy)"
        }
      },
      {
        "signature": "float angle_between(const vector_2d &v1,const vector_2d &v2);",
        "name": "angle_between",
        "method_name": "angle_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the angle from one vector to another.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the line from the end of `v1` to the end of `v2`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The second vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "vector_2d",
          "method": "angle_to",
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function AngleBetween(const v1: Vector2d; const v2: Vector2d): Single",
          "cpp": "float angle_between(const vector_2d &v1, const vector_2d &v2)"
        }
      },
      {
        "signature": "float dot_product(const vector_2d &v1,const vector_2d &v2);",
        "name": "dot_product",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the dot product (scalar product) between the two vector\nparameters provided (`v1` and `v2`). It returns the result as a\nscalar value.\n\nIf the result is 0.0 it means that the vectors are orthogonal (at right\nangles to each other). If `v1` and `v2` are unit vectors (length of\n1.0) and the dot product is 1.0, it means that `v1` and `v2` vectors\nare parallel.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The dot product of `v1` . `v2`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function DotProduct(const v1: Vector2d; const v2: Vector2d): Single",
          "cpp": "float dot_product(const vector_2d &v1, const vector_2d &v2)"
        }
      },
      {
        "signature": "bool is_zero_vector(const vector_2d &v);",
        "name": "is_zero_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns if the vector is a null/zero vector -- having no size or direction.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if `v` has no magnitude.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function IsZeroVector(const v: Vector2d): Boolean",
          "cpp": "bool is_zero_vector(const vector_2d &v)"
        }
      },
      {
        "signature": "bool ray_intersection_point(const point_2d &from_pt,const vector_2d &heading,const line &l,point_2d &pt);",
        "name": "ray_intersection_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Casts a ray in a heading and returns true is it intersects with a line",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the line and ray will intersect, in which case\nthe value of `pt` will be changed to be the point where\nthe intersection occurs.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "from_pt": {
            "type": "point_2d",
            "description": "The origin of the ray",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "heading": {
            "type": "vector_2d",
            "description": "The direction the ray is heading (as a `vector_2d`)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "l": {
            "type": "line",
            "description": "The line to be checked",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "Outputs the point where the line and ray intersect",
            "is_pointer": false,
            "is_const": false,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function RayIntersectionPoint(const fromPt: Point2d; const heading: Vector2d; const l: Line; var pt: Point2d): Boolean",
          "cpp": "bool ray_intersection_point(const point_2d &from_pt, const vector_2d &heading, const line &l, point_2d &pt)"
        }
      },
      {
        "signature": "vector_2d unit_vector(const vector_2d &v);",
        "name": "unit_vector",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the unit vector of the parameter vector (v). The unit vector has a\nmagnitude of 1, resulting in a vector that indicates the direction of\nthe original vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The unit vector of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function UnitVector(const v: Vector2d): Vector2d",
          "cpp": "vector_2d unit_vector(const vector_2d &v)"
        }
      },
      {
        "signature": "vector_2d vector_add(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_add",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds the two passed in vectors returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The result of adding the movements of the two vectors\ntogether.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorAdd(const v1: Vector2d; const v2: Vector2d): Vector2d",
          "cpp": "vector_2d vector_add(const vector_2d &v1, const vector_2d &v2)"
        }
      },
      {
        "signature": "float vector_angle(const vector_2d v);",
        "name": "vector_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Calculates the angle of a vector",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the vector in degrees",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorAngle(v: Vector2d): Single",
          "cpp": "float vector_angle(const vector_2d v)"
        }
      },
      {
        "signature": "vector_2d vector_from_angle(float angle,float magnitude);",
        "name": "vector_from_angle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` from the supplied angle and distance.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things at that angle and\nmagnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "angle": {
            "type": "float",
            "description": "The angle in degrees",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "magnitude": {
            "type": "float",
            "description": "The length of the vector",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorFromAngle(angle: Single; magnitude: Single): Vector2d",
          "cpp": "vector_2d vector_from_angle(float angle, float magnitude)"
        }
      },
      {
        "signature": "vector_2d vector_from_line(const line &l);",
        "name": "vector_from_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that points from the start to the end of a line.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things from the start to the end of the\nline",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "l": {
            "type": "line",
            "description": "The line",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorFromLine(const l: Line): Vector2d",
          "cpp": "vector_2d vector_from_line(const line &l)"
        }
      },
      {
        "signature": "vector_2d vector_from_point_to_rect(const point_2d &pt,const rectangle &rect);",
        "name": "vector_from_point_to_rect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector from a point to a rectangle.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector representing the distance and direction from `pt`\nto `rect`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorFromPointToRect(const pt: Point2d; const rect: Rectangle): Vector2d",
          "cpp": "vector_2d vector_from_point_to_rect(const point_2d &pt, const rectangle &rect)"
        }
      },
      {
        "signature": "bool vector_in_rect(const vector_2d &v,const rectangle &rect);",
        "name": "vector_in_rect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the resulting vector would end in the rectangle if\nplaced at the origin.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the vector would end in the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorInRect(const v: Vector2d; const rect: Rectangle): Boolean",
          "cpp": "bool vector_in_rect(const vector_2d &v, const rectangle &rect)"
        }
      },
      {
        "signature": "vector_2d vector_invert(const vector_2d &v);",
        "name": "vector_invert",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new Vector that is an inverted version of the parameter\nvector (v). In other words, the -/+ sign of the x and y values are changed.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The inverse (reverse) of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorInvert(const v: Vector2d): Vector2d",
          "cpp": "vector_2d vector_invert(const vector_2d &v)"
        }
      },
      {
        "signature": "vector_2d vector_limit(const vector_2d &v,float limit);",
        "name": "vector_limit",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a scaled vector that ensures the new vector points\nin the same direction as v, but has a magnitude that is\nlimited to the length specified in the limit prameter.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector in the same direction as v, but with a\nmagnitude that is less than or equal to the limit.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "limit": {
            "type": "float",
            "description": "Its maximum magnitude",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorLimit(const v: Vector2d; limit: Single): Vector2d",
          "cpp": "vector_2d vector_limit(const vector_2d &v, float limit)"
        }
      },
      {
        "signature": "float vector_magnitude(const vector_2d &v);",
        "name": "vector_magnitude",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Its magnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorMagnitude(const v: Vector2d): Single",
          "cpp": "float vector_magnitude(const vector_2d &v)"
        }
      },
      {
        "signature": "float vector_magnitude_sqared(const vector_2d &v);",
        "name": "vector_magnitude_sqared",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the squared magnitude (or \"length\") of the vector.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Its squared magnitude",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorMagnitudeSqared(const v: Vector2d): Single",
          "cpp": "float vector_magnitude_sqared(const vector_2d &v)"
        }
      },
      {
        "signature": "vector_2d vector_multiply(const vector_2d &v1,float s);",
        "name": "vector_multiply",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Multiplies the vector by the passed in value.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A new vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The original vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s": {
            "type": "float",
            "description": "The amount to multiply by",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorMultiply(const v1: Vector2d; s: Single): Vector2d",
          "cpp": "vector_2d vector_multiply(const vector_2d &v1, float s)"
        }
      },
      {
        "signature": "vector_2d vector_normal(const vector_2d &v);",
        "name": "vector_normal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` that is perpendicular (\"normal\") to the parameter\nvector `v` provided. The concept of a \"normal\" vector is usually\nextracted from (or associated with) a line.\n\nNote: when passed a zero or null vector (a vector with no\nmagnitude or direction) then this function returns a zero/null vector.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The normal of `v`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorNormal(const v: Vector2d): Vector2d",
          "cpp": "vector_2d vector_normal(const vector_2d &v)"
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_circle(const circle &src,const circle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to back one circle out of another, assuming the first circle was\nmoving at a specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the circle out of the bounds",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "circle",
            "description": "The circle that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bounds": {
            "type": "circle",
            "description": "The area you want to move the circle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The circle's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorOutOfCircleFromCircle(const src: Circle; const bounds: Circle; const velocity: Vector2d): Vector2d",
          "cpp": "vector_2d vector_out_of_circle_from_circle(const circle &src, const circle &bounds, const vector_2d &velocity)"
        }
      },
      {
        "signature": "vector_2d vector_out_of_circle_from_point(const point_2d &pt,const circle &c,const vector_2d &velocity);",
        "name": "vector_out_of_circle_from_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector out to move a point back out of a circle,\ngiven the point was moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the point out of the circle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "c": {
            "type": "circle",
            "description": "The circle you want to move the point out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The point's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorOutOfCircleFromPoint(const pt: Point2d; const c: Circle; const velocity: Vector2d): Vector2d",
          "cpp": "vector_2d vector_out_of_circle_from_point(const point_2d &pt, const circle &c, const vector_2d &velocity)"
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_circle(const circle &c,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_circle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector that can be used to move a circle back out of a rectangle,\ngiven that the circle is moving at the specified velocity.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move the circle out of the rectangle",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "c": {
            "type": "circle",
            "description": "The circle that is moving",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The area you wan to move the circle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The circle's velocity",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorOutOfRectFromCircle(const c: Circle; const rect: Rectangle; const velocity: Vector2d): Vector2d",
          "cpp": "vector_2d vector_out_of_rect_from_circle(const circle &c, const rectangle &rect, const vector_2d &velocity)"
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_point(const point_2d &pt,const rectangle &rect,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines the vector needed to move back from point `pt` out of rectangle `rect` given\nthe point was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the point outside of the\nrectangle.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pt": {
            "type": "point_2d",
            "description": "The point you want to move out of a rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "rect": {
            "type": "rectangle",
            "description": "The rectangle to move out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The velocity of the point. This is used to determine\nwhere the point should return to.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorOutOfRectFromPoint(const pt: Point2d; const rect: Rectangle; const velocity: Vector2d): Vector2d",
          "cpp": "vector_2d vector_out_of_rect_from_point(const point_2d &pt, const rectangle &rect, const vector_2d &velocity)"
        }
      },
      {
        "signature": "vector_2d vector_out_of_rect_from_rect(const rectangle &src,const rectangle &bounds,const vector_2d &velocity);",
        "name": "vector_out_of_rect_from_rect",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the vector needed to move rectangle `src` back out of rectangle `bounds`\nassuming the rectangle was moving at the velocity specified.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that can move the rectangle out of the bounds",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "src": {
            "type": "rectangle",
            "description": "The rectangle you want to move.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bounds": {
            "type": "rectangle",
            "description": "The area you want to move the rectangle out of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "velocity": {
            "type": "vector_2d",
            "description": "The velocity of the `src` rectangle",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorOutOfRectFromRect(const src: Rectangle; const bounds: Rectangle; const velocity: Vector2d): Vector2d",
          "cpp": "vector_2d vector_out_of_rect_from_rect(const rectangle &src, const rectangle &bounds, const vector_2d &velocity)"
        }
      },
      {
        "signature": "vector_2d vector_point_to_point(const point_2d &start,const point_2d &end_pt);",
        "name": "vector_point_to_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` created from the difference from the `p1` to\nthe second `p2` points (`Point2D`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things from the starting point to\nthe ending point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "start": {
            "type": "point_2d",
            "description": "The starting point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_pt": {
            "type": "point_2d",
            "description": "The ending point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorPointToPoint(const start: Point2d; const endPt: Point2d): Vector2d",
          "cpp": "vector_2d vector_point_to_point(const point_2d &start, const point_2d &end_pt)"
        }
      },
      {
        "signature": "vector_2d vector_subtract(const vector_2d &v1,const vector_2d &v2);",
        "name": "vector_subtract",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Subtracts the second vector parameter (`v2`) from the first vector\n(`v1`) and returns the result as new `vector_2d`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The result of subtracting the movements of `v2` from `v1`.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorSubtract(const v1: Vector2d; const v2: Vector2d): Vector2d",
          "cpp": "vector_2d vector_subtract(const vector_2d &v1, const vector_2d &v2)"
        }
      },
      {
        "signature": "vector_2d vector_to(const point_2d &p1);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a new `vector_2d` using the x and y value of a `point_2d` parameter.\nThis is a vector from the origin to that point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector from the origin to `p1`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "p1": {
            "type": "point_2d",
            "description": "The point",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorTo(const p1: Point2d): Vector2d",
          "cpp": "vector_2d vector_to(const point_2d &p1)"
        }
      },
      {
        "signature": "vector_2d vector_to(float x,float y);",
        "name": "vector_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a vector to the indicated point.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that will move things the indicated amount",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "float",
            "description": "The amount to move horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The amount to move vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorTo(x: Single; y: Single): Vector2d",
          "cpp": "vector_2d vector_to(float x, float y)"
        }
      },
      {
        "signature": "string vector_to_string(const vector_2d &v);",
        "name": "vector_to_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a text description of the `vector_2d`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "A string representation of the vector",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v": {
            "type": "vector_2d",
            "description": "The vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorToString(const v: Vector2d): String",
          "cpp": "string vector_to_string(const vector_2d &v)"
        }
      },
      {
        "signature": "bool vectors_equal(const vector_2d &v1,const vector_2d v2);",
        "name": "vectors_equal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if two vectors are the same.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two vectors are equal.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorsEqual(const v1: Vector2d; v2: Vector2d): Boolean",
          "cpp": "bool vectors_equal(const vector_2d &v1, const vector_2d v2)"
        }
      },
      {
        "signature": "bool vectors_not_equal(const vector_2d &v1,const vector_2d v2);",
        "name": "vectors_not_equal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if two vectors are not the same.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the two vectors are different.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "v1": {
            "type": "vector_2d",
            "description": "The first vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "v2": {
            "type": "vector_2d",
            "description": "The other vector",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "vector_2d"
        },
        "signatures": {
          "pascal": "function VectorsNotEqual(const v1: Vector2d; v2: Vector2d): Boolean",
          "cpp": "bool vectors_not_equal(const vector_2d &v1, const vector_2d v2)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [
      {
        "signature": "struct matrix_2d {double elements[3][3];};",
        "name": "matrix_2d",
        "description": "In SplashKit, matrices can be used to combine together a number of\noperations that need to be performed on `vector_2d` values. You can \ntranslate, rotate and scale, and combine these together into a\nsingle matrix that can then be applied to vectors and points.",
        "brief": null,
        "fields": {
          "elements": {
            "type": "double",
            "description": "The elements of the matrix",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3,
              3
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "physics",
          "static": "matrix_2d"
        }
      }
    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "resource_bundles": {
    "brief": "SplashKit resource bundles allow you to quickly and easily load a\nnumber of resources in the `Resources` folder.",
    "description": "Supports the loading and freeing of game resource bundles. Resource types\ninclude images, sounds, music and animation files to name a few. Resource\nfiles must be saved in specific locations of a `Resources` folder for\nyour game.",
    "functions": [
      {
        "signature": "void free_resource_bundle(const string name);",
        "name": "free_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "When you are finished with the resources in a bundle, you can free them all\nby calling this procedure. It will free the resource bundle and all of the\nassociated resources.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource bundle to be freed",
            "is_pointer": false,
            "is_const": true,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "pascal": "procedure FreeResourceBundle(name: String)",
          "cpp": "void free_resource_bundle(const string name)"
        }
      },
      {
        "signature": "bool has_resource_bundle(const string &name);",
        "name": "has_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true when the named resource bundle has already been loaded.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True when the bundle is already loaded.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the resource bundle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "pascal": "function HasResourceBundle(const name: String): Boolean",
          "cpp": "bool has_resource_bundle(const string &name)"
        }
      },
      {
        "signature": "void load_resource_bundle(const string &name,const string &filename);",
        "name": "load_resource_bundle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects `Resources` in the\n`bundles` folder. Use the following as the format for each of the\nresources.\n\nStart a line with a `//` to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format:\n\n```\nANIM,name,filename\n```\n\nFor example, the following will load an animation named \"WalkingScript\" that\nloads the animation from \"kermit.txt\" in your games animation `Resources`.\n\n```\nANIM,WalkingScript,kermit.txt\n```\n\n-  To load a **bitmap** use the format: \n\n```\nBMP,name,filename\n```\n\nFor example, the following will load a bitmap named \"Logo\" using the\n\"Logo.png\" file.\n\n```\nBITMAP,Logo,logo.png\n```\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\n\n```\nBMP,name,filename,cell-width,cell-height,columns,rows,count\n```\n\nThe following will setup the \"Player\" bitmap to have cells that are 75\npixels wide, and 42 pixels height. There are 4 columns in 1 row, giving\na total of 4 cells.\n\n```\nBITMAP,Player,player.png,75,42,4,1,4\n```\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\n```\nFONT,GameFont,demolition.otf\n```\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\n```\nMUSIC,GameMusic,magical_night.ogg\n```\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\n```\nSOUND,error,error.wav\n```\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\n```\nTIMER,my timer\n```\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\n```\nBUNDLE,another bundle,another.txt\n```",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the bundle when it is loaded.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "filename": {
            "type": "string",
            "description": "The filename to load.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resource_bundles",
          "static": "resource_bundle"
        },
        "signatures": {
          "pascal": "procedure LoadResourceBundle(const name: String; const filename: String)",
          "cpp": "void load_resource_bundle(const string &name, const string &filename)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "resources": {
    "brief": "SplashKit resource functions allow you to locate resources in a\nproject's `Resources` folder.",
    "description": "",
    "functions": [
      {
        "signature": "void deregister_free_notifier(free_notifier *handler);",
        "name": "deregister_free_notifier",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Remove the function from the list of functions receiving notification\nof resource freeing.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "free_notifier",
            "description": "The function to remove",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "procedure DeregisterFreeNotifier(handler: FreeNotifier)",
          "cpp": "void deregister_free_notifier(free_notifier *handler)"
        }
      },
      {
        "signature": "string path_to_resource(const string &filename,resource_kind kind);",
        "name": "path_to_resource",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the path to a give file of a certain resource kind.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The full path to the resource.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The name of the file of the resource kind.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "kind": {
            "type": "resource_kind",
            "description": "The kind of resource you are loading.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "function PathToResource(const filename: String; kind: ResourceKind): String",
          "cpp": "string path_to_resource(const string &filename, resource_kind kind)"
        }
      },
      {
        "signature": "string path_to_resources();",
        "name": "path_to_resources",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the path to the resources folder for the SplashKit program. This\nwill be auto detected at startup, but can be changed using\n`set_resources_path`.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "Path to SplashKit Resources folder.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "function PathToResources(): String",
          "cpp": "string path_to_resources()"
        }
      },
      {
        "signature": "string path_to_resources(resource_kind kind);",
        "name": "path_to_resources",
        "method_name": null,
        "unique_global_name": "path_to_resources_for_kind",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the path to the folder containing a given resource kind. This is\nthe path SplashkKit will search when you load a resource.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The path to the folder containing this kind of resource.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "kind": {
            "type": "resource_kind",
            "description": "The type of resource you want the path for.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "for_kind",
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "function PathToResources(kind: ResourceKind): String",
          "cpp": "string path_to_resources(resource_kind kind)"
        }
      },
      {
        "signature": "void register_free_notifier(free_notifier *fn);",
        "name": "register_free_notifier",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a function to be called when any resource is freed.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "free_notifier",
            "description": "The function to be called when a resource is freed.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "procedure RegisterFreeNotifier(fn: FreeNotifier)",
          "cpp": "void register_free_notifier(free_notifier *fn)"
        }
      },
      {
        "signature": "void set_resources_path(const string &path);",
        "name": "set_resources_path",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the path to the SplashKit resources folder. Resource paths are then\nlocated within this folder.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "path": {
            "type": "string",
            "description": "The file path to the SplashKit Resources folder.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "signatures": {
          "pascal": "procedure SetResourcesPath(const path: String)",
          "cpp": "void set_resources_path(const string &path)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef void (free_notifier)(void *pointer);",
        "name": "free_notifier",
        "description": "The free notifier can be registered with the system. It is called every\ntime a resource is freed.",
        "brief": null,
        "attributes": {
          "group": "resources",
          "static": "resources"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pointer": {
            "type": "void",
            "description": "The pointer to the resource that is being freed.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum resource_kind {ANIMATION_RESOURCE,BUNDLE_RESOURCE,DATABASE_RESOURCE,FONT_RESOURCE,IMAGE_RESOURCE,JSON_RESOURCE,SERVER_RESOURCE,MUSIC_RESOURCE,SOUND_RESOURCE,TIMER_RESOURCE,OTHER_RESOURCE};",
        "name": "resource_kind",
        "description": "SplashKit is able to manage a number of different kinds of resources\nfor you.",
        "brief": null,
        "constants": {
          "ANIMATION_RESOURCE": {
            "description": "Animation scripts are loaded as Animation\nresources. These are located in the projects\n`Resources/animations` folder."
          },
          "BUNDLE_RESOURCE": {
            "description": "Resource bundles contain lists of other\nresources. These are located in the projects\n`Resources/bundles` folder."
          },
          "DATABASE_RESOURCE": {
            "description": "Database resources are located in the\n`Resources/databases` folder."
          },
          "FONT_RESOURCE": {
            "description": "Fonts resources are located in the\n`Resources/fonts` folder."
          },
          "IMAGE_RESOURCE": {
            "description": "Image resources are located in the\n`Resources/images` folder."
          },
          "JSON_RESOURCE": {
            "description": "JSON resources are located in the projects\n`Resources/json` folder."
          },
          "MUSIC_RESOURCE": {
            "description": "Music resources can be played as music, and\nlive in the program's `Resources/sounds`\nfolder."
          },
          "SERVER_RESOURCE": {
            "description": "Server resources that can be sent as responses\nto web server requests."
          },
          "SOUND_RESOURCE": {
            "description": "Sound resources can be played as sound\neffects, and live in the program's\n`Resources/sounds` folder."
          },
          "TIMER_RESOURCE": {
            "description": "Timer resources are not saved to file, but\ncan be created by SplashkKit resource\nbundles."
          },
          "OTHER_RESOURCE": {
            "description": "Other resources can be loaded, these will be\nlocated directly in these project's\n`Resources` folder."
          }
        },
        "attributes": {
          "group": "resources",
          "static": "resources"
        }
      }
    ],
    "defines": [

    ]
  },
  "sprites": {
    "brief": "SplashKit Sprites allows you to create images you can easily\nmove and animate.",
    "description": "SplashKit sprites are game elements that can be moved, and animated. Sprites\nare located at a position in the game, have a velocity, and an animation.\nThe sprite can also have arbitary data associated with it for game specific\npurposes.",
    "functions": [
      {
        "signature": "void call_for_all_sprites(sprite_float_function *fn,float val);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_float_function",
            "description": "The sprite function to call on all sprites.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "val": {
            "type": "float",
            "description": "The value passed to the function for each sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure CallForAllSprites(fn: SpriteFloatFunction; val: Single)",
          "cpp": "void call_for_all_sprites(sprite_float_function *fn, float val)"
        }
      },
      {
        "signature": "void call_for_all_sprites(sprite_function *fn);",
        "name": "call_for_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Call the supplied function for all sprites in the current pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "fn": {
            "type": "sprite_function",
            "description": "The sprite function to call on all sprites.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure CallForAllSprites(fn: SpriteFunction)",
          "cpp": "void call_for_all_sprites(sprite_function *fn)"
        }
      },
      {
        "signature": "void call_on_sprite_event(sprite_event_handler *handler);",
        "name": "call_on_sprite_event",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a procedure to be called when an events occur on any sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to call when any sprite raises an event",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure CallOnSpriteEvent(handler: SpriteEventHandler)",
          "cpp": "void call_on_sprite_event(sprite_event_handler *handler)"
        }
      },
      {
        "signature": "point_2d center_point(sprite s);",
        "name": "center_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the center point of the passed in sprite. This is based on the sprite's\nPosition, Width and Height.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The center point of the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "center_point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CenterPoint(s: Sprite): Point2d",
          "cpp": "point_2d center_point(sprite s)"
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(layer: Bitmap): Sprite",
          "cpp": "sprite create_sprite(bitmap layer)"
        }
      },
      {
        "signature": "sprite create_sprite(bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image and animation script.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ani": {
            "type": "animation_script",
            "description": "The animation script for the sprite's animations.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(layer: Bitmap; ani: AnimationScript): Sprite",
          "cpp": "sprite create_sprite(bitmap layer, animation_script ani)"
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "The name of the bitmap to use as the sprite's layer",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(const bitmapName: String): Sprite",
          "cpp": "sprite create_sprite(const string &bitmap_name)"
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image and name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite for resource management.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(const name: String; layer: Bitmap): Sprite",
          "cpp": "sprite create_sprite(const string &name, bitmap layer)"
        }
      },
      {
        "signature": "sprite create_sprite(const string &name,bitmap layer,animation_script ani);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with image, animation, and name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite for resource management.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer": {
            "type": "bitmap",
            "description": "The bitmap for the sprite's image.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "ani": {
            "type": "animation_script",
            "description": "The animation script for the sprite's animations.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(const name: String; layer: Bitmap; ani: AnimationScript): Sprite",
          "cpp": "sprite create_sprite(const string &name, bitmap layer, animation_script ani)"
        }
      },
      {
        "signature": "sprite create_sprite(const string &bitmap_name,const string &animation_name);",
        "name": "create_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The new sprite with the image and animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "bitmap_name": {
            "type": "string",
            "description": "The name of the bitmap to use as the sprite's image.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "animation_name": {
            "type": "string",
            "description": "The name of the animation script to use for this\nsprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "constructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CreateSprite(const bitmapName: String; const animationName: String): Sprite",
          "cpp": "sprite create_sprite(const string &bitmap_name, const string &animation_name)"
        }
      },
      {
        "signature": "void create_sprite_pack(const string &name);",
        "name": "create_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create a new sprite_pack with a given name. This pack can then be\nselected and used to control which sprites are drawn/updated in\nthe calls to draw_all_sprites and update_all_sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the new sprite pack.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure CreateSpritePack(const name: String)",
          "cpp": "void create_sprite_pack(const string &name)"
        }
      },
      {
        "signature": "string current_sprite_pack();",
        "name": "current_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the currently selected sprite_pack.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the current sprite pack.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function CurrentSpritePack(): String",
          "cpp": "string current_sprite_pack()"
        }
      },
      {
        "signature": "void draw_all_sprites();",
        "name": "draw_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "draws all of the sprites in the current sprite pack. Packs can be\nswitched to select between different sets of sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure DrawAllSprites()",
          "cpp": "void draw_all_sprites()"
        }
      },
      {
        "signature": "void draw_sprite(sprite s,const vector_2d &offset);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": "draw_sprite_offset_by",
        "unique_method_name": "draw_offset_by",
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "offset": {
            "type": "vector_2d",
            "description": "The amount to offset the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "suffix": "offset_by",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure DrawSprite(s: Sprite; const offset: Vector2d)",
          "cpp": "void draw_sprite(sprite s, const vector_2d &offset)"
        }
      },
      {
        "signature": "void draw_sprite(sprite s);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Draws the sprite at its location in the world. This is affected by the\nposition of the camera and the sprites current location.\n\nThis is the standard routine for drawing sprites to the screen and should be\nused in most cases.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure DrawSprite(s: Sprite)",
          "cpp": "void draw_sprite(sprite s)"
        }
      },
      {
        "signature": "void draw_sprite(sprite s,float x_offset,float y_offset);",
        "name": "draw_sprite",
        "method_name": "draw",
        "unique_global_name": "draw_sprite_offset_x_y",
        "unique_method_name": "draw_offset_x_y",
        "suffix_name": null,
        "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to draw.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x_offset": {
            "type": "float",
            "description": "The amount to offset on the x axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y_offset": {
            "type": "float",
            "description": "The amount to offset on the y axis.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "draw",
          "suffix": "offset_x_y",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure DrawSprite(s: Sprite; xOffset: Single; yOffset: Single)",
          "cpp": "void draw_sprite(sprite s, float x_offset, float y_offset)"
        }
      },
      {
        "signature": "void free_all_sprites();",
        "name": "free_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Releases all of the sprites that have been loaded.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure FreeAllSprites()",
          "cpp": "void free_all_sprites()"
        }
      },
      {
        "signature": "void free_sprite(sprite s);",
        "name": "free_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the resources associated with a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to be destroyed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "destructor": true,
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure FreeSprite(s: Sprite)",
          "cpp": "void free_sprite(sprite s)"
        }
      },
      {
        "signature": "void free_sprite_pack(const string &name);",
        "name": "free_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Frees the sprite pack and all of its sprites.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite pack to destroy.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure FreeSpritePack(const name: String)",
          "cpp": "void free_sprite_pack(const string &name)"
        }
      },
      {
        "signature": "bool has_sprite(const string &name);",
        "name": "has_sprite",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if SplashKit has a sprite for the supplied name.\nThis checks against all sprites, those loaded without a name\nare assigned a default.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if you have created a sprite with this name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite to locate.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function HasSprite(const name: String): Boolean",
          "cpp": "bool has_sprite(const string &name)"
        }
      },
      {
        "signature": "bool has_sprite_pack(const string &name);",
        "name": "has_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if a given sprite_pack has already been created.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if a sprite pack exists with the indicated name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name for the sprite pack.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function HasSpritePack(const name: String): Boolean",
          "cpp": "bool has_sprite_pack(const string &name)"
        }
      },
      {
        "signature": "void move_sprite(sprite s);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "moves the sprite as indicated by its velocity. You can call this directly ot\nalternatively, this action is performed when the sprite is updated using\nthe ''update_sprite'' routine.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure MoveSprite(s: Sprite)",
          "cpp": "void move_sprite(sprite s)"
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_by_vector",
        "unique_method_name": "move_by_vector",
        "suffix_name": null,
        "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "distance": {
            "type": "vector_2d",
            "description": "The vector that represents the direction and distance to\nmove the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "by_vector",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure MoveSprite(s: Sprite; const distance: Vector2d)",
          "cpp": "void move_sprite(sprite s, const vector_2d &distance)"
        }
      },
      {
        "signature": "void move_sprite(sprite s,const vector_2d &distance,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_by_vector_percent",
        "unique_method_name": "move_by_vector_percent",
        "suffix_name": null,
        "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "distance": {
            "type": "vector_2d",
            "description": "The vector that represents the direction and distance to\nmove the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percentage of the distance to move the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "by_vector_percent",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure MoveSprite(s: Sprite; const distance: Vector2d; pct: Single)",
          "cpp": "void move_sprite(sprite s, const vector_2d &distance, float pct)"
        }
      },
      {
        "signature": "void move_sprite(sprite s,float pct);",
        "name": "move_sprite",
        "method_name": "move",
        "unique_global_name": "move_sprite_percent",
        "unique_method_name": "move_percent",
        "suffix_name": null,
        "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percentage of the sprite's velocity to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure MoveSprite(s: Sprite; pct: Single)",
          "cpp": "void move_sprite(sprite s, float pct)"
        }
      },
      {
        "signature": "void move_sprite_to(sprite s,float x,float y);",
        "name": "move_sprite_to",
        "method_name": "move_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This method moves a sprite to a given position in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The sprite's new x location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The sprite's new y location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure MoveSpriteTo(s: Sprite; x: Single; y: Single)",
          "cpp": "void move_sprite_to(sprite s, float x, float y)"
        }
      },
      {
        "signature": "void select_sprite_pack(const string &name);",
        "name": "select_sprite_pack",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Selects the named sprite_pack (if it has been created). The\nselected sprite_pack determines which sprites are drawn and updated\nwith the draw_all_sprites and update_all_sprites code.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite pack to select.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SelectSpritePack(const name: String)",
          "cpp": "void select_sprite_pack(const string &name)"
        }
      },
      {
        "signature": "int sprite_add_layer(sprite s,bitmap new_layer,const string &layer_name);",
        "name": "sprite_add_layer",
        "method_name": "add_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a new layer to the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the new layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to add the layer to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "new_layer": {
            "type": "bitmap",
            "description": "The new layer's bitmap.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "layer_name": {
            "type": "string",
            "description": "The name of the new layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAddLayer(s: Sprite; newLayer: Bitmap; const layerName: String): Integer",
          "cpp": "int sprite_add_layer(sprite s, bitmap new_layer, const string &layer_name)"
        }
      },
      {
        "signature": "void sprite_add_to_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_add_to_velocity",
        "method_name": "add_to_velocity",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The amount to add to the sprite's velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_to_velocity",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteAddToVelocity(s: Sprite; const value: Vector2d)",
          "cpp": "void sprite_add_to_velocity(sprite s, const vector_2d &value)"
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the new value to store in the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteAddValue(s: Sprite; const name: String)",
          "cpp": "void sprite_add_value(sprite s, const string &name)"
        }
      },
      {
        "signature": "void sprite_add_value(sprite s,const string &name,float init_val);",
        "name": "sprite_add_value",
        "method_name": "add_value",
        "unique_global_name": "sprite_add_value_with_default",
        "unique_method_name": "add_value_with_default",
        "suffix_name": null,
        "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the new value to store in the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "init_val": {
            "type": "float",
            "description": "The initial value.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "add_value",
          "suffix": "with_default",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteAddValue(s: Sprite; const name: String; initVal: Single)",
          "cpp": "void sprite_add_value(sprite s, const string &name, float init_val)"
        }
      },
      {
        "signature": "point_2d sprite_anchor_point(sprite s);",
        "name": "sprite_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the anchor point of the sprite. This is the point around which the\nsprite rotates. This is in sprite coordinates, so as if the sprite is drawn\nat 0,0.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The anchor point of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "anchor_point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAnchorPoint(s: Sprite): Point2d",
          "cpp": "point_2d sprite_anchor_point(sprite s)"
        }
      },
      {
        "signature": "point_2d sprite_anchor_position(sprite s);",
        "name": "sprite_anchor_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The sprite anchor position, is the location of the anchor point in world\ncoordinates, based upon the position of the sprite.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The location of the sprite's anchor point positioned at the sprite's location",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to find where the anchor is in world coordinates",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAnchorPosition(s: Sprite): Point2d",
          "cpp": "point_2d sprite_anchor_position(sprite s)"
        }
      },
      {
        "signature": "bool sprite_animation_has_ended(sprite s);",
        "name": "sprite_animation_has_ended",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprites animation has ended.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite animation has ended.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "animation_has_ended",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAnimationHasEnded(s: Sprite): Boolean",
          "cpp": "bool sprite_animation_has_ended(sprite s)"
        }
      },
      {
        "signature": "string sprite_animation_name(sprite s);",
        "name": "sprite_animation_name",
        "method_name": "animation_name",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the sprite's current animation.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the current animation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "animation_name",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAnimationName(s: Sprite): String",
          "cpp": "string sprite_animation_name(sprite s)"
        }
      },
      {
        "signature": "bool sprite_at(sprite s,const point_2d &pt);",
        "name": "sprite_at",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Determines if a sprite is at a given point.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite is at the given point",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point to check (in world coordinates)",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteAt(s: Sprite; const pt: Point2d): Boolean",
          "cpp": "bool sprite_at(sprite s, const point_2d &pt)"
        }
      },
      {
        "signature": "void sprite_bring_layer_forward(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_forward",
        "method_name": "send_layer_forward",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified forward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to bring forward",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_forward",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteBringLayerForward(s: Sprite; visibleLayer: Integer)",
          "cpp": "void sprite_bring_layer_forward(sprite s, int visible_layer)"
        }
      },
      {
        "signature": "void sprite_bring_layer_to_front(sprite s,int visible_layer);",
        "name": "sprite_bring_layer_to_front",
        "method_name": "Send_layer_toFront",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified to the front in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to bring to the front",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toFront",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteBringLayerToFront(s: Sprite; visibleLayer: Integer)",
          "cpp": "void sprite_bring_layer_to_front(sprite s, int visible_layer)"
        }
      },
      {
        "signature": "void sprite_call_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_call_on_event",
        "method_name": "call_on_event",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Register a procedure to call when events occur on the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to add the handler to.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to call when this sprite raises an event.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "call_on_event",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteCallOnEvent(s: Sprite; handler: SpriteEventHandler)",
          "cpp": "void sprite_call_on_event(sprite s, sprite_event_handler *handler)"
        }
      },
      {
        "signature": "circle sprite_circle(sprite s);",
        "name": "sprite_circle",
        "method_name": "circle",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the base layer of the indicated sprite.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCircle(s: Sprite): Circle",
          "cpp": "circle sprite_circle(sprite s)"
        }
      },
      {
        "signature": "bitmap sprite_collision_bitmap(sprite s);",
        "name": "sprite_collision_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap used by the sprite to determine if it has collided with\nother objects in the game.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap used for collisions with this sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_bitmap",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCollisionBitmap(s: Sprite): Bitmap",
          "cpp": "bitmap sprite_collision_bitmap(sprite s)"
        }
      },
      {
        "signature": "circle sprite_collision_circle(sprite s);",
        "name": "sprite_collision_circle",
        "method_name": "collision_circle",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated sprite's collision rectangle.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "collision_circle",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCollisionCircle(s: Sprite): Circle",
          "cpp": "circle sprite_collision_circle(sprite s)"
        }
      },
      {
        "signature": "collision_test_kind sprite_collision_kind(sprite s);",
        "name": "sprite_collision_kind",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "collision_test_kind",
          "description": "The kind of collisions performed with this sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_kind",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCollisionKind(s: Sprite): CollisionTestKind",
          "cpp": "collision_test_kind sprite_collision_kind(sprite s)"
        }
      },
      {
        "signature": "rectangle sprite_collision_rectangle(sprite s);",
        "name": "sprite_collision_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the collision rectangle for the specified sprite.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A collision rectangle that surrounds the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "collision_rectangle",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCollisionRectangle(s: Sprite): Rectangle",
          "cpp": "rectangle sprite_collision_rectangle(sprite s)"
        }
      },
      {
        "signature": "int sprite_current_cell(sprite s);",
        "name": "sprite_current_cell",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current animation cell for an animated sprite. The cell is\nupdated when the sprite's animation data is updated.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The current cell animation of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCurrentCell(s: Sprite): Integer",
          "cpp": "int sprite_current_cell(sprite s)"
        }
      },
      {
        "signature": "rectangle sprite_current_cell_rectangle(sprite s);",
        "name": "sprite_current_cell_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a rectangle of the current cell within the sprite's image. This is used\nto determine what part of the bitmap should be used when the sprite is drawn.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "The current cell rectangle of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "current_cell_rectangle",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteCurrentCellRectangle(s: Sprite): Rectangle",
          "cpp": "rectangle sprite_current_cell_rectangle(sprite s)"
        }
      },
      {
        "signature": "float sprite_dx(sprite s);",
        "name": "sprite_dx",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x component of the sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dx",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteDx(s: Sprite): Single",
          "cpp": "float sprite_dx(sprite s)"
        }
      },
      {
        "signature": "float sprite_dy(sprite s);",
        "name": "sprite_dy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The y component of the sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "dy",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteDy(s: Sprite): Single",
          "cpp": "float sprite_dy(sprite s)"
        }
      },
      {
        "signature": "bool sprite_has_value(sprite s,string name);",
        "name": "sprite_has_value",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite has a value with the given name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite has a value with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteHasValue(s: Sprite; name: String): Boolean",
          "cpp": "bool sprite_has_value(sprite s, string name)"
        }
      },
      {
        "signature": "float sprite_heading(sprite s);",
        "name": "sprite_heading",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the direction the sprite is heading in degrees.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the sprite velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "heading",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteHeading(s: Sprite): Single",
          "cpp": "float sprite_heading(sprite s)"
        }
      },
      {
        "signature": "int sprite_height(sprite s);",
        "name": "sprite_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current height of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Height",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteHeight(s: Sprite): Integer",
          "cpp": "int sprite_height(sprite s)"
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,const string &name);",
        "name": "sprite_hide_layer",
        "method_name": "hide_layer",
        "unique_global_name": "sprite_hide_layer_named",
        "unique_method_name": "hide_layer_named",
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to hide the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to hide.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "hide_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteHideLayer(s: Sprite; const name: String)",
          "cpp": "void sprite_hide_layer(sprite s, const string &name)"
        }
      },
      {
        "signature": "void sprite_hide_layer(sprite s,int id);",
        "name": "sprite_hide_layer",
        "method_name": "Hide_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Hide the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to hide the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to hide.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Hide_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteHideLayer(s: Sprite; id: Integer)",
          "cpp": "void sprite_hide_layer(sprite s, int id)"
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,const string &name);",
        "name": "sprite_layer",
        "method_name": "layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap at the layer with the indicated name",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to fetch",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayer(s: Sprite; const name: String): Bitmap",
          "cpp": "bitmap sprite_layer(sprite s, const string &name)"
        }
      },
      {
        "signature": "bitmap sprite_layer(sprite s,int idx);",
        "name": "sprite_layer",
        "method_name": "layer_at_idx",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the bitmap of the indicated layer of the sprite.",
        "brief": null,
        "return": {
          "type": "bitmap",
          "description": "The bitmap of the sprite at that layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_at_idx",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayer(s: Sprite; idx: Integer): Bitmap",
          "cpp": "bitmap sprite_layer(sprite s, int idx)"
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,const string &name);",
        "name": "sprite_layer_circle",
        "method_name": "circle_for_layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle_for_layer_named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerCircle(s: Sprite; const name: String): Circle",
          "cpp": "circle sprite_layer_circle(sprite s, const string &name)"
        }
      },
      {
        "signature": "circle sprite_layer_circle(sprite s,int idx);",
        "name": "sprite_layer_circle",
        "method_name": "circle_for_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a circle in the bounds of the indicated layer.",
        "brief": null,
        "return": {
          "type": "circle",
          "description": "A bounding circle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "circle_for_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerCircle(s: Sprite; idx: Integer): Circle",
          "cpp": "circle sprite_layer_circle(sprite s, int idx)"
        }
      },
      {
        "signature": "int sprite_layer_count(sprite s);",
        "name": "sprite_layer_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers within the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of image layers in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer count from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "layer_count",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerCount(s: Sprite): Integer",
          "cpp": "int sprite_layer_count(sprite s)"
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,const string &name);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": "sprite_layer_height_named",
        "unique_method_name": "layer_height_named",
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the details of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerHeight(s: Sprite; const name: String): Integer",
          "cpp": "int sprite_layer_height(sprite s, const string &name)"
        }
      },
      {
        "signature": "int sprite_layer_height(sprite s,int idx);",
        "name": "sprite_layer_height",
        "method_name": "layer_height",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The height of a given layer of the sprite (aligned to the Y axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The height of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_height",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerHeight(s: Sprite; idx: Integer): Integer",
          "cpp": "int sprite_layer_height(sprite s, int idx)"
        }
      },
      {
        "signature": "int sprite_layer_index(sprite s,const string &name);",
        "name": "sprite_layer_index",
        "method_name": "Index_of_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index of the specified layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer in the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the index of",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Index_of_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerIndex(s: Sprite; const name: String): Integer",
          "cpp": "int sprite_layer_index(sprite s, const string &name)"
        }
      },
      {
        "signature": "string sprite_layer_name(sprite s,int idx);",
        "name": "sprite_layer_name",
        "method_name": "layer_name",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the specified layer.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the sprite's layer at that index",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the layer name from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer you want the name of",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_name",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerName(s: Sprite; idx: Integer): String",
          "cpp": "string sprite_layer_name(sprite s, int idx)"
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,const string &name);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": "sprite_layer_offset_named",
        "unique_method_name": "layer_offset_named",
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset of the named layer in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the offset of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerOffset(s: Sprite; const name: String): Vector2d",
          "cpp": "vector_2d sprite_layer_offset(sprite s, const string &name)"
        }
      },
      {
        "signature": "vector_2d sprite_layer_offset(sprite s,int idx);",
        "name": "sprite_layer_offset",
        "method_name": "layer_offset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The offset of the layer in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the offset of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_offset",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerOffset(s: Sprite; idx: Integer): Vector2d",
          "cpp": "vector_2d sprite_layer_offset(sprite s, int idx)"
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,const string &name);",
        "name": "sprite_layer_rectangle",
        "method_name": "rectangle_for_layer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A bounding rectangle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "rectangle_for_layer_named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerRectangle(s: Sprite; const name: String): Rectangle",
          "cpp": "rectangle sprite_layer_rectangle(sprite s, const string &name)"
        }
      },
      {
        "signature": "rectangle sprite_layer_rectangle(sprite s,int idx);",
        "name": "sprite_layer_rectangle",
        "method_name": "rectangle_for_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets a rectangle that surrounds the indicated layer.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A bounding rectangle that surrounds the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "rectangle_for_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerRectangle(s: Sprite; idx: Integer): Rectangle",
          "cpp": "rectangle sprite_layer_rectangle(sprite s, int idx)"
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,const string &name);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": "sprite_layer_width_named",
        "unique_method_name": "layer_width_named",
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the details of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerWidth(s: Sprite; const name: String): Integer",
          "cpp": "int sprite_layer_width(sprite s, const string &name)"
        }
      },
      {
        "signature": "int sprite_layer_width(sprite s,int idx);",
        "name": "sprite_layer_width",
        "method_name": "layer_width",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The width of a given layer of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "layer_width",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLayerWidth(s: Sprite; idx: Integer): Integer",
          "cpp": "int sprite_layer_width(sprite s, int idx)"
        }
      },
      {
        "signature": "matrix_2d sprite_location_matrix(sprite s);",
        "name": "sprite_location_matrix",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a matrix that can be used to transform points into the coordinate\nspace of the passed in sprite.",
        "brief": null,
        "return": {
          "type": "matrix_2d",
          "description": "A matrix that transforms points into the sprites coordinate\nspace.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "location_matrix",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteLocationMatrix(s: Sprite): Matrix2d",
          "cpp": "matrix_2d sprite_location_matrix(sprite s)"
        }
      },
      {
        "signature": "float sprite_mass(sprite s);",
        "name": "sprite_mass",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the mass of the sprite for any of the collide methods from\nPhysics. The mass of two colliding sprites will determine the relative\nvelocitys after the collision.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The mass of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "mass",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteMass(s: Sprite): Single",
          "cpp": "float sprite_mass(sprite s)"
        }
      },
      {
        "signature": "bool sprite_move_from_anchor_point(sprite s);",
        "name": "sprite_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the sprite is moved from its anchor point, or from its top left.\nWhen this returns true the location of the sprite will indicate its anchor point.\nWhen this returns false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite moves from its anchor point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "move_from_anchor_point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteMoveFromAnchorPoint(s: Sprite): Boolean",
          "cpp": "bool sprite_move_from_anchor_point(sprite s)"
        }
      },
      {
        "signature": "void sprite_move_to(sprite s,const point_2d &pt,float taking_seconds);",
        "name": "sprite_move_to",
        "method_name": "move_to",
        "unique_global_name": "sprite_move_to_taking_seconds",
        "unique_method_name": "move_to_taking_seconds",
        "suffix_name": null,
        "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to move.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The sprite's destination.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "taking_seconds": {
            "type": "float",
            "description": "The time the sprite should take to get to pt.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "move_to",
          "suffix": "taking_seconds",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteMoveTo(s: Sprite; const pt: Point2d; takingSeconds: Single)",
          "cpp": "void sprite_move_to(sprite s, const point_2d &pt, float taking_seconds)"
        }
      },
      {
        "signature": "string sprite_name(sprite s);",
        "name": "sprite_name",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the name of the sprite. This name is used for resource management\nand can be used to interact with the sprite in various routines.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The name of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "name",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteName(s: Sprite): String",
          "cpp": "string sprite_name(sprite s)"
        }
      },
      {
        "signature": "sprite sprite_named(const string &name);",
        "name": "sprite_named",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the `sprite` with the specified name.",
        "brief": null,
        "return": {
          "type": "sprite",
          "description": "The sprite with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the sprite to locate.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteNamed(const name: String): Sprite",
          "cpp": "sprite sprite_named(const string &name)"
        }
      },
      {
        "signature": "bool sprite_offscreen(sprite s);",
        "name": "sprite_offscreen",
        "method_name": "offscreen",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if the sprite is entirely off the current screen.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite is entirely off the current window.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "offscreen",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteOffscreen(s: Sprite): Boolean",
          "cpp": "bool sprite_offscreen(sprite s)"
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,const point_2d &pt);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": "sprite_on_screen_at_point",
        "unique_method_name": "on_screen_at_point",
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at",
          "suffix": "point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteOnScreenAt(s: Sprite; const pt: Point2d): Boolean",
          "cpp": "bool sprite_on_screen_at(sprite s, const point_2d &pt)"
        }
      },
      {
        "signature": "bool sprite_on_screen_at(sprite s,float x,float y);",
        "name": "sprite_on_screen_at",
        "method_name": "on_screen_at",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to test.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "float",
            "description": "The x location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The y location in screen coordinates to check.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "on_screen_at",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteOnScreenAt(s: Sprite; x: Single; y: Single): Boolean",
          "cpp": "bool sprite_on_screen_at(sprite s, float x, float y)"
        }
      },
      {
        "signature": "point_2d sprite_position(sprite s);",
        "name": "sprite_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the sprite's position.",
        "brief": null,
        "return": {
          "type": "point_2d",
          "description": "The location of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Position",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpritePosition(s: Sprite): Point2d",
          "cpp": "point_2d sprite_position(sprite s)"
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s);",
        "name": "sprite_replay_animation",
        "method_name": "Replay_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if the\nfirst cell of the animation is associated with a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to replay the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Replay_animation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteReplayAnimation(s: Sprite)",
          "cpp": "void sprite_replay_animation(sprite s)"
        }
      },
      {
        "signature": "void sprite_replay_animation(sprite s,bool with_sound);",
        "name": "sprite_replay_animation",
        "method_name": "replay_animation",
        "unique_global_name": "sprite_replay_animation_with_sound",
        "unique_method_name": "replay_animation_with_sound",
        "suffix_name": null,
        "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to replay the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when restarted.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "replay_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteReplayAnimation(s: Sprite; withSound: Boolean)",
          "cpp": "void sprite_replay_animation(sprite s, bool with_sound)"
        }
      },
      {
        "signature": "float sprite_rotation(sprite s);",
        "name": "sprite_rotation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the angle of rotation of the sprite. This will rotate any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The angle of the sprite rotation.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Rotation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteRotation(s: Sprite): Single",
          "cpp": "float sprite_rotation(sprite s)"
        }
      },
      {
        "signature": "float sprite_scale(sprite s);",
        "name": "sprite_scale",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "This indicates the scale of the sprite. This will scale any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The scale of the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "scale",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteScale(s: Sprite): Single",
          "cpp": "float sprite_scale(sprite s)"
        }
      },
      {
        "signature": "rectangle sprite_screen_rectangle(sprite s);",
        "name": "sprite_screen_rectangle",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the rectangle representing the location of the sprite on the\nscreen.",
        "brief": null,
        "return": {
          "type": "rectangle",
          "description": "A rectangle indicating where the sprite is on the screen.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Screen_rectangle",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteScreenRectangle(s: Sprite): Rectangle",
          "cpp": "rectangle sprite_screen_rectangle(sprite s)"
        }
      },
      {
        "signature": "void sprite_send_layer_backward(sprite s,int visible_layer);",
        "name": "sprite_send_layer_backward",
        "method_name": "Send_layer_toBackward",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified backward in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to send to backward",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Send_layer_toBackward",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSendLayerBackward(s: Sprite; visibleLayer: Integer)",
          "cpp": "void sprite_send_layer_backward(sprite s, int visible_layer)"
        }
      },
      {
        "signature": "void sprite_send_layer_to_back(sprite s,int visible_layer);",
        "name": "sprite_send_layer_to_back",
        "method_name": "send_layer_to_back",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sends the layer specified to the back in the visible layer order.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "visible_layer": {
            "type": "int",
            "description": "The visible layer to send to back",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "send_layer_to_back",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSendLayerToBack(s: Sprite; visibleLayer: Integer)",
          "cpp": "void sprite_send_layer_to_back(sprite s, int visible_layer)"
        }
      },
      {
        "signature": "void sprite_set_anchor_point(sprite s,const point_2d &pt);",
        "name": "sprite_set_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The new anchor point in sprite coordinates.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "anchor_point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetAnchorPoint(s: Sprite; const pt: Point2d)",
          "cpp": "void sprite_set_anchor_point(sprite s, const point_2d &pt)"
        }
      },
      {
        "signature": "void sprite_set_collision_bitmap(sprite s,bitmap bmp);",
        "name": "sprite_set_collision_bitmap",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "bmp": {
            "type": "bitmap",
            "description": "The new collision bitmap for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "collision_bitmap",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetCollisionBitmap(s: Sprite; bmp: Bitmap)",
          "cpp": "void sprite_set_collision_bitmap(sprite s, bitmap bmp)"
        }
      },
      {
        "signature": "void sprite_set_collision_kind(sprite s,collision_test_kind value);",
        "name": "sprite_set_collision_kind",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "collision_test_kind",
            "description": "The new kind of collision test for this sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "collision_kind",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetCollisionKind(s: Sprite; value: CollisionTestKind)",
          "cpp": "void sprite_set_collision_kind(sprite s, collision_test_kind value)"
        }
      },
      {
        "signature": "void sprite_set_dx(sprite s,float value);",
        "name": "sprite_set_dx",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new x component of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "dx",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetDx(s: Sprite; value: Single)",
          "cpp": "void sprite_set_dx(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_dy(sprite s,float value);",
        "name": "sprite_set_dy",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y value of the sprite's velocity.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new y component of the sprite's velocity.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "dy",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetDy(s: Sprite; value: Single)",
          "cpp": "void sprite_set_dy(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_heading(sprite s,float value);",
        "name": "sprite_set_heading",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the direction the sprite is heading without changing the speed.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new angle for the sprite's velocity -- distance remains the\nsame.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "heading",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetHeading(s: Sprite; value: Single)",
          "cpp": "void sprite_set_heading(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,const string &name,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "set_layer_offset",
        "unique_global_name": "sprite_set_layer_offset_named",
        "unique_method_name": "set_layer_offset_named",
        "suffix_name": null,
        "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to change.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new offset.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_layer_offset",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetLayerOffset(s: Sprite; const name: String; const value: Vector2d)",
          "cpp": "void sprite_set_layer_offset(sprite s, const string &name, const vector_2d &value)"
        }
      },
      {
        "signature": "void sprite_set_layer_offset(sprite s,int idx,const vector_2d &value);",
        "name": "sprite_set_layer_offset",
        "method_name": "set_layer_offset",
        "unique_global_name": "sprite_set_layer_offset_at_index",
        "unique_method_name": "set_layer_offset_at_index",
        "suffix_name": null,
        "description": "Sets the offset of the specified layer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the layer to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new offset.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_layer_offset",
          "suffix": "at_index",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetLayerOffset(s: Sprite; idx: Integer; const value: Vector2d)",
          "cpp": "void sprite_set_layer_offset(sprite s, int idx, const vector_2d &value)"
        }
      },
      {
        "signature": "void sprite_set_mass(sprite s,float value);",
        "name": "sprite_set_mass",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the mass of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new mass for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "mass",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetMass(s: Sprite; value: Single)",
          "cpp": "void sprite_set_mass(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_move_from_anchor_point(sprite s,bool value);",
        "name": "sprite_set_move_from_anchor_point",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "bool",
            "description": "The value to set this option.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "move_from_anchor_point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetMoveFromAnchorPoint(s: Sprite; value: Boolean)",
          "cpp": "void sprite_set_move_from_anchor_point(sprite s, bool value)"
        }
      },
      {
        "signature": "void sprite_set_position(sprite s,const point_2d &value);",
        "name": "sprite_set_position",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the sprite's position.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "point_2d",
            "description": "The new location for the sprite.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "Position",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetPosition(s: Sprite; const value: Point2d)",
          "cpp": "void sprite_set_position(sprite s, const point_2d &value)"
        }
      },
      {
        "signature": "void sprite_set_rotation(sprite s,float value);",
        "name": "sprite_set_rotation",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the rotation of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new rotation angle for the sprite",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "rotation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetRotation(s: Sprite; value: Single)",
          "cpp": "void sprite_set_rotation(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_scale(sprite s,float value);",
        "name": "sprite_set_scale",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Allows you to change the scale of a sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new scale for the sprite.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "scale",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetScale(s: Sprite; value: Single)",
          "cpp": "void sprite_set_scale(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_speed(sprite s,float value);",
        "name": "sprite_set_speed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Alters the speed of the sprite without effecting the direction.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new speed of the sprite -- direction will remain the same.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "speed",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetSpeed(s: Sprite; value: Single)",
          "cpp": "void sprite_set_speed(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_value(sprite s,const string &name,float val);",
        "name": "sprite_set_value",
        "method_name": "set_value",
        "unique_global_name": "sprite_set_value_named",
        "unique_method_name": "set_value_named",
        "suffix_name": null,
        "description": "Assigns a value to the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to change",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "val": {
            "type": "float",
            "description": "The new value.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "set_value",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetValue(s: Sprite; const name: String; val: Single)",
          "cpp": "void sprite_set_value(sprite s, const string &name, float val)"
        }
      },
      {
        "signature": "void sprite_set_velocity(sprite s,const vector_2d &value);",
        "name": "sprite_set_velocity",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "vector_2d",
            "description": "The new sprite velocity.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "velocity",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetVelocity(s: Sprite; const value: Vector2d)",
          "cpp": "void sprite_set_velocity(sprite s, const vector_2d &value)"
        }
      },
      {
        "signature": "void sprite_set_x(sprite s,float value);",
        "name": "sprite_set_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new x location.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "x",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetX(s: Sprite; value: Single)",
          "cpp": "void sprite_set_x(sprite s, float value)"
        }
      },
      {
        "signature": "void sprite_set_y(sprite s,float value);",
        "name": "sprite_set_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Sets the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "value": {
            "type": "float",
            "description": "The new sprite y.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "setter": "y",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteSetY(s: Sprite; value: Single)",
          "cpp": "void sprite_set_y(sprite s, float value)"
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,const string &name);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": "sprite_show_layer_named",
        "unique_method_name": "show_layer_named",
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer shown, or -1 if no layer found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to show the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The layer to show.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteShowLayer(s: Sprite; const name: String): Integer",
          "cpp": "int sprite_show_layer(sprite s, const string &name)"
        }
      },
      {
        "signature": "int sprite_show_layer(sprite s,int id);",
        "name": "sprite_show_layer",
        "method_name": "show_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Show the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The index of the layer shown, or -1 if no layer found.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to show the layer of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index to show.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "show_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteShowLayer(s: Sprite; id: Integer): Integer",
          "cpp": "int sprite_show_layer(sprite s, int id)"
        }
      },
      {
        "signature": "float sprite_speed(sprite s);",
        "name": "sprite_speed",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current speed (distance travelled per update) of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The speed of the sprite (pixels per update).",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "speed",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteSpeed(s: Sprite): Single",
          "cpp": "float sprite_speed(sprite s)"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_named",
        "unique_method_name": "start_animation_named",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "named": {
            "type": "string",
            "description": "The name of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteStartAnimation(s: Sprite; const named: String)",
          "cpp": "void sprite_start_animation(sprite s, const string &named)"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,const string &named,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_named_with_sound",
        "unique_method_name": "start_animation_named_with_sound",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "named": {
            "type": "string",
            "description": "The name of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "named_with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteStartAnimation(s: Sprite; const named: String; withSound: Boolean)",
          "cpp": "void sprite_start_animation(sprite s, const string &named, bool with_sound)"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteStartAnimation(s: Sprite; idx: Integer)",
          "cpp": "void sprite_start_animation(sprite s, int idx)"
        }
      },
      {
        "signature": "void sprite_start_animation(sprite s,int idx,bool with_sound);",
        "name": "sprite_start_animation",
        "method_name": "start_animation",
        "unique_global_name": "sprite_start_animation_with_sound",
        "unique_method_name": "start_animation_with_sound",
        "suffix_name": null,
        "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to start the animation of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the animation to start from the animation script.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, the animation will not play associated sound\neffects when started.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "start_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteStartAnimation(s: Sprite; idx: Integer; withSound: Boolean)",
          "cpp": "void sprite_start_animation(sprite s, int idx, bool with_sound)"
        }
      },
      {
        "signature": "void sprite_stop_calling_on_event(sprite s,sprite_event_handler *handler);",
        "name": "sprite_stop_calling_on_event",
        "method_name": "stop_calling_on_event",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to remove the handler from",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to remove from this sprites handlers",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "stop_calling_on_event",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteStopCallingOnEvent(s: Sprite; handler: SpriteEventHandler)",
          "cpp": "void sprite_stop_calling_on_event(sprite s, sprite_event_handler *handler)"
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,const string &name);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "toggle_layer_visible",
        "unique_global_name": "sprite_toggle_layer_visible_named",
        "unique_method_name": "toggle_layer_visible_named",
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to toggle.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "toggle_layer_visible",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteToggleLayerVisible(s: Sprite; const name: String)",
          "cpp": "void sprite_toggle_layer_visible(sprite s, const string &name)"
        }
      },
      {
        "signature": "void sprite_toggle_layer_visible(sprite s,int id);",
        "name": "sprite_toggle_layer_visible",
        "method_name": "Toggle_layer_visible",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Toggle the visibility of the specified layer of the sprite.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to change.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to toggle.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "Toggle_layer_visible",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure SpriteToggleLayerVisible(s: Sprite; id: Integer)",
          "cpp": "void sprite_toggle_layer_visible(sprite s, int id)"
        }
      },
      {
        "signature": "float sprite_value(sprite s,const string &name);",
        "name": "sprite_value",
        "method_name": "value",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the indicated value of the sprite",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The value from the sprite's data store.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the value to fetch.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "value",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteValue(s: Sprite; const name: String): Single",
          "cpp": "float sprite_value(sprite s, const string &name)"
        }
      },
      {
        "signature": "int sprite_value_count(sprite s);",
        "name": "sprite_value_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of sprite's values.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of values stored in the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "value_count",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteValueCount(s: Sprite): Integer",
          "cpp": "int sprite_value_count(sprite s)"
        }
      },
      {
        "signature": "vector_2d sprite_velocity(sprite s);",
        "name": "sprite_velocity",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "The sprite's velocity.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "velocity",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVelocity(s: Sprite): Vector2d",
          "cpp": "vector_2d sprite_velocity(sprite s)"
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,const string &name);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": "sprite_visible_index_of_layer_named",
        "unique_method_name": "visible_index_of_layer_named",
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The z index of the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "name": {
            "type": "string",
            "description": "The name of the layer to get the z index of.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer",
          "suffix": "named",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVisibleIndexOfLayer(s: Sprite; const name: String): Integer",
          "cpp": "int sprite_visible_index_of_layer(sprite s, const string &name)"
        }
      },
      {
        "signature": "int sprite_visible_index_of_layer(sprite s,int id);",
        "name": "sprite_visible_index_of_layer",
        "method_name": "visible_index_of_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index (z-order) of the sprite's layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The z index of the sprite's layer",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "id": {
            "type": "int",
            "description": "The index of the layer to get the z index of.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_index_of_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVisibleIndexOfLayer(s: Sprite; id: Integer): Integer",
          "cpp": "int sprite_visible_index_of_layer(sprite s, int id)"
        }
      },
      {
        "signature": "int sprite_visible_layer(sprite s,int idx);",
        "name": "sprite_visible_layer",
        "method_name": "visible_layer",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the index of the n'th (idx parameter) visible layer.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The layer index of the selected visible layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the visible layer to fetch.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVisibleLayer(s: Sprite; idx: Integer): Integer",
          "cpp": "int sprite_visible_layer(sprite s, int idx)"
        }
      },
      {
        "signature": "int sprite_visible_layer_count(sprite s);",
        "name": "sprite_visible_layer_count",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the number of layers that are currently visible for the sprite.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of visible layers for the sprite.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "visible_layer_count",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVisibleLayerCount(s: Sprite): Integer",
          "cpp": "int sprite_visible_layer_count(sprite s)"
        }
      },
      {
        "signature": "int sprite_visible_layer_id(sprite s,int idx);",
        "name": "sprite_visible_layer_id",
        "method_name": "visible_layer_id_at",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The layer index of the visible layer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "idx": {
            "type": "int",
            "description": "The index of the visible layer.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "visible_layer_id_at",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteVisibleLayerId(s: Sprite; idx: Integer): Integer",
          "cpp": "int sprite_visible_layer_id(sprite s, int idx)"
        }
      },
      {
        "signature": "int sprite_width(sprite s);",
        "name": "sprite_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "The current Width of the sprite (aligned to the X axis).",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The width of the sprite's layer in pixels.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "Width",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteWidth(s: Sprite): Integer",
          "cpp": "int sprite_width(sprite s)"
        }
      },
      {
        "signature": "float sprite_x(sprite s);",
        "name": "sprite_x",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the X position of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The x location of the sprite",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "x",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteX(s: Sprite): Single",
          "cpp": "float sprite_x(sprite s)"
        }
      },
      {
        "signature": "float sprite_y(sprite s);",
        "name": "sprite_y",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns the Y position of the sprite.",
        "brief": null,
        "return": {
          "type": "float",
          "description": "The sprite's y location.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to get the details from.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "getter": "y",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function SpriteY(s: Sprite): Single",
          "cpp": "float sprite_y(sprite s)"
        }
      },
      {
        "signature": "void stop_calling_on_sprite_event(sprite_event_handler *handler);",
        "name": "stop_calling_on_sprite_event",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Removes an global event handler, stopping events calling the indicated void.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "handler": {
            "type": "sprite_event_handler",
            "description": "The function to remove from the list of sprite event handlers.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure StopCallingOnSpriteEvent(handler: SpriteEventHandler)",
          "cpp": "void stop_calling_on_sprite_event(sprite_event_handler *handler)"
        }
      },
      {
        "signature": "void update_all_sprites();",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateAllSprites()",
          "cpp": "void update_all_sprites()"
        }
      },
      {
        "signature": "void update_all_sprites(float pct);",
        "name": "update_all_sprites",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update all of the sprites in the current sprite pack, passing in a\npercentage value to indicate the percentage to update.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "pct": {
            "type": "float",
            "description": "The percentage of the update to apply.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateAllSprites(pct: Single)",
          "cpp": "void update_all_sprites(float pct)"
        }
      },
      {
        "signature": "void update_sprite(sprite s);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSprite(s: Sprite)",
          "cpp": "void update_sprite(sprite s)"
        }
      },
      {
        "signature": "void update_sprite(sprite s,bool with_sound);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_with_sound",
        "unique_method_name": "update_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSprite(s: Sprite; withSound: Boolean)",
          "cpp": "void update_sprite(sprite s, bool with_sound)"
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_percent",
        "unique_method_name": "update_percent",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSprite(s: Sprite; pct: Single)",
          "cpp": "void update_sprite(sprite s, float pct)"
        }
      },
      {
        "signature": "void update_sprite(sprite s,float pct,bool with_sound);",
        "name": "update_sprite",
        "method_name": "update",
        "unique_global_name": "update_sprite_percent_with_sound",
        "unique_method_name": "update_percent_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update",
          "suffix": "percent_with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSprite(s: Sprite; pct: Single; withSound: Boolean)",
          "cpp": "void update_sprite(sprite s, float pct, bool with_sound)"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Updates the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSpriteAnimation(s: Sprite)",
          "cpp": "void update_sprite_animation(sprite s)"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_with_sound",
        "unique_method_name": "update_animation_with_sound",
        "suffix_name": null,
        "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSpriteAnimation(s: Sprite; withSound: Boolean)",
          "cpp": "void update_sprite_animation(sprite s, bool with_sound)"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_percent",
        "unique_method_name": "update_animation_percent",
        "suffix_name": null,
        "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "percent",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSpriteAnimation(s: Sprite; pct: Single)",
          "cpp": "void update_sprite_animation(sprite s, float pct)"
        }
      },
      {
        "signature": "void update_sprite_animation(sprite s,float pct,bool with_sound);",
        "name": "update_sprite_animation",
        "method_name": "update_animation",
        "unique_global_name": "update_sprite_animation_percent_with_sound",
        "unique_method_name": "update_animation_percent_with_sound",
        "suffix_name": null,
        "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pct": {
            "type": "float",
            "description": "The percent to update.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "with_sound": {
            "type": "bool",
            "description": "If false, animations will not play associated sound\neffects when updated.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "update_animation",
          "suffix": "percent_with_sound",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "procedure UpdateSpriteAnimation(s: Sprite; pct: Single; withSound: Boolean)",
          "cpp": "void update_sprite_animation(sprite s, float pct, bool with_sound)"
        }
      },
      {
        "signature": "vector_2d vector_from_center_sprite_to_point(sprite s,const point_2d &pt);",
        "name": "vector_from_center_sprite_to_point",
        "method_name": "vector_to",
        "unique_global_name": "vector_from_center_sprite_to_point_point",
        "unique_method_name": "vector_to_point",
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector pointing from the sprite to the point.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "sprite",
            "description": "The sprite that is at the start of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "pt": {
            "type": "point_2d",
            "description": "The point that is at the end of the vector.",
            "is_pointer": false,
            "is_const": true,
            "is_reference": true,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to",
          "suffix": "point",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function VectorFromCenterSpriteToPoint(s: Sprite; const pt: Point2d): Vector2d",
          "cpp": "vector_2d vector_from_center_sprite_to_point(sprite s, const point_2d &pt)"
        }
      },
      {
        "signature": "vector_2d vector_from_to(sprite s1,sprite s2);",
        "name": "vector_from_to",
        "method_name": "vector_to",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
        "brief": null,
        "return": {
          "type": "vector_2d",
          "description": "A vector that points from s1 to s2.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s1": {
            "type": "sprite",
            "description": "The sprite that is at the start of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "s2": {
            "type": "sprite",
            "description": "The sprite that is at the end of the vector.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "sprite",
          "method": "vector_to",
          "group": "sprites",
          "static": "sprite"
        },
        "signatures": {
          "pascal": "function VectorFromTo(s1: Sprite; s2: Sprite): Vector2d",
          "cpp": "vector_2d vector_from_to(sprite s1, sprite s2)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _sprite_data *sprite;",
        "name": "sprite",
        "description": "Sprites combine an image, with position and animation details. You can\ncreate a sprite using `create_sprite`, draw it with `draw_sprite`, move it\nusing the `sprite_velocity` with `update_sprite`, and animate it using an\n`animation_script`.",
        "brief": null,
        "attributes": {
          "class": "sprite",
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef void (sprite_event_handler) (void *s,int evt);",
        "name": "sprite_event_handler",
        "description": "The sprite_event_handler function pointer is used when you want to register\nto receive events from a Sprite.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` raising the event.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "evt": {
            "type": "int",
            "description": "The `sprite_event_kind` being raised.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      },
      {
        "signature": "typedef void (sprite_float_function)(void *s,float f);",
        "name": "sprite_float_function",
        "description": "The sprite single function is used with sprite packs to provide a\nprocedure to be called for each of the Sprites in the sprite pack,\nwhere a float value is required.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` being passed to the sprite function.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "f": {
            "type": "float",
            "description": "The value to be passed to the function.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      },
      {
        "signature": "typedef void (sprite_function)(void *s);",
        "name": "sprite_function",
        "description": "sprite_function is used with SpritePacks to provide a procedure to be\ncalled for each of the Sprites in the SpritePack.",
        "brief": null,
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        },
        "is_function_pointer": true,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "s": {
            "type": "void",
            "description": "The `sprite` being passed to the sprite function.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        }
      }
    ],
    "structs": [

    ],
    "enums": [
      {
        "signature": "enum collision_test_kind {PIXEL_COLLISIONS,AABB_COLLISIONS};",
        "name": "collision_test_kind",
        "description": "This enumeration can be used to set the kind of collisions a sprite will check for.",
        "brief": null,
        "constants": {
          "PIXEL_COLLISIONS": {
            "description": "The sprite will check for collisions with its collision bitmap."
          },
          "AABB_COLLISIONS": {
            "description": "The sprite will check for collisions with a bounding box around the sprite."
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        }
      },
      {
        "signature": "enum sprite_event_kind {SPRITE_ARRIVED_EVENT,SPRITE_ANIMATION_ENDED_EVENT,SPRITE_TOUCHED_EVENT,SPRITE_CLICKED_EVENT};",
        "name": "sprite_event_kind",
        "description": "This enumeration contains a list of all of the different kinds of\nevents that a Sprite can raise. When the event is raised the assocated\nsprite_event_kind value passed to the event handler to indicate the\nkind of event that has occurred.",
        "brief": null,
        "constants": {
          "SPRITE_ARRIVED_EVENT": {
            "description": "The sprite has arrived at the end of a move"
          },
          "SPRITE_ANIMATION_ENDED_EVENT": {
            "description": "The Sprite's animation has ended."
          },
          "SPRITE_TOUCHED_EVENT": {
            "description": "The Sprite was touched"
          },
          "SPRITE_CLICKED_EVENT": {
            "description": "The Sprite was touched"
          }
        },
        "attributes": {
          "group": "sprites",
          "static": "sprite"
        }
      }
    ],
    "defines": [

    ]
  },
  "terminal": {
    "brief": "SplashKit Terminal allows you to read and write values to the\nterminal in a consistent manner.",
    "description": "",
    "functions": [
      {
        "signature": "void activate_advanced_terminal();",
        "name": "activate_advanced_terminal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start using the advanced terminal. Once you call this you will need\nto make sure you call `refresh_terminal` to show anything you have\nwritten. This will allow use of colors, bold, positioning, and other\nadvanced options.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure ActivateAdvancedTerminal()",
          "cpp": "void activate_advanced_terminal()"
        }
      },
      {
        "signature": "bool advanced_terminal_active();",
        "name": "advanced_terminal_active",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Is the terminal currently in advanced mode?",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the terminal is in advanced mode.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "function AdvancedTerminalActive(): Boolean",
          "cpp": "bool advanced_terminal_active()"
        }
      },
      {
        "signature": "void clear_terminal();",
        "name": "clear_terminal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this will clear the terminal to the background color\nyou set in `set_terminal_color`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure ClearTerminal()",
          "cpp": "void clear_terminal()"
        }
      },
      {
        "signature": "void end_advanced_terminal();",
        "name": "end_advanced_terminal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Finish using advanced mode. The existing terminal display will be lost\nand the user will see what was in the terminal before you called\n`activate_advanced_terminal`.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure EndAdvancedTerminal()",
          "cpp": "void end_advanced_terminal()"
        }
      },
      {
        "signature": "void move_cursor_to(int x,int y);",
        "name": "move_cursor_to",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this will move the cursor to a given col, row of the\nterminal. You can check the terminal size using `terminal_width` and\n`terminal_height`. If you try to move outside this bounds then then move\nwill not occur.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "x": {
            "type": "int",
            "description": "The column to move to, must be between 0 and `terminal_width`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The row to move to, must be between 0 and `terminal_height`",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure MoveCursorTo(x: Integer; y: Integer)",
          "cpp": "void move_cursor_to(int x, int y)"
        }
      },
      {
        "signature": "char read_char();",
        "name": "read_char",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get a single character input by the user. This works in both standard and\nadvanced modes. In advanced mode, you can set if the character should\nalso be echoed to the terminal using `set_terminal_echo_input`.",
        "brief": null,
        "return": {
          "type": "char",
          "description": "The character typed by the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "function ReadChar(): Char",
          "cpp": "char read_char()"
        }
      },
      {
        "signature": "string read_line();",
        "name": "read_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Read a line of text from the terminal. The user will see the text as\nthey type it.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The text entered by the user.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "function ReadLine(): String",
          "cpp": "string read_line()"
        }
      },
      {
        "signature": "void refresh_terminal();",
        "name": "refresh_terminal",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this will display what has been written to the\nterminal. You need to call this for anything to be shown in advanced\nmode.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure RefreshTerminal()",
          "cpp": "void refresh_terminal()"
        }
      },
      {
        "signature": "void set_terminal_bold(bool value);",
        "name": "set_terminal_bold",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this allows you to set if the text should draw as bold.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "bool",
            "description": "Pass true to have the terminal write in bold",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure SetTerminalBold(value: Boolean)",
          "cpp": "void set_terminal_bold(bool value)"
        }
      },
      {
        "signature": "void set_terminal_colors(color foreground,color background);",
        "name": "set_terminal_colors",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode this allows you to set the color of the foreground and\nthe background. The foreground is the color of the text.\n\n\nNote that only the following colors are guaranteed to work on all\nTerminals (others may work):\n\n\n-  `color_black`\n\n\n-  `color_dark_gray`\n\n\n-  `color_gray`\n\n\n-  `color_white`\n\n\n-  `color_red`\n\n\n-  `color_dark_red`\n\n\n-  `color_green`\n\n\n-  `color_dark_green`\n\n\n-  `color_blue`\n\n\n-  `color_dark_blue`\n\n\n-  `color_cyan`\n\n\n-  `color_dark_cyan`\n\n\n-  `color_light_yellow`\n\n\n-  `color_yellow`\n\n\n-  `color_magenta`\n\n\n-  `color_dark_magenta`",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "foreground": {
            "type": "color",
            "description": "The color of text that is drawn.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "background": {
            "type": "color",
            "description": "The color of the background behind drawn text.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure SetTerminalColors(foreground: Color; background: Color)",
          "cpp": "void set_terminal_colors(color foreground, color background)"
        }
      },
      {
        "signature": "void set_terminal_echo_input(bool value);",
        "name": "set_terminal_echo_input",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this allows you to stop text read with `read_char`\nappearing on the terminal. You can use this for reading passwords, or to\ncontrol what is written.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "value": {
            "type": "bool",
            "description": "Pass true if you want characters to appear as typed.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure SetTerminalEchoInput(value: Boolean)",
          "cpp": "void set_terminal_echo_input(bool value)"
        }
      },
      {
        "signature": "int terminal_height();",
        "name": "terminal_height",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this gives you the number of rows in the terminal.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of rows in the terminal",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "function TerminalHeight(): Integer",
          "cpp": "int terminal_height()"
        }
      },
      {
        "signature": "int terminal_width();",
        "name": "terminal_width",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this gives you the number of columns in the terminal.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "The number of columns in the terminal",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "function TerminalWidth(): Integer",
          "cpp": "int terminal_width()"
        }
      },
      {
        "signature": "void write(string text);",
        "name": "write",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the supplied text to the Terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure Write(text: String)",
          "cpp": "void write(string text)"
        }
      },
      {
        "signature": "void write_at(string text,int x,int y);",
        "name": "write_at",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "In advanced mode, this will write the supplied text at the indicated\ncolumn and row.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "text": {
            "type": "string",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "x": {
            "type": "int",
            "description": "The row to position the text at",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "int",
            "description": "The column to position the text at",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure WriteAt(text: String; x: Integer; y: Integer)",
          "cpp": "void write_at(string text, int x, int y)"
        }
      },
      {
        "signature": "void write_line();",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure WriteLine()",
          "cpp": "void write_line()"
        }
      },
      {
        "signature": "void write_line(string line);",
        "name": "write_line",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Write the passed in text, then move to the next line/row of the terminal.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "line": {
            "type": "string",
            "description": "The text to write",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "terminal",
          "static": "terminal"
        },
        "signatures": {
          "pascal": "procedure WriteLine(line: String)",
          "cpp": "void write_line(string line)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "timers": {
    "brief": "Timers in SplashKit can be used to track the passing of time.",
    "description": "",
    "functions": [
      {
        "signature": "timer create_timer(string name);",
        "name": "create_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
        "brief": null,
        "return": {
          "type": "timer",
          "description": "A new timer.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer for resource tracking",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "constructor": true,
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function CreateTimer(name: String): Timer",
          "cpp": "timer create_timer(string name)"
        }
      },
      {
        "signature": "void free_all_timers();",
        "name": "free_all_timers",
        "method_name": "release_all_timers",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free all of timers that have been created.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "timers",
          "method": "release_all_timers",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure FreeAllTimers()",
          "cpp": "void free_all_timers()"
        }
      },
      {
        "signature": "void free_timer(timer to_free);",
        "name": "free_timer",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Free the memory used to store this timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_free": {
            "type": "timer",
            "description": "The time to be released.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "destructor": true,
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure FreeTimer(toFree: Timer)",
          "cpp": "void free_timer(timer to_free)"
        }
      },
      {
        "signature": "bool has_timer(string name);",
        "name": "has_timer",
        "method_name": "has_timer",
        "unique_global_name": "has_timer__named",
        "unique_method_name": "has_timer__named",
        "suffix_name": null,
        "description": "Checks if SplashKit has a timer with the indicated name.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if SplashKit has created a timer with that name.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timers",
          "method": "has_timer",
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function HasTimer(name: String): Boolean",
          "cpp": "bool has_timer(string name)"
        }
      },
      {
        "signature": "void pause_timer(string name);",
        "name": "pause_timer",
        "method_name": null,
        "unique_global_name": "pause_timer__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure PauseTimer(name: String)",
          "cpp": "void pause_timer(string name)"
        }
      },
      {
        "signature": "void pause_timer(timer to_pause);",
        "name": "pause_timer",
        "method_name": "pause",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_pause": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "pause",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure PauseTimer(toPause: Timer)",
          "cpp": "void pause_timer(timer to_pause)"
        }
      },
      {
        "signature": "void reset_timer(string name);",
        "name": "reset_timer",
        "method_name": null,
        "unique_global_name": "reset_timer__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets the named timer",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure ResetTimer(name: String)",
          "cpp": "void reset_timer(string name)"
        }
      },
      {
        "signature": "void reset_timer(timer tmr);",
        "name": "reset_timer",
        "method_name": "reset",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resets the time of a given timer",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "tmr": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "reset",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure ResetTimer(tmr: Timer)",
          "cpp": "void reset_timer(timer tmr)"
        }
      },
      {
        "signature": "void resume_timer(string name);",
        "name": "resume_timer",
        "method_name": null,
        "unique_global_name": "resume_timer__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes the named timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure ResumeTimer(name: String)",
          "cpp": "void resume_timer(string name)"
        }
      },
      {
        "signature": "void resume_timer(timer to_resume);",
        "name": "resume_timer",
        "method_name": "resume",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Resumes a paused timer.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_resume": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "resume",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure ResumeTimer(toResume: Timer)",
          "cpp": "void resume_timer(timer to_resume)"
        }
      },
      {
        "signature": "void start_timer(string name);",
        "name": "start_timer",
        "method_name": null,
        "unique_global_name": "start_timer__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure StartTimer(name: String)",
          "cpp": "void start_timer(string name)"
        }
      },
      {
        "signature": "void start_timer(timer to_start);",
        "name": "start_timer",
        "method_name": "start",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_start": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "start",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure StartTimer(toStart: Timer)",
          "cpp": "void start_timer(timer to_start)"
        }
      },
      {
        "signature": "void stop_timer(string name);",
        "name": "stop_timer",
        "method_name": null,
        "unique_global_name": "stop_timer__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure StopTimer(name: String)",
          "cpp": "void stop_timer(string name)"
        }
      },
      {
        "signature": "void stop_timer(timer to_stop);",
        "name": "stop_timer",
        "method_name": "stop",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_stop": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "method": "stop",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "procedure StopTimer(toStop: Timer)",
          "cpp": "void stop_timer(timer to_stop)"
        }
      },
      {
        "signature": "timer timer_named(string name);",
        "name": "timer_named",
        "method_name": "get_timer_named",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Get the timer created with the indicated name.",
        "brief": null,
        "return": {
          "type": "timer",
          "description": "Returns the timer fetched from SplashKit",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer to fetch",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timers",
          "method": "get_timer_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerNamed(name: String): Timer",
          "cpp": "timer timer_named(string name)"
        }
      },
      {
        "signature": "bool timer_paused(string name);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": "timer_paused__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer is paused",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerPaused(name: String): Boolean",
          "cpp": "bool timer_paused(string name)"
        }
      },
      {
        "signature": "bool timer_paused(timer to_get);",
        "name": "timer_paused",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is paused.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer is paused",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_paused",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerPaused(toGet: Timer): Boolean",
          "cpp": "bool timer_paused(timer to_get)"
        }
      },
      {
        "signature": "bool timer_started(string name);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": "timer_started__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer has been started",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerStarted(name: String): Boolean",
          "cpp": "bool timer_started(string name)"
        }
      },
      {
        "signature": "bool timer_started(timer to_get);",
        "name": "timer_started",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Indicates if the timer is started.",
        "brief": null,
        "return": {
          "type": "bool",
          "description": "True if the timer has been started",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "is_started",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerStarted(toGet: Timer): Boolean",
          "cpp": "bool timer_started(timer to_get)"
        }
      },
      {
        "signature": "unsigned int timer_ticks(string name);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": "timer_ticks__named",
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "name": {
            "type": "string",
            "description": "The name of the Timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "suffix": "_named",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerTicks(name: String): Cardinal",
          "cpp": "unsigned int timer_ticks(string name)"
        }
      },
      {
        "signature": "unsigned int timer_ticks(timer to_get);",
        "name": "timer_ticks",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "to_get": {
            "type": "timer",
            "description": "The timer",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "timer",
          "getter": "ticks",
          "group": "timers",
          "static": "timers"
        },
        "signatures": {
          "pascal": "function TimerTicks(toGet: Timer): Cardinal",
          "cpp": "unsigned int timer_ticks(timer to_get)"
        }
      }
    ],
    "typedefs": [
      {
        "signature": "typedef struct _timer_data *timer;",
        "name": "timer",
        "description": "Timers in SplashKit can be used to track the passing of time. In general\nyou will create a timer, start it, then use it to track time by asking\nfor the timer's ticks (milliseconds).",
        "brief": null,
        "attributes": {
          "class": "timer",
          "group": "timers",
          "static": "timers"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  },
  "types": {
    "brief": "",
    "description": "",
    "functions": [

    ],
    "typedefs": [
      {
        "signature": "typedef struct _animation_data *animation;",
        "name": "animation",
        "description": "Animations are created from an `animation_script`. Each animation tracks\nthe current frame for one animation sequence. You update this animation\nand draw with it. This allows you to have the one script being used to\ncreate lots of individual animations, where each animation is potentially\nat a different frame.",
        "brief": null,
        "attributes": {
          "class": "animation",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _animation_script_data *animation_script;",
        "name": "animation_script",
        "description": "Animations in SplashKit are controlled by an animation script. This\nscript tells SplashKit how long to play each frame, which cell in the\nbitmap the frame relates to, and which is the next frame. You load these\nscripts from file and can then use them to create animations that are\nused with the drawing options when you draw a bitmap.",
        "brief": null,
        "attributes": {
          "class": "animation_script",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct _bitmap_data *bitmap;",
        "name": "bitmap",
        "description": "Bitmaps represent image resources in SplashKit. You can load these from\nfile, download them from the internet, or create and draw them yourself.\nOnce created or loaded, you can draw the bitmap and you can draw onto\nthe bitmap.",
        "brief": null,
        "attributes": {
          "class": "bitmap",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_display *display;",
        "name": "display",
        "description": "Each display value represents a physical display attached to the\ncomputer. You can use this to query the displays position and size.",
        "brief": null,
        "attributes": {
          "class": "display",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      },
      {
        "signature": "typedef struct sk_font_data *font;",
        "name": "font",
        "description": "Fonts are used to draw text in SplashKit. These can be loaded from file\nor downloaded from the internet. Once you have a font you can use the\ndraw text procedures to use that font when drawing.",
        "brief": null,
        "attributes": {
          "class": "font",
          "group": "types"
        },
        "is_function_pointer": false,
        "aliased_type": null,
        "aliased_identifier": null,
        "is_pointer": false,
        "new_identifier": null
      }
    ],
    "structs": [
      {
        "signature": "struct circle {point_2d center;float radius;};",
        "name": "circle",
        "description": "Circles have a center point and a radius. This means that, unlike shapes\nlike the `rectangle`, the circle extends out both left and right, and up\nand down from the point you position it at.",
        "brief": null,
        "fields": {
          "center": {
            "type": "point_2d",
            "description": "The center point of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "radius": {
            "type": "float",
            "description": "The radius of the circle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct color {float r, g, b, a;};",
        "name": "color",
        "description": "Colors can be used when drawing shapes and clearing surfaces. Color in\nsplashkit does include a alpha value used for opacity, which allows you\nto have partially transparent colors.",
        "brief": null,
        "fields": {
          "r": {
            "type": "float",
            "description": "The red component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "g": {
            "type": "float",
            "description": "The green component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "b": {
            "type": "float",
            "description": "The blue component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "a": {
            "type": "float",
            "description": "The alpha component of the color (between 0 and 1.0)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct drawing_options {void *dest; // The bitmap or window used to draw on tofloat scale_x; // Scale datafloat scale_y; //float angle; // Angle for rotationsfloat anchor_offset_x; // Centre point for rotationsfloat anchor_offset_y; //bool flip_x; // Flip databool flip_y; //bool is_part; // Draw just a part?rectangle part; // Part to drawdrawing_dest camera; // Draw to world or screen coordinates (camera has effect?)int line_width; // Specify the width of line drawings.animation anim; // The animation for bitmap drawing};",
        "name": "drawing_options",
        "description": "Drawing options allow you to customise drawing options. These should be\ninitialised using the drawing option functions.",
        "brief": null,
        "fields": {
          "dest": {
            "type": "void",
            "description": "The destination of the drawing: a window or bitmap.",
            "is_pointer": true,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_x": {
            "type": "float",
            "description": "How much x values are scaled.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "scale_y": {
            "type": "float",
            "description": "How much y values are scaled.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "angle": {
            "type": "float",
            "description": "A rotation angle for bitmap drawing.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_offset_x": {
            "type": "float",
            "description": "The x location of the anchor point around which\nbitmap drawing will rotate.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anchor_offset_y": {
            "type": "float",
            "description": "The y location of the anchor point around which\nbitmap drawing will rotate.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "flip_x": {
            "type": "bool",
            "description": "Should bitmaps be flipped horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "flip_y": {
            "type": "bool",
            "description": "Should bitmaps be flipped vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "is_part": {
            "type": "bool",
            "description": "Indicates that part of a bitmap should be drawn",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "part": {
            "type": "rectangle",
            "description": "The area of the bitmap to draw",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "camera": {
            "type": "drawing_dest",
            "description": "How the current window camera affects the drawing",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "line_width": {
            "type": "int",
            "description": "How wide are lines (only lines at this stage)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "anim": {
            "type": "animation",
            "description": "The animation to use, which overrides the part\noption",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct line {point_2d start_point;point_2d end_point;};",
        "name": "line",
        "description": "A line goes from a start point to an end point.",
        "brief": null,
        "fields": {
          "start_point": {
            "type": "point_2d",
            "description": "The start of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "end_point": {
            "type": "point_2d",
            "description": "The end of the line",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct point_2d {float x, y;};",
        "name": "point_2d",
        "description": "A Point2D represents an location in Cartesian coordinates (x,y).\nThe x value represents the distance from the left edge of the window or bitmap, increasing\nin value as you travel right. The y value represents the distance from the top\nedge of the window or bitmap, and increases as you travel down toward the bottom.\n\nPoint2D is a great way to keep track of the location of something in a 2D space like\na Window or Bitmap.",
        "brief": null,
        "fields": {
          "x": {
            "type": "float",
            "description": "The distance from the left side of the bitmap or window (\nincreasing as you go to the right)",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance from the top of a bitmap or window (increasing\nas you go down).",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct quad {point_2d points[4];};",
        "name": "quad",
        "description": "Quads (quadrilaterals) are shapes with 4 sides, but unlike `rectangle`,\nthese shapes can have axis that do not line up with screen/bitmap axis.\n\nPoints should be constructed with the top left as the first point, top\nright as the second, bottom left as the third, and bottom right as the\nlast point. Other orders may give unexpected outcomes.",
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": "The array of points: top left, top right, bottom left,\nbottom right",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              4
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct rectangle {float x, y;float width, height;};",
        "name": "rectangle",
        "description": "Rectangles are simple rectangle shapes that exist at a point and have a\nset width and height. This means that the rectangle always has edges that\nfollow the sides of the `window` or `bitmap` (so they are aligned with\nthe x and y axes). The rectangle's position is its top left corner - it\nthen extends to the right and down from this position.",
        "brief": null,
        "fields": {
          "x": {
            "type": "float",
            "description": "The distance to the left edge of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "float",
            "description": "The distance to the top edge of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "width": {
            "type": "float",
            "description": "The width of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "height": {
            "type": "float",
            "description": "The height of the rectangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct triangle {point_2d points[3];};",
        "name": "triangle",
        "description": "A triangle consists of three points, being the three points of the\ntriangle.",
        "brief": null,
        "fields": {
          "points": {
            "type": "point_2d",
            "description": "The points of the triangle",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": true,
            "array_dimension_sizes": [
              3
            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "struct vector_2d {double x;double y;};",
        "name": "vector_2d",
        "description": "Vectors represent a direction and distance, and can be visualised as an\narrow from one point to another in 2 dimensional space. Internally, the\n`vector_2d` is stored as its x and y components.\n\nVector is a great way to represent movement or forces. You could use a\n`vector_2d` to track how much a character moves each update (as the\nvector stores the direction and distance). Similarly, you could use a\n`vector_2d` to represent gravity or other forces. You can then\nadd a number of force vectors together to get a final force to be applied\nto a character.",
        "brief": null,
        "fields": {
          "x": {
            "type": "double",
            "description": "The distance to move horizontally",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "y": {
            "type": "double",
            "description": "The distance to move vertically",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "types"
        }
      }
    ],
    "enums": [
      {
        "signature": "enum drawing_dest {DRAW_TO_SCREEN, // no camera effectDRAW_TO_WORLD, // camera effectDRAW_DEFAULT // camera effect on screen, but not on bitmaps};",
        "name": "drawing_dest",
        "description": "Determines the effect of the camera on a drawing operation.",
        "brief": null,
        "constants": {
          "DRAW_TO_SCREEN": {
            "description": "means camera has no affect."
          },
          "DRAW_TO_WORLD": {
            "description": "means camera has an affect."
          },
          "DRAW_DEFAULT": {
            "description": "means camera has an affect only if drawn to a\nwindow."
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "enum font_style {NORMAL_FONT = 0,BOLD_FONT = 1,ITALIC_FONT = 2,UNDERLINE_FONT = 4};",
        "name": "font_style",
        "description": "Use font styles to set the style of a font. Setting the style is time\nconsuming, so create alternative font variables for each different\nstyle you want to work with. Note that these values can be logical\nORed together to combine styles, e.g. BoldFont or ItalicFont = both\nbold and italic.",
        "brief": null,
        "constants": {
          "NORMAL_FONT": {
            "description": "Normal font.",
            "number": 0
          },
          "BOLD_FONT": {
            "description": "Bold font.",
            "number": 1
          },
          "ITALIC_FONT": {
            "description": "Italic font.",
            "number": 2
          },
          "UNDERLINE_FONT": {
            "description": "Underlined font.",
            "number": 4
          }
        },
        "attributes": {
          "group": "types"
        }
      },
      {
        "signature": "enum http_status_code {HTTP_STATUS_OK = 200,HTTP_STATUS_CREATED = 201,HTTP_STATUS_NO_CONTENT = 204,HTTP_STATUS_BAD_REQUEST = 400,HTTP_STATUS_UNAUTHORIZED = 401,HTTP_STATUS_FORBIDDEN = 403,HTTP_STATUS_NOT_FOUND = 404,HTTP_STATUS_METHOD_NOT_ALLOWED = 405,HTTP_STATUS_REQUEST_TIMEOUT = 408,HTTP_STATUS_INTERNAL_SERVER_ERROR = 500,HTTP_STATUS_NOT_IMPLEMENTED = 501,HTTP_STATUS_SERVICE_UNAVAILABLE = 503};",
        "name": "http_status_code",
        "description": "Defines the HTTP status codes supported by SplashKit.\nRefer to [this article](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\nfor a detailed description of each code.",
        "brief": null,
        "constants": {
          "HTTP_STATUS_OK": {
            "description": "The server accepted the request.",
            "number": 200
          },
          "HTTP_STATUS_CREATED": {
            "description": "The request has been fulfilled, resulting in the creation of a new resource.",
            "number": 201
          },
          "HTTP_STATUS_NO_CONTENT": {
            "description": "The server successfully processed the request and is not returning any content.",
            "number": 204
          },
          "HTTP_STATUS_BAD_REQUEST": {
            "description": "The server cannot or will not process the request due to an apparent client error.",
            "number": 400
          },
          "HTTP_STATUS_UNAUTHORIZED": {
            "description": "The server requires authentication or has failed to process provided authentication.",
            "number": 401
          },
          "HTTP_STATUS_FORBIDDEN": {
            "description": "The request was a valid request, but the server is refusing to respond to it.",
            "number": 403
          },
          "HTTP_STATUS_NOT_FOUND": {
            "description": "The requested resource could not be found but may be available in the future.",
            "number": 404
          },
          "HTTP_STATUS_METHOD_NOT_ALLOWED": {
            "description": "The request method is not support for the requested resource.",
            "number": 405
          },
          "HTTP_STATUS_REQUEST_TIMEOUT": {
            "description": "The server timed out waiting for the request.",
            "number": 408
          },
          "HTTP_STATUS_INTERNAL_SERVER_ERROR": {
            "description": "The server encountered an unexpected condition.",
            "number": 500
          },
          "HTTP_STATUS_NOT_IMPLEMENTED": {
            "description": "The server does not recognize or implement the request method.",
            "number": 501
          },
          "HTTP_STATUS_SERVICE_UNAVAILABLE": {
            "description": "The server is currently unavailable.",
            "number": 503
          }
        },
        "attributes": {
          "group": "types"
        }
      }
    ],
    "defines": [

    ]
  },
  "utilities": {
    "brief": "SplashKit random provides a simple implementation of random.SplashKit provides miscellaneous utilities for unclassified functionality.",
    "description": "The SplashKit`s random library provides two rnd methods, a `rnd()` which generates\na random number between 0 and 1, and `rnd(int ubound)` which\ngenerates a random number between 0 and the value scpeficied in `ubound`.",
    "functions": [
      {
        "signature": "float rnd();",
        "name": "rnd",
        "method_name": "rnd",
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and 1",
        "brief": null,
        "return": {
          "type": "float",
          "description": "Returns a `float` between `0` and `1`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "class": "random",
          "method": "rnd",
          "group": "utilities",
          "static": "random"
        },
        "signatures": {
          "pascal": "function Rnd(): Single",
          "cpp": "float rnd()"
        }
      },
      {
        "signature": "int rnd(int ubound);",
        "name": "rnd",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Generates a random number between 0 and `ubound`.",
        "brief": null,
        "return": {
          "type": "int",
          "description": "Returns an `int` between `0` and `ubound`",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "ubound": {
            "type": "int",
            "description": "the `int` representing the upper bound.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "class": "random",
          "group": "utilities",
          "static": "random"
        },
        "signatures": {
          "pascal": "function Rnd(ubound: Integer): Integer",
          "cpp": "int rnd(int ubound)"
        }
      },
      {
        "signature": "unsigned int current_ticks();",
        "name": "current_ticks",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Gets the number of milliseconds that have passed since the program was\nstarted.",
        "brief": null,
        "return": {
          "type": "unsigned int",
          "description": "The number of milliseconds passed",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "pascal": "function CurrentTicks(): Cardinal",
          "cpp": "unsigned int current_ticks()"
        }
      },
      {
        "signature": "void delay(unsigned int milliseconds);",
        "name": "delay",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Puts the program to sleep for a specified number of milliseconds. If this\nis larger than 1 second, SplashKit will check to see if the user tries to\nquit during the delay. If the user does quit, the delay function returns\nwithout waiting.",
        "brief": null,
        "return": {
          "type": "void",
          "description": null,
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "milliseconds": {
            "type": "unsigned int",
            "description": "The number of milliseconds to wait",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "pascal": "procedure Delay(milliseconds: Cardinal)",
          "cpp": "void delay(unsigned int milliseconds)"
        }
      },
      {
        "signature": "string file_as_string(string filename,resource_kind kind);",
        "name": "file_as_string",
        "method_name": null,
        "unique_global_name": null,
        "unique_method_name": null,
        "suffix_name": null,
        "description": "Return a SplashKit resource of `resource_kind` with name `filename`\nas a string.",
        "brief": null,
        "return": {
          "type": "string",
          "description": "The file loaded into a string.",
          "is_pointer": false,
          "is_reference": false,
          "is_vector": false,
          "type_parameter": null
        },
        "parameters": {
          "filename": {
            "type": "string",
            "description": "The filename of the resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          },
          "kind": {
            "type": "resource_kind",
            "description": "The kind of resource.",
            "is_pointer": false,
            "is_const": false,
            "is_reference": false,
            "is_array": false,
            "array_dimension_sizes": [

            ],
            "is_vector": false,
            "type_parameter": null
          }
        },
        "attributes": {
          "group": "utilities",
          "static": "utilities"
        },
        "signatures": {
          "pascal": "function FileAsString(filename: String; kind: ResourceKind): String",
          "cpp": "string file_as_string(string filename, resource_kind kind)"
        }
      }
    ],
    "typedefs": [

    ],
    "structs": [

    ],
    "enums": [

    ],
    "defines": [

    ]
  }
}
